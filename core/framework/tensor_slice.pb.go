// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tensor_slice.proto

package framework

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Can only be interpreted if you know the corresponding TensorShape.
type TensorSliceProto struct {
	// Extent of the slice in all tensor dimensions.
	//
	// Must have one entry for each of the dimension of the tensor that this
	// slice belongs to.  The order of sizes is the same as the order of
	// dimensions in the TensorShape.
	Extent               []*TensorSliceProto_Extent `protobuf:"bytes,1,rep,name=extent" json:"extent,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *TensorSliceProto) Reset()      { *m = TensorSliceProto{} }
func (*TensorSliceProto) ProtoMessage() {}
func (*TensorSliceProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_tensor_slice_623a80b9ba65792c, []int{0}
}
func (m *TensorSliceProto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TensorSliceProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TensorSliceProto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TensorSliceProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TensorSliceProto.Merge(dst, src)
}
func (m *TensorSliceProto) XXX_Size() int {
	return m.Size()
}
func (m *TensorSliceProto) XXX_DiscardUnknown() {
	xxx_messageInfo_TensorSliceProto.DiscardUnknown(m)
}

var xxx_messageInfo_TensorSliceProto proto.InternalMessageInfo

func (m *TensorSliceProto) GetExtent() []*TensorSliceProto_Extent {
	if m != nil {
		return m.Extent
	}
	return nil
}

// Extent of the slice in one dimension.
type TensorSliceProto_Extent struct {
	// Start index of the slice, starting at 0.
	Start int64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	// Length of the slice: if the length is missing or -1 we will
	// interpret this as "everything in this dimension".  We use
	// "oneof" to preserve information about whether the length is
	// present without changing the serialization format from the
	// prior proto2 version of this proto.
	//
	// Types that are valid to be assigned to HasLength:
	//	*TensorSliceProto_Extent_Length
	HasLength            isTensorSliceProto_Extent_HasLength `protobuf_oneof:"has_length"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *TensorSliceProto_Extent) Reset()      { *m = TensorSliceProto_Extent{} }
func (*TensorSliceProto_Extent) ProtoMessage() {}
func (*TensorSliceProto_Extent) Descriptor() ([]byte, []int) {
	return fileDescriptor_tensor_slice_623a80b9ba65792c, []int{0, 0}
}
func (m *TensorSliceProto_Extent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TensorSliceProto_Extent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TensorSliceProto_Extent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TensorSliceProto_Extent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TensorSliceProto_Extent.Merge(dst, src)
}
func (m *TensorSliceProto_Extent) XXX_Size() int {
	return m.Size()
}
func (m *TensorSliceProto_Extent) XXX_DiscardUnknown() {
	xxx_messageInfo_TensorSliceProto_Extent.DiscardUnknown(m)
}

var xxx_messageInfo_TensorSliceProto_Extent proto.InternalMessageInfo

type isTensorSliceProto_Extent_HasLength interface {
	isTensorSliceProto_Extent_HasLength()
	Equal(interface{}) bool
	VerboseEqual(interface{}) error
	MarshalTo([]byte) (int, error)
	Size() int
}

type TensorSliceProto_Extent_Length struct {
	Length int64 `protobuf:"varint,2,opt,name=length,proto3,oneof"`
}

func (*TensorSliceProto_Extent_Length) isTensorSliceProto_Extent_HasLength() {}

func (m *TensorSliceProto_Extent) GetHasLength() isTensorSliceProto_Extent_HasLength {
	if m != nil {
		return m.HasLength
	}
	return nil
}

func (m *TensorSliceProto_Extent) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *TensorSliceProto_Extent) GetLength() int64 {
	if x, ok := m.GetHasLength().(*TensorSliceProto_Extent_Length); ok {
		return x.Length
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TensorSliceProto_Extent) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TensorSliceProto_Extent_OneofMarshaler, _TensorSliceProto_Extent_OneofUnmarshaler, _TensorSliceProto_Extent_OneofSizer, []interface{}{
		(*TensorSliceProto_Extent_Length)(nil),
	}
}

func _TensorSliceProto_Extent_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TensorSliceProto_Extent)
	// has_length
	switch x := m.HasLength.(type) {
	case *TensorSliceProto_Extent_Length:
		_ = b.EncodeVarint(2<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Length))
	case nil:
	default:
		return fmt.Errorf("TensorSliceProto_Extent.HasLength has unexpected type %T", x)
	}
	return nil
}

func _TensorSliceProto_Extent_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TensorSliceProto_Extent)
	switch tag {
	case 2: // has_length.length
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.HasLength = &TensorSliceProto_Extent_Length{int64(x)}
		return true, err
	default:
		return false, nil
	}
}

func _TensorSliceProto_Extent_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TensorSliceProto_Extent)
	// has_length
	switch x := m.HasLength.(type) {
	case *TensorSliceProto_Extent_Length:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Length))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*TensorSliceProto)(nil), "framework.TensorSliceProto")
	proto.RegisterType((*TensorSliceProto_Extent)(nil), "framework.TensorSliceProto.Extent")
}
func (this *TensorSliceProto) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*TensorSliceProto)
	if !ok {
		that2, ok := that.(TensorSliceProto)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *TensorSliceProto")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *TensorSliceProto but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *TensorSliceProto but is not nil && this == nil")
	}
	if len(this.Extent) != len(that1.Extent) {
		return fmt.Errorf("Extent this(%v) Not Equal that(%v)", len(this.Extent), len(that1.Extent))
	}
	for i := range this.Extent {
		if !this.Extent[i].Equal(that1.Extent[i]) {
			return fmt.Errorf("Extent this[%v](%v) Not Equal that[%v](%v)", i, this.Extent[i], i, that1.Extent[i])
		}
	}
	return nil
}
func (this *TensorSliceProto) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TensorSliceProto)
	if !ok {
		that2, ok := that.(TensorSliceProto)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Extent) != len(that1.Extent) {
		return false
	}
	for i := range this.Extent {
		if !this.Extent[i].Equal(that1.Extent[i]) {
			return false
		}
	}
	return true
}
func (this *TensorSliceProto_Extent) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*TensorSliceProto_Extent)
	if !ok {
		that2, ok := that.(TensorSliceProto_Extent)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *TensorSliceProto_Extent")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *TensorSliceProto_Extent but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *TensorSliceProto_Extent but is not nil && this == nil")
	}
	if this.Start != that1.Start {
		return fmt.Errorf("Start this(%v) Not Equal that(%v)", this.Start, that1.Start)
	}
	if that1.HasLength == nil {
		if this.HasLength != nil {
			return fmt.Errorf("this.HasLength != nil && that1.HasLength == nil")
		}
	} else if this.HasLength == nil {
		return fmt.Errorf("this.HasLength == nil && that1.HasLength != nil")
	} else if err := this.HasLength.VerboseEqual(that1.HasLength); err != nil {
		return err
	}
	return nil
}
func (this *TensorSliceProto_Extent_Length) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*TensorSliceProto_Extent_Length)
	if !ok {
		that2, ok := that.(TensorSliceProto_Extent_Length)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *TensorSliceProto_Extent_Length")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *TensorSliceProto_Extent_Length but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *TensorSliceProto_Extent_Length but is not nil && this == nil")
	}
	if this.Length != that1.Length {
		return fmt.Errorf("Length this(%v) Not Equal that(%v)", this.Length, that1.Length)
	}
	return nil
}
func (this *TensorSliceProto_Extent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TensorSliceProto_Extent)
	if !ok {
		that2, ok := that.(TensorSliceProto_Extent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Start != that1.Start {
		return false
	}
	if that1.HasLength == nil {
		if this.HasLength != nil {
			return false
		}
	} else if this.HasLength == nil {
		return false
	} else if !this.HasLength.Equal(that1.HasLength) {
		return false
	}
	return true
}
func (this *TensorSliceProto_Extent_Length) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TensorSliceProto_Extent_Length)
	if !ok {
		that2, ok := that.(TensorSliceProto_Extent_Length)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Length != that1.Length {
		return false
	}
	return true
}
func (this *TensorSliceProto) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&framework.TensorSliceProto{")
	if this.Extent != nil {
		s = append(s, "Extent: "+fmt.Sprintf("%#v", this.Extent)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TensorSliceProto_Extent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&framework.TensorSliceProto_Extent{")
	s = append(s, "Start: "+fmt.Sprintf("%#v", this.Start)+",\n")
	if this.HasLength != nil {
		s = append(s, "HasLength: "+fmt.Sprintf("%#v", this.HasLength)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TensorSliceProto_Extent_Length) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&framework.TensorSliceProto_Extent_Length{` +
		`Length:` + fmt.Sprintf("%#v", this.Length) + `}`}, ", ")
	return s
}
func valueToGoStringTensorSlice(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TensorSliceProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TensorSliceProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Extent) > 0 {
		for _, msg := range m.Extent {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTensorSlice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TensorSliceProto_Extent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TensorSliceProto_Extent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Start != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTensorSlice(dAtA, i, uint64(m.Start))
	}
	if m.HasLength != nil {
		nn1, err := m.HasLength.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *TensorSliceProto_Extent_Length) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x10
	i++
	i = encodeVarintTensorSlice(dAtA, i, uint64(m.Length))
	return i, nil
}
func encodeVarintTensorSlice(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedTensorSliceProto(r randyTensorSlice, easy bool) *TensorSliceProto {
	this := &TensorSliceProto{}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Extent = make([]*TensorSliceProto_Extent, v1)
		for i := 0; i < v1; i++ {
			this.Extent[i] = NewPopulatedTensorSliceProto_Extent(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTensorSliceProto_Extent(r randyTensorSlice, easy bool) *TensorSliceProto_Extent {
	this := &TensorSliceProto_Extent{}
	this.Start = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Start *= -1
	}
	oneofNumber_HasLength := []int32{2}[r.Intn(1)]
	switch oneofNumber_HasLength {
	case 2:
		this.HasLength = NewPopulatedTensorSliceProto_Extent_Length(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTensorSliceProto_Extent_Length(r randyTensorSlice, easy bool) *TensorSliceProto_Extent_Length {
	this := &TensorSliceProto_Extent_Length{}
	this.Length = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Length *= -1
	}
	return this
}

type randyTensorSlice interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTensorSlice(r randyTensorSlice) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTensorSlice(r randyTensorSlice) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneTensorSlice(r)
	}
	return string(tmps)
}
func randUnrecognizedTensorSlice(r randyTensorSlice, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldTensorSlice(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldTensorSlice(dAtA []byte, r randyTensorSlice, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateTensorSlice(dAtA, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		dAtA = encodeVarintPopulateTensorSlice(dAtA, uint64(v3))
	case 1:
		dAtA = encodeVarintPopulateTensorSlice(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateTensorSlice(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateTensorSlice(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateTensorSlice(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateTensorSlice(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *TensorSliceProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Extent) > 0 {
		for _, e := range m.Extent {
			l = e.Size()
			n += 1 + l + sovTensorSlice(uint64(l))
		}
	}
	return n
}

func (m *TensorSliceProto_Extent) Size() (n int) {
	var l int
	_ = l
	if m.Start != 0 {
		n += 1 + sovTensorSlice(uint64(m.Start))
	}
	if m.HasLength != nil {
		n += m.HasLength.Size()
	}
	return n
}

func (m *TensorSliceProto_Extent_Length) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTensorSlice(uint64(m.Length))
	return n
}

func sovTensorSlice(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTensorSlice(x uint64) (n int) {
	return sovTensorSlice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TensorSliceProto) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TensorSliceProto{`,
		`Extent:` + strings.Replace(fmt.Sprintf("%v", this.Extent), "TensorSliceProto_Extent", "TensorSliceProto_Extent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TensorSliceProto_Extent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TensorSliceProto_Extent{`,
		`Start:` + fmt.Sprintf("%v", this.Start) + `,`,
		`HasLength:` + fmt.Sprintf("%v", this.HasLength) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TensorSliceProto_Extent_Length) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TensorSliceProto_Extent_Length{`,
		`Length:` + fmt.Sprintf("%v", this.Length) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTensorSlice(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TensorSliceProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTensorSlice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TensorSliceProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TensorSliceProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensorSlice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTensorSlice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extent = append(m.Extent, &TensorSliceProto_Extent{})
			if err := m.Extent[len(m.Extent)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTensorSlice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTensorSlice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TensorSliceProto_Extent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTensorSlice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Extent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Extent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensorSlice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensorSlice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasLength = &TensorSliceProto_Extent_Length{v}
		default:
			iNdEx = preIndex
			skippy, err := skipTensorSlice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTensorSlice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTensorSlice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTensorSlice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTensorSlice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTensorSlice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTensorSlice
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTensorSlice
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTensorSlice(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTensorSlice = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTensorSlice   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("tensor_slice.proto", fileDescriptor_tensor_slice_623a80b9ba65792c) }

var fileDescriptor_tensor_slice_623a80b9ba65792c = []byte{
	// 248 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x49, 0xcd, 0x2b,
	0xce, 0x2f, 0x8a, 0x2f, 0xce, 0xc9, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0x4c, 0x2b, 0x4a, 0xcc, 0x4d, 0x2d, 0xcf, 0x2f, 0xca, 0x96, 0x52, 0x4a, 0xcf, 0x4f, 0xcf, 0xd7,
	0x07, 0x0b, 0x27, 0x95, 0xa6, 0xe9, 0x83, 0x78, 0x60, 0x0e, 0x98, 0x05, 0x51, 0xae, 0x34, 0x8d,
	0x91, 0x4b, 0x20, 0x04, 0x6c, 0x4a, 0x30, 0xc8, 0x90, 0x00, 0xb0, 0x19, 0x56, 0x5c, 0x6c, 0xa9,
	0x15, 0x25, 0xa9, 0x79, 0x25, 0x12, 0x8c, 0x0a, 0xcc, 0x1a, 0xdc, 0x46, 0x4a, 0x7a, 0x70, 0x43,
	0xf5, 0xd0, 0x15, 0xeb, 0xb9, 0x82, 0x55, 0x06, 0x41, 0x75, 0x48, 0xb9, 0x71, 0xb1, 0x41, 0x44,
	0x84, 0x44, 0xb8, 0x58, 0x8b, 0x4b, 0x12, 0x8b, 0x40, 0x86, 0x30, 0x6a, 0x30, 0x07, 0x41, 0x38,
	0x42, 0x12, 0x5c, 0x6c, 0x39, 0xa9, 0x79, 0xe9, 0x25, 0x19, 0x12, 0x4c, 0x20, 0x61, 0x0f, 0x86,
	0x20, 0x28, 0xdf, 0x89, 0x87, 0x8b, 0x2b, 0x23, 0xb1, 0x38, 0x1e, 0xca, 0x8b, 0xbb, 0xf1, 0x50,
	0x8e, 0xe1, 0xc1, 0x43, 0x39, 0xc6, 0x0f, 0x0f, 0xe5, 0x18, 0x7f, 0x3c, 0x94, 0x63, 0x6c, 0x78,
	0x24, 0xc7, 0xb8, 0xe2, 0x91, 0x1c, 0xe3, 0x8e, 0x47, 0x72, 0x8c, 0x27, 0x1e, 0xc9, 0x31, 0x5e,
	0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x5c, 0x12, 0xf9, 0x45,
	0xe9, 0x7a, 0x90, 0xd0, 0x48, 0xcb, 0xc9, 0x2f, 0x47, 0xb8, 0xd7, 0x49, 0x10, 0xdd, 0xc1, 0xc5,
	0x01, 0x8c, 0x3f, 0x18, 0x19, 0x93, 0xd8, 0xc0, 0xfe, 0x37, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff,
	0x43, 0xba, 0xc6, 0x5f, 0x44, 0x01, 0x00, 0x00,
}

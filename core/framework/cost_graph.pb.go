// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cost_graph.proto

package tensorflow

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CostGraphDef struct {
	Node                 []*CostGraphDef_Node `protobuf:"bytes,1,rep,name=node,proto3" json:"node,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CostGraphDef) Reset()         { *m = CostGraphDef{} }
func (m *CostGraphDef) String() string { return proto.CompactTextString(m) }
func (*CostGraphDef) ProtoMessage()    {}
func (*CostGraphDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_7bd4225bb83921c8, []int{0}
}

func (m *CostGraphDef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CostGraphDef.Unmarshal(m, b)
}
func (m *CostGraphDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CostGraphDef.Marshal(b, m, deterministic)
}
func (m *CostGraphDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CostGraphDef.Merge(m, src)
}
func (m *CostGraphDef) XXX_Size() int {
	return xxx_messageInfo_CostGraphDef.Size(m)
}
func (m *CostGraphDef) XXX_DiscardUnknown() {
	xxx_messageInfo_CostGraphDef.DiscardUnknown(m)
}

var xxx_messageInfo_CostGraphDef proto.InternalMessageInfo

func (m *CostGraphDef) GetNode() []*CostGraphDef_Node {
	if m != nil {
		return m.Node
	}
	return nil
}

type CostGraphDef_Node struct {
	// The name of the node. Names are globally unique.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The device of the node. Can be empty if the node is mapped to the
	// default partition or partitioning hasn't been run yet.
	Device string `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
	// The id of the node. Node ids are only unique inside a partition.
	Id         int32                           `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	InputInfo  []*CostGraphDef_Node_InputInfo  `protobuf:"bytes,4,rep,name=input_info,json=inputInfo,proto3" json:"input_info,omitempty"`
	OutputInfo []*CostGraphDef_Node_OutputInfo `protobuf:"bytes,5,rep,name=output_info,json=outputInfo,proto3" json:"output_info,omitempty"`
	// Temporary memory used by this node.
	TemporaryMemorySize int64 `protobuf:"varint,6,opt,name=temporary_memory_size,json=temporaryMemorySize,proto3" json:"temporary_memory_size,omitempty"`
	// Persistent memory used by this node.
	PersistentMemorySize       int64 `protobuf:"varint,12,opt,name=persistent_memory_size,json=persistentMemorySize,proto3" json:"persistent_memory_size,omitempty"`
	HostTempMemorySize         int64 `protobuf:"varint,10,opt,name=host_temp_memory_size,json=hostTempMemorySize,proto3" json:"host_temp_memory_size,omitempty"`                         // Deprecated: Do not use.
	DeviceTempMemorySize       int64 `protobuf:"varint,11,opt,name=device_temp_memory_size,json=deviceTempMemorySize,proto3" json:"device_temp_memory_size,omitempty"`                   // Deprecated: Do not use.
	DevicePersistentMemorySize int64 `protobuf:"varint,16,opt,name=device_persistent_memory_size,json=devicePersistentMemorySize,proto3" json:"device_persistent_memory_size,omitempty"` // Deprecated: Do not use.
	// Estimate of the computational cost of this node, in microseconds.
	ComputeCost int64 `protobuf:"varint,9,opt,name=compute_cost,json=computeCost,proto3" json:"compute_cost,omitempty"`
	// Analytical estimate of the computational cost of this node, in
	// microseconds.
	ComputeTime int64 `protobuf:"varint,14,opt,name=compute_time,json=computeTime,proto3" json:"compute_time,omitempty"`
	// Analytical estimate of the memory access cost of this node, in
	// microseconds.
	MemoryTime int64 `protobuf:"varint,15,opt,name=memory_time,json=memoryTime,proto3" json:"memory_time,omitempty"`
	// If true, the output is permanent: it can't be discarded, because this
	// node is part of the "final output". Nodes may depend on final nodes.
	IsFinal bool `protobuf:"varint,7,opt,name=is_final,json=isFinal,proto3" json:"is_final,omitempty"`
	// Ids of the control inputs for this node.
	ControlInput []int32 `protobuf:"varint,8,rep,packed,name=control_input,json=controlInput,proto3" json:"control_input,omitempty"`
	// Are the costs inaccurate?
	Inaccurate           bool     `protobuf:"varint,17,opt,name=inaccurate,proto3" json:"inaccurate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CostGraphDef_Node) Reset()         { *m = CostGraphDef_Node{} }
func (m *CostGraphDef_Node) String() string { return proto.CompactTextString(m) }
func (*CostGraphDef_Node) ProtoMessage()    {}
func (*CostGraphDef_Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_7bd4225bb83921c8, []int{0, 0}
}

func (m *CostGraphDef_Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CostGraphDef_Node.Unmarshal(m, b)
}
func (m *CostGraphDef_Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CostGraphDef_Node.Marshal(b, m, deterministic)
}
func (m *CostGraphDef_Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CostGraphDef_Node.Merge(m, src)
}
func (m *CostGraphDef_Node) XXX_Size() int {
	return xxx_messageInfo_CostGraphDef_Node.Size(m)
}
func (m *CostGraphDef_Node) XXX_DiscardUnknown() {
	xxx_messageInfo_CostGraphDef_Node.DiscardUnknown(m)
}

var xxx_messageInfo_CostGraphDef_Node proto.InternalMessageInfo

func (m *CostGraphDef_Node) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CostGraphDef_Node) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *CostGraphDef_Node) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CostGraphDef_Node) GetInputInfo() []*CostGraphDef_Node_InputInfo {
	if m != nil {
		return m.InputInfo
	}
	return nil
}

func (m *CostGraphDef_Node) GetOutputInfo() []*CostGraphDef_Node_OutputInfo {
	if m != nil {
		return m.OutputInfo
	}
	return nil
}

func (m *CostGraphDef_Node) GetTemporaryMemorySize() int64 {
	if m != nil {
		return m.TemporaryMemorySize
	}
	return 0
}

func (m *CostGraphDef_Node) GetPersistentMemorySize() int64 {
	if m != nil {
		return m.PersistentMemorySize
	}
	return 0
}

// Deprecated: Do not use.
func (m *CostGraphDef_Node) GetHostTempMemorySize() int64 {
	if m != nil {
		return m.HostTempMemorySize
	}
	return 0
}

// Deprecated: Do not use.
func (m *CostGraphDef_Node) GetDeviceTempMemorySize() int64 {
	if m != nil {
		return m.DeviceTempMemorySize
	}
	return 0
}

// Deprecated: Do not use.
func (m *CostGraphDef_Node) GetDevicePersistentMemorySize() int64 {
	if m != nil {
		return m.DevicePersistentMemorySize
	}
	return 0
}

func (m *CostGraphDef_Node) GetComputeCost() int64 {
	if m != nil {
		return m.ComputeCost
	}
	return 0
}

func (m *CostGraphDef_Node) GetComputeTime() int64 {
	if m != nil {
		return m.ComputeTime
	}
	return 0
}

func (m *CostGraphDef_Node) GetMemoryTime() int64 {
	if m != nil {
		return m.MemoryTime
	}
	return 0
}

func (m *CostGraphDef_Node) GetIsFinal() bool {
	if m != nil {
		return m.IsFinal
	}
	return false
}

func (m *CostGraphDef_Node) GetControlInput() []int32 {
	if m != nil {
		return m.ControlInput
	}
	return nil
}

func (m *CostGraphDef_Node) GetInaccurate() bool {
	if m != nil {
		return m.Inaccurate
	}
	return false
}

// Inputs of this node. They must be executed before this node can be
// executed. An input is a particular output of another node, specified
// by the node id and the output index.
type CostGraphDef_Node_InputInfo struct {
	PrecedingNode        int32    `protobuf:"varint,1,opt,name=preceding_node,json=precedingNode,proto3" json:"preceding_node,omitempty"`
	PrecedingPort        int32    `protobuf:"varint,2,opt,name=preceding_port,json=precedingPort,proto3" json:"preceding_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CostGraphDef_Node_InputInfo) Reset()         { *m = CostGraphDef_Node_InputInfo{} }
func (m *CostGraphDef_Node_InputInfo) String() string { return proto.CompactTextString(m) }
func (*CostGraphDef_Node_InputInfo) ProtoMessage()    {}
func (*CostGraphDef_Node_InputInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7bd4225bb83921c8, []int{0, 0, 0}
}

func (m *CostGraphDef_Node_InputInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CostGraphDef_Node_InputInfo.Unmarshal(m, b)
}
func (m *CostGraphDef_Node_InputInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CostGraphDef_Node_InputInfo.Marshal(b, m, deterministic)
}
func (m *CostGraphDef_Node_InputInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CostGraphDef_Node_InputInfo.Merge(m, src)
}
func (m *CostGraphDef_Node_InputInfo) XXX_Size() int {
	return xxx_messageInfo_CostGraphDef_Node_InputInfo.Size(m)
}
func (m *CostGraphDef_Node_InputInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CostGraphDef_Node_InputInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CostGraphDef_Node_InputInfo proto.InternalMessageInfo

func (m *CostGraphDef_Node_InputInfo) GetPrecedingNode() int32 {
	if m != nil {
		return m.PrecedingNode
	}
	return 0
}

func (m *CostGraphDef_Node_InputInfo) GetPrecedingPort() int32 {
	if m != nil {
		return m.PrecedingPort
	}
	return 0
}

// Outputs of this node.
type CostGraphDef_Node_OutputInfo struct {
	Size int64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	// If >= 0, the output is an alias of an input. Note that an alias input
	// may itself be an alias. The algorithm will therefore need to follow
	// those pointers.
	AliasInputPort       int64             `protobuf:"varint,2,opt,name=alias_input_port,json=aliasInputPort,proto3" json:"alias_input_port,omitempty"`
	Shape                *TensorShapeProto `protobuf:"bytes,3,opt,name=shape,proto3" json:"shape,omitempty"`
	Dtype                DataType          `protobuf:"varint,4,opt,name=dtype,proto3,enum=tensorflow.DataType" json:"dtype,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CostGraphDef_Node_OutputInfo) Reset()         { *m = CostGraphDef_Node_OutputInfo{} }
func (m *CostGraphDef_Node_OutputInfo) String() string { return proto.CompactTextString(m) }
func (*CostGraphDef_Node_OutputInfo) ProtoMessage()    {}
func (*CostGraphDef_Node_OutputInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7bd4225bb83921c8, []int{0, 0, 1}
}

func (m *CostGraphDef_Node_OutputInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CostGraphDef_Node_OutputInfo.Unmarshal(m, b)
}
func (m *CostGraphDef_Node_OutputInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CostGraphDef_Node_OutputInfo.Marshal(b, m, deterministic)
}
func (m *CostGraphDef_Node_OutputInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CostGraphDef_Node_OutputInfo.Merge(m, src)
}
func (m *CostGraphDef_Node_OutputInfo) XXX_Size() int {
	return xxx_messageInfo_CostGraphDef_Node_OutputInfo.Size(m)
}
func (m *CostGraphDef_Node_OutputInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CostGraphDef_Node_OutputInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CostGraphDef_Node_OutputInfo proto.InternalMessageInfo

func (m *CostGraphDef_Node_OutputInfo) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *CostGraphDef_Node_OutputInfo) GetAliasInputPort() int64 {
	if m != nil {
		return m.AliasInputPort
	}
	return 0
}

func (m *CostGraphDef_Node_OutputInfo) GetShape() *TensorShapeProto {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *CostGraphDef_Node_OutputInfo) GetDtype() DataType {
	if m != nil {
		return m.Dtype
	}
	return DataType_DT_INVALID
}

func init() {
	proto.RegisterType((*CostGraphDef)(nil), "tensorflow.CostGraphDef")
	proto.RegisterType((*CostGraphDef_Node)(nil), "tensorflow.CostGraphDef.Node")
	proto.RegisterType((*CostGraphDef_Node_InputInfo)(nil), "tensorflow.CostGraphDef.Node.InputInfo")
	proto.RegisterType((*CostGraphDef_Node_OutputInfo)(nil), "tensorflow.CostGraphDef.Node.OutputInfo")
}

func init() { proto.RegisterFile("cost_graph.proto", fileDescriptor_7bd4225bb83921c8) }

var fileDescriptor_7bd4225bb83921c8 = []byte{
	// 590 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0xcd, 0x72, 0xd3, 0x3c,
	0x14, 0x1d, 0xe5, 0xa7, 0x4d, 0xae, 0xd3, 0xb4, 0x9f, 0xbe, 0xb6, 0x88, 0x0c, 0x85, 0x00, 0xc3,
	0xe0, 0x61, 0x91, 0x81, 0x00, 0x0b, 0xb6, 0xa5, 0x94, 0xe9, 0x02, 0xc8, 0xb8, 0xd9, 0xb0, 0xf2,
	0x08, 0x5b, 0x6e, 0x35, 0xc4, 0x96, 0x46, 0x52, 0xe8, 0xa4, 0xaf, 0xc0, 0x9b, 0xf0, 0x22, 0xbc,
	0x12, 0x4b, 0x46, 0xd7, 0xc6, 0x71, 0xf8, 0xe9, 0xee, 0xea, 0xde, 0x73, 0x8e, 0x7e, 0x7c, 0x8e,
	0x61, 0x2f, 0x51, 0xd6, 0xc5, 0x17, 0x86, 0xeb, 0xcb, 0x89, 0x36, 0xca, 0x29, 0x0a, 0x4e, 0x14,
	0x56, 0x99, 0x6c, 0xa1, 0xae, 0x46, 0xb4, 0xac, 0x63, 0x7b, 0xc9, 0xb5, 0x28, 0xe7, 0xa3, 0xc0,
	0xad, 0xb4, 0xb0, 0xe5, 0xe2, 0xc1, 0xd7, 0x1e, 0x0c, 0x5e, 0x2b, 0xeb, 0xde, 0x7a, 0x81, 0x13,
	0x91, 0xd1, 0x67, 0xd0, 0x29, 0x54, 0x2a, 0x18, 0x19, 0xb7, 0xc3, 0x60, 0x7a, 0x34, 0x59, 0x8b,
	0x4d, 0x9a, 0xb8, 0xc9, 0x7b, 0x95, 0x8a, 0x08, 0xa1, 0xa3, 0xef, 0xdb, 0xd0, 0xf1, 0x4b, 0x4a,
	0xa1, 0x53, 0xf0, 0xdc, 0x73, 0x49, 0xd8, 0x8f, 0xb0, 0xa6, 0x87, 0xb0, 0x95, 0x8a, 0x2f, 0x32,
	0x11, 0xac, 0x85, 0xdd, 0x6a, 0x45, 0x87, 0xd0, 0x92, 0x29, 0x6b, 0x8f, 0x49, 0xd8, 0x8d, 0x5a,
	0x32, 0xa5, 0xa7, 0x00, 0xb2, 0xd0, 0x4b, 0x17, 0xcb, 0x22, 0x53, 0xac, 0x83, 0xbb, 0x3f, 0xbe,
	0x71, 0xf7, 0xc9, 0x99, 0xc7, 0x9f, 0x15, 0x99, 0x8a, 0xfa, 0xf2, 0x57, 0x49, 0xcf, 0x20, 0x50,
	0x4b, 0x57, 0x0b, 0x75, 0x51, 0x28, 0xbc, 0x59, 0xe8, 0x03, 0x12, 0x50, 0x09, 0x54, 0x5d, 0xd3,
	0x29, 0x1c, 0x38, 0x91, 0x6b, 0x65, 0xb8, 0x59, 0xc5, 0xb9, 0xc8, 0x95, 0x59, 0xc5, 0x56, 0x5e,
	0x0b, 0xb6, 0x35, 0x26, 0x61, 0x3b, 0xfa, 0xbf, 0x1e, 0xbe, 0xc3, 0xd9, 0xb9, 0xbc, 0x16, 0xf4,
	0x05, 0x1c, 0x6a, 0x61, 0xac, 0xb4, 0x4e, 0x14, 0x6e, 0x83, 0x34, 0x40, 0xd2, 0xfe, 0x7a, 0xda,
	0x60, 0xbd, 0x84, 0x83, 0x4b, 0xff, 0x19, 0xbd, 0xe2, 0x06, 0x09, 0x3c, 0xe9, 0xb8, 0xc5, 0x48,
	0x44, 0x3d, 0x60, 0x2e, 0x72, 0xdd, 0xa0, 0xbd, 0x82, 0x5b, 0xe5, 0x6b, 0xfe, 0x49, 0x0c, 0x6a,
	0xe2, 0x7e, 0x09, 0xf9, 0x8d, 0xfa, 0x06, 0x8e, 0x2a, 0xea, 0x3f, 0x8e, 0xbb, 0x57, 0x0b, 0x8c,
	0x4a, 0xe0, 0xec, 0x6f, 0x07, 0xbf, 0x0f, 0x83, 0x44, 0xe5, 0x7a, 0xe9, 0x44, 0xec, 0x7d, 0xc8,
	0xfa, 0x78, 0xc9, 0xa0, 0xea, 0xf9, 0x97, 0x6e, 0x42, 0x9c, 0xcc, 0x05, 0x1b, 0x6e, 0x40, 0xe6,
	0x32, 0x17, 0xf4, 0x1e, 0x04, 0xd5, 0xd6, 0x88, 0xd8, 0x45, 0x04, 0x94, 0x2d, 0x04, 0xdc, 0x86,
	0x9e, 0xb4, 0x71, 0x26, 0x0b, 0xbe, 0x60, 0xdb, 0x63, 0x12, 0xf6, 0xa2, 0x6d, 0x69, 0x4f, 0xfd,
	0x92, 0x3e, 0x84, 0x9d, 0x44, 0x15, 0xce, 0xa8, 0x45, 0x8c, 0x26, 0x60, 0xbd, 0x71, 0x3b, 0xec,
	0x46, 0x83, 0xaa, 0x89, 0x1e, 0xa1, 0x77, 0xbd, 0xb9, 0x78, 0x92, 0x2c, 0x0d, 0x77, 0x82, 0xfd,
	0x87, 0x0a, 0x8d, 0xce, 0xe8, 0x23, 0xf4, 0x6b, 0x33, 0xd1, 0x47, 0x30, 0xd4, 0x46, 0x24, 0x22,
	0x95, 0xc5, 0x45, 0x5c, 0x65, 0xc1, 0xbb, 0x74, 0xa7, 0xee, 0xa2, 0xd9, 0x37, 0x60, 0x5a, 0x19,
	0x87, 0x06, 0x6f, 0xc2, 0x66, 0xca, 0xb8, 0xd1, 0x37, 0x02, 0xb0, 0xf6, 0x97, 0x8f, 0x08, 0x3e,
	0x2f, 0xc1, 0x3b, 0x62, 0x4d, 0x43, 0xd8, 0xe3, 0x0b, 0xc9, 0x6d, 0x79, 0x81, 0xb5, 0x56, 0x3b,
	0x1a, 0x62, 0x1f, 0x8f, 0xe6, 0xc5, 0xe8, 0x14, 0xba, 0x98, 0x64, 0xcc, 0x4d, 0x30, 0xbd, 0xd3,
	0xb4, 0xf5, 0x1c, 0xcb, 0x73, 0x3f, 0x9e, 0xf9, 0x68, 0x47, 0x25, 0x94, 0x3e, 0x81, 0x6e, 0xea,
	0x13, 0xcf, 0x3a, 0x63, 0x12, 0x0e, 0xa7, 0xfb, 0x4d, 0xce, 0x09, 0x77, 0x7c, 0xbe, 0xd2, 0x22,
	0x2a, 0x21, 0xc7, 0x4f, 0x81, 0x29, 0x73, 0xd1, 0x44, 0x64, 0x86, 0xe7, 0xe2, 0x4a, 0x99, 0xcf,
	0xc7, 0xbb, 0x75, 0x6e, 0x50, 0xde, 0xce, 0xc8, 0x0f, 0x42, 0x3e, 0x6d, 0xe1, 0x6f, 0xe4, 0xf9,
	0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x85, 0xc3, 0xb4, 0x4f, 0x87, 0x04, 0x00, 0x00,
}

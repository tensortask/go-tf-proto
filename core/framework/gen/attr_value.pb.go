// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: attr_value.proto

package framework

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Protocol buffer representing the value for an attr used to configure an Op.
// Comment indicates the corresponding attr type.  Only the field matching the
// attr type may be filled.
type AttrValue struct {
	// Types that are valid to be assigned to Value:
	//	*AttrValue_S
	//	*AttrValue_I
	//	*AttrValue_F
	//	*AttrValue_B
	//	*AttrValue_Type
	//	*AttrValue_Shape
	//	*AttrValue_Tensor
	//	*AttrValue_List
	//	*AttrValue_Func
	//	*AttrValue_Placeholder
	Value                isAttrValue_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *AttrValue) Reset()      { *m = AttrValue{} }
func (*AttrValue) ProtoMessage() {}
func (*AttrValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_attr_value_4c635426a519f3ed, []int{0}
}
func (m *AttrValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttrValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttrValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AttrValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttrValue.Merge(dst, src)
}
func (m *AttrValue) XXX_Size() int {
	return m.Size()
}
func (m *AttrValue) XXX_DiscardUnknown() {
	xxx_messageInfo_AttrValue.DiscardUnknown(m)
}

var xxx_messageInfo_AttrValue proto.InternalMessageInfo

type isAttrValue_Value interface {
	isAttrValue_Value()
	Equal(interface{}) bool
	VerboseEqual(interface{}) error
	MarshalTo([]byte) (int, error)
	Size() int
}

type AttrValue_S struct {
	S []byte `protobuf:"bytes,2,opt,name=s,proto3,oneof"`
}
type AttrValue_I struct {
	I int64 `protobuf:"varint,3,opt,name=i,proto3,oneof"`
}
type AttrValue_F struct {
	F float32 `protobuf:"fixed32,4,opt,name=f,proto3,oneof"`
}
type AttrValue_B struct {
	B bool `protobuf:"varint,5,opt,name=b,proto3,oneof"`
}
type AttrValue_Type struct {
	Type DataType `protobuf:"varint,6,opt,name=type,proto3,enum=framework.DataType,oneof"`
}
type AttrValue_Shape struct {
	Shape *TensorShapeProto `protobuf:"bytes,7,opt,name=shape,oneof"`
}
type AttrValue_Tensor struct {
	Tensor *TensorProto `protobuf:"bytes,8,opt,name=tensor,oneof"`
}
type AttrValue_List struct {
	List *AttrValue_ListValue `protobuf:"bytes,1,opt,name=list,oneof"`
}
type AttrValue_Func struct {
	Func *NameAttrList `protobuf:"bytes,10,opt,name=func,oneof"`
}
type AttrValue_Placeholder struct {
	Placeholder string `protobuf:"bytes,9,opt,name=placeholder,proto3,oneof"`
}

func (*AttrValue_S) isAttrValue_Value()           {}
func (*AttrValue_I) isAttrValue_Value()           {}
func (*AttrValue_F) isAttrValue_Value()           {}
func (*AttrValue_B) isAttrValue_Value()           {}
func (*AttrValue_Type) isAttrValue_Value()        {}
func (*AttrValue_Shape) isAttrValue_Value()       {}
func (*AttrValue_Tensor) isAttrValue_Value()      {}
func (*AttrValue_List) isAttrValue_Value()        {}
func (*AttrValue_Func) isAttrValue_Value()        {}
func (*AttrValue_Placeholder) isAttrValue_Value() {}

func (m *AttrValue) GetValue() isAttrValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *AttrValue) GetS() []byte {
	if x, ok := m.GetValue().(*AttrValue_S); ok {
		return x.S
	}
	return nil
}

func (m *AttrValue) GetI() int64 {
	if x, ok := m.GetValue().(*AttrValue_I); ok {
		return x.I
	}
	return 0
}

func (m *AttrValue) GetF() float32 {
	if x, ok := m.GetValue().(*AttrValue_F); ok {
		return x.F
	}
	return 0
}

func (m *AttrValue) GetB() bool {
	if x, ok := m.GetValue().(*AttrValue_B); ok {
		return x.B
	}
	return false
}

func (m *AttrValue) GetType() DataType {
	if x, ok := m.GetValue().(*AttrValue_Type); ok {
		return x.Type
	}
	return DataType_DT_INVALID
}

func (m *AttrValue) GetShape() *TensorShapeProto {
	if x, ok := m.GetValue().(*AttrValue_Shape); ok {
		return x.Shape
	}
	return nil
}

func (m *AttrValue) GetTensor() *TensorProto {
	if x, ok := m.GetValue().(*AttrValue_Tensor); ok {
		return x.Tensor
	}
	return nil
}

func (m *AttrValue) GetList() *AttrValue_ListValue {
	if x, ok := m.GetValue().(*AttrValue_List); ok {
		return x.List
	}
	return nil
}

func (m *AttrValue) GetFunc() *NameAttrList {
	if x, ok := m.GetValue().(*AttrValue_Func); ok {
		return x.Func
	}
	return nil
}

func (m *AttrValue) GetPlaceholder() string {
	if x, ok := m.GetValue().(*AttrValue_Placeholder); ok {
		return x.Placeholder
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AttrValue) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AttrValue_OneofMarshaler, _AttrValue_OneofUnmarshaler, _AttrValue_OneofSizer, []interface{}{
		(*AttrValue_S)(nil),
		(*AttrValue_I)(nil),
		(*AttrValue_F)(nil),
		(*AttrValue_B)(nil),
		(*AttrValue_Type)(nil),
		(*AttrValue_Shape)(nil),
		(*AttrValue_Tensor)(nil),
		(*AttrValue_List)(nil),
		(*AttrValue_Func)(nil),
		(*AttrValue_Placeholder)(nil),
	}
}

func _AttrValue_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AttrValue)
	// value
	switch x := m.Value.(type) {
	case *AttrValue_S:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.S)
	case *AttrValue_I:
		_ = b.EncodeVarint(3<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.I))
	case *AttrValue_F:
		_ = b.EncodeVarint(4<<3 | proto.WireFixed32)
		_ = b.EncodeFixed32(uint64(math.Float32bits(x.F)))
	case *AttrValue_B:
		t := uint64(0)
		if x.B {
			t = 1
		}
		_ = b.EncodeVarint(5<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *AttrValue_Type:
		_ = b.EncodeVarint(6<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Type))
	case *AttrValue_Shape:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Shape); err != nil {
			return err
		}
	case *AttrValue_Tensor:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tensor); err != nil {
			return err
		}
	case *AttrValue_List:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.List); err != nil {
			return err
		}
	case *AttrValue_Func:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Func); err != nil {
			return err
		}
	case *AttrValue_Placeholder:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Placeholder)
	case nil:
	default:
		return fmt.Errorf("AttrValue.Value has unexpected type %T", x)
	}
	return nil
}

func _AttrValue_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AttrValue)
	switch tag {
	case 2: // value.s
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Value = &AttrValue_S{x}
		return true, err
	case 3: // value.i
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &AttrValue_I{int64(x)}
		return true, err
	case 4: // value.f
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.Value = &AttrValue_F{math.Float32frombits(uint32(x))}
		return true, err
	case 5: // value.b
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &AttrValue_B{x != 0}
		return true, err
	case 6: // value.type
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &AttrValue_Type{DataType(x)}
		return true, err
	case 7: // value.shape
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TensorShapeProto)
		err := b.DecodeMessage(msg)
		m.Value = &AttrValue_Shape{msg}
		return true, err
	case 8: // value.tensor
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TensorProto)
		err := b.DecodeMessage(msg)
		m.Value = &AttrValue_Tensor{msg}
		return true, err
	case 1: // value.list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AttrValue_ListValue)
		err := b.DecodeMessage(msg)
		m.Value = &AttrValue_List{msg}
		return true, err
	case 10: // value.func
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NameAttrList)
		err := b.DecodeMessage(msg)
		m.Value = &AttrValue_Func{msg}
		return true, err
	case 9: // value.placeholder
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &AttrValue_Placeholder{x}
		return true, err
	default:
		return false, nil
	}
}

func _AttrValue_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AttrValue)
	// value
	switch x := m.Value.(type) {
	case *AttrValue_S:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.S)))
		n += len(x.S)
	case *AttrValue_I:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.I))
	case *AttrValue_F:
		n += 1 // tag and wire
		n += 4
	case *AttrValue_B:
		n += 1 // tag and wire
		n += 1
	case *AttrValue_Type:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Type))
	case *AttrValue_Shape:
		s := proto.Size(x.Shape)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AttrValue_Tensor:
		s := proto.Size(x.Tensor)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AttrValue_List:
		s := proto.Size(x.List)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AttrValue_Func:
		s := proto.Size(x.Func)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AttrValue_Placeholder:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Placeholder)))
		n += len(x.Placeholder)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// LINT.IfChange
type AttrValue_ListValue struct {
	S                    [][]byte            `protobuf:"bytes,2,rep,name=s" json:"s,omitempty"`
	I                    []int64             `protobuf:"varint,3,rep,packed,name=i" json:"i,omitempty"`
	F                    []float32           `protobuf:"fixed32,4,rep,packed,name=f" json:"f,omitempty"`
	B                    []bool              `protobuf:"varint,5,rep,packed,name=b" json:"b,omitempty"`
	Type                 []DataType          `protobuf:"varint,6,rep,packed,name=type,enum=framework.DataType" json:"type,omitempty"`
	Shape                []*TensorShapeProto `protobuf:"bytes,7,rep,name=shape" json:"shape,omitempty"`
	Tensor               []*TensorProto      `protobuf:"bytes,8,rep,name=tensor" json:"tensor,omitempty"`
	Func                 []*NameAttrList     `protobuf:"bytes,9,rep,name=func" json:"func,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *AttrValue_ListValue) Reset()      { *m = AttrValue_ListValue{} }
func (*AttrValue_ListValue) ProtoMessage() {}
func (*AttrValue_ListValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_attr_value_4c635426a519f3ed, []int{0, 0}
}
func (m *AttrValue_ListValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttrValue_ListValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttrValue_ListValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AttrValue_ListValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttrValue_ListValue.Merge(dst, src)
}
func (m *AttrValue_ListValue) XXX_Size() int {
	return m.Size()
}
func (m *AttrValue_ListValue) XXX_DiscardUnknown() {
	xxx_messageInfo_AttrValue_ListValue.DiscardUnknown(m)
}

var xxx_messageInfo_AttrValue_ListValue proto.InternalMessageInfo

func (m *AttrValue_ListValue) GetS() [][]byte {
	if m != nil {
		return m.S
	}
	return nil
}

func (m *AttrValue_ListValue) GetI() []int64 {
	if m != nil {
		return m.I
	}
	return nil
}

func (m *AttrValue_ListValue) GetF() []float32 {
	if m != nil {
		return m.F
	}
	return nil
}

func (m *AttrValue_ListValue) GetB() []bool {
	if m != nil {
		return m.B
	}
	return nil
}

func (m *AttrValue_ListValue) GetType() []DataType {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *AttrValue_ListValue) GetShape() []*TensorShapeProto {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *AttrValue_ListValue) GetTensor() []*TensorProto {
	if m != nil {
		return m.Tensor
	}
	return nil
}

func (m *AttrValue_ListValue) GetFunc() []*NameAttrList {
	if m != nil {
		return m.Func
	}
	return nil
}

// A list of attr names and their values. The whole list is attached
// with a string name.  E.g., MatMul[T=float].
type NameAttrList struct {
	Name                 string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Attr                 map[string]*AttrValue `protobuf:"bytes,2,rep,name=attr" json:"attr,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *NameAttrList) Reset()      { *m = NameAttrList{} }
func (*NameAttrList) ProtoMessage() {}
func (*NameAttrList) Descriptor() ([]byte, []int) {
	return fileDescriptor_attr_value_4c635426a519f3ed, []int{1}
}
func (m *NameAttrList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NameAttrList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NameAttrList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *NameAttrList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameAttrList.Merge(dst, src)
}
func (m *NameAttrList) XXX_Size() int {
	return m.Size()
}
func (m *NameAttrList) XXX_DiscardUnknown() {
	xxx_messageInfo_NameAttrList.DiscardUnknown(m)
}

var xxx_messageInfo_NameAttrList proto.InternalMessageInfo

func (m *NameAttrList) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NameAttrList) GetAttr() map[string]*AttrValue {
	if m != nil {
		return m.Attr
	}
	return nil
}

func init() {
	proto.RegisterType((*AttrValue)(nil), "framework.AttrValue")
	proto.RegisterType((*AttrValue_ListValue)(nil), "framework.AttrValue.ListValue")
	proto.RegisterType((*NameAttrList)(nil), "framework.NameAttrList")
	proto.RegisterMapType((map[string]*AttrValue)(nil), "framework.NameAttrList.AttrEntry")
}
func (this *AttrValue) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AttrValue)
	if !ok {
		that2, ok := that.(AttrValue)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AttrValue")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AttrValue but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AttrValue but is not nil && this == nil")
	}
	if that1.Value == nil {
		if this.Value != nil {
			return fmt.Errorf("this.Value != nil && that1.Value == nil")
		}
	} else if this.Value == nil {
		return fmt.Errorf("this.Value == nil && that1.Value != nil")
	} else if err := this.Value.VerboseEqual(that1.Value); err != nil {
		return err
	}
	return nil
}
func (this *AttrValue_S) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AttrValue_S)
	if !ok {
		that2, ok := that.(AttrValue_S)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AttrValue_S")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AttrValue_S but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AttrValue_S but is not nil && this == nil")
	}
	if !bytes.Equal(this.S, that1.S) {
		return fmt.Errorf("S this(%v) Not Equal that(%v)", this.S, that1.S)
	}
	return nil
}
func (this *AttrValue_I) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AttrValue_I)
	if !ok {
		that2, ok := that.(AttrValue_I)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AttrValue_I")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AttrValue_I but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AttrValue_I but is not nil && this == nil")
	}
	if this.I != that1.I {
		return fmt.Errorf("I this(%v) Not Equal that(%v)", this.I, that1.I)
	}
	return nil
}
func (this *AttrValue_F) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AttrValue_F)
	if !ok {
		that2, ok := that.(AttrValue_F)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AttrValue_F")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AttrValue_F but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AttrValue_F but is not nil && this == nil")
	}
	if this.F != that1.F {
		return fmt.Errorf("F this(%v) Not Equal that(%v)", this.F, that1.F)
	}
	return nil
}
func (this *AttrValue_B) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AttrValue_B)
	if !ok {
		that2, ok := that.(AttrValue_B)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AttrValue_B")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AttrValue_B but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AttrValue_B but is not nil && this == nil")
	}
	if this.B != that1.B {
		return fmt.Errorf("B this(%v) Not Equal that(%v)", this.B, that1.B)
	}
	return nil
}
func (this *AttrValue_Type) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AttrValue_Type)
	if !ok {
		that2, ok := that.(AttrValue_Type)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AttrValue_Type")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AttrValue_Type but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AttrValue_Type but is not nil && this == nil")
	}
	if this.Type != that1.Type {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	return nil
}
func (this *AttrValue_Shape) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AttrValue_Shape)
	if !ok {
		that2, ok := that.(AttrValue_Shape)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AttrValue_Shape")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AttrValue_Shape but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AttrValue_Shape but is not nil && this == nil")
	}
	if !this.Shape.Equal(that1.Shape) {
		return fmt.Errorf("Shape this(%v) Not Equal that(%v)", this.Shape, that1.Shape)
	}
	return nil
}
func (this *AttrValue_Tensor) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AttrValue_Tensor)
	if !ok {
		that2, ok := that.(AttrValue_Tensor)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AttrValue_Tensor")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AttrValue_Tensor but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AttrValue_Tensor but is not nil && this == nil")
	}
	if !this.Tensor.Equal(that1.Tensor) {
		return fmt.Errorf("Tensor this(%v) Not Equal that(%v)", this.Tensor, that1.Tensor)
	}
	return nil
}
func (this *AttrValue_List) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AttrValue_List)
	if !ok {
		that2, ok := that.(AttrValue_List)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AttrValue_List")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AttrValue_List but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AttrValue_List but is not nil && this == nil")
	}
	if !this.List.Equal(that1.List) {
		return fmt.Errorf("List this(%v) Not Equal that(%v)", this.List, that1.List)
	}
	return nil
}
func (this *AttrValue_Func) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AttrValue_Func)
	if !ok {
		that2, ok := that.(AttrValue_Func)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AttrValue_Func")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AttrValue_Func but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AttrValue_Func but is not nil && this == nil")
	}
	if !this.Func.Equal(that1.Func) {
		return fmt.Errorf("Func this(%v) Not Equal that(%v)", this.Func, that1.Func)
	}
	return nil
}
func (this *AttrValue_Placeholder) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AttrValue_Placeholder)
	if !ok {
		that2, ok := that.(AttrValue_Placeholder)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AttrValue_Placeholder")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AttrValue_Placeholder but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AttrValue_Placeholder but is not nil && this == nil")
	}
	if this.Placeholder != that1.Placeholder {
		return fmt.Errorf("Placeholder this(%v) Not Equal that(%v)", this.Placeholder, that1.Placeholder)
	}
	return nil
}
func (this *AttrValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AttrValue)
	if !ok {
		that2, ok := that.(AttrValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Value == nil {
		if this.Value != nil {
			return false
		}
	} else if this.Value == nil {
		return false
	} else if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *AttrValue_S) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AttrValue_S)
	if !ok {
		that2, ok := that.(AttrValue_S)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.S, that1.S) {
		return false
	}
	return true
}
func (this *AttrValue_I) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AttrValue_I)
	if !ok {
		that2, ok := that.(AttrValue_I)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.I != that1.I {
		return false
	}
	return true
}
func (this *AttrValue_F) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AttrValue_F)
	if !ok {
		that2, ok := that.(AttrValue_F)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.F != that1.F {
		return false
	}
	return true
}
func (this *AttrValue_B) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AttrValue_B)
	if !ok {
		that2, ok := that.(AttrValue_B)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.B != that1.B {
		return false
	}
	return true
}
func (this *AttrValue_Type) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AttrValue_Type)
	if !ok {
		that2, ok := that.(AttrValue_Type)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *AttrValue_Shape) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AttrValue_Shape)
	if !ok {
		that2, ok := that.(AttrValue_Shape)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Shape.Equal(that1.Shape) {
		return false
	}
	return true
}
func (this *AttrValue_Tensor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AttrValue_Tensor)
	if !ok {
		that2, ok := that.(AttrValue_Tensor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Tensor.Equal(that1.Tensor) {
		return false
	}
	return true
}
func (this *AttrValue_List) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AttrValue_List)
	if !ok {
		that2, ok := that.(AttrValue_List)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.List.Equal(that1.List) {
		return false
	}
	return true
}
func (this *AttrValue_Func) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AttrValue_Func)
	if !ok {
		that2, ok := that.(AttrValue_Func)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Func.Equal(that1.Func) {
		return false
	}
	return true
}
func (this *AttrValue_Placeholder) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AttrValue_Placeholder)
	if !ok {
		that2, ok := that.(AttrValue_Placeholder)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Placeholder != that1.Placeholder {
		return false
	}
	return true
}
func (this *AttrValue_ListValue) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AttrValue_ListValue)
	if !ok {
		that2, ok := that.(AttrValue_ListValue)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AttrValue_ListValue")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AttrValue_ListValue but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AttrValue_ListValue but is not nil && this == nil")
	}
	if len(this.S) != len(that1.S) {
		return fmt.Errorf("S this(%v) Not Equal that(%v)", len(this.S), len(that1.S))
	}
	for i := range this.S {
		if !bytes.Equal(this.S[i], that1.S[i]) {
			return fmt.Errorf("S this[%v](%v) Not Equal that[%v](%v)", i, this.S[i], i, that1.S[i])
		}
	}
	if len(this.I) != len(that1.I) {
		return fmt.Errorf("I this(%v) Not Equal that(%v)", len(this.I), len(that1.I))
	}
	for i := range this.I {
		if this.I[i] != that1.I[i] {
			return fmt.Errorf("I this[%v](%v) Not Equal that[%v](%v)", i, this.I[i], i, that1.I[i])
		}
	}
	if len(this.F) != len(that1.F) {
		return fmt.Errorf("F this(%v) Not Equal that(%v)", len(this.F), len(that1.F))
	}
	for i := range this.F {
		if this.F[i] != that1.F[i] {
			return fmt.Errorf("F this[%v](%v) Not Equal that[%v](%v)", i, this.F[i], i, that1.F[i])
		}
	}
	if len(this.B) != len(that1.B) {
		return fmt.Errorf("B this(%v) Not Equal that(%v)", len(this.B), len(that1.B))
	}
	for i := range this.B {
		if this.B[i] != that1.B[i] {
			return fmt.Errorf("B this[%v](%v) Not Equal that[%v](%v)", i, this.B[i], i, that1.B[i])
		}
	}
	if len(this.Type) != len(that1.Type) {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", len(this.Type), len(that1.Type))
	}
	for i := range this.Type {
		if this.Type[i] != that1.Type[i] {
			return fmt.Errorf("Type this[%v](%v) Not Equal that[%v](%v)", i, this.Type[i], i, that1.Type[i])
		}
	}
	if len(this.Shape) != len(that1.Shape) {
		return fmt.Errorf("Shape this(%v) Not Equal that(%v)", len(this.Shape), len(that1.Shape))
	}
	for i := range this.Shape {
		if !this.Shape[i].Equal(that1.Shape[i]) {
			return fmt.Errorf("Shape this[%v](%v) Not Equal that[%v](%v)", i, this.Shape[i], i, that1.Shape[i])
		}
	}
	if len(this.Tensor) != len(that1.Tensor) {
		return fmt.Errorf("Tensor this(%v) Not Equal that(%v)", len(this.Tensor), len(that1.Tensor))
	}
	for i := range this.Tensor {
		if !this.Tensor[i].Equal(that1.Tensor[i]) {
			return fmt.Errorf("Tensor this[%v](%v) Not Equal that[%v](%v)", i, this.Tensor[i], i, that1.Tensor[i])
		}
	}
	if len(this.Func) != len(that1.Func) {
		return fmt.Errorf("Func this(%v) Not Equal that(%v)", len(this.Func), len(that1.Func))
	}
	for i := range this.Func {
		if !this.Func[i].Equal(that1.Func[i]) {
			return fmt.Errorf("Func this[%v](%v) Not Equal that[%v](%v)", i, this.Func[i], i, that1.Func[i])
		}
	}
	return nil
}
func (this *AttrValue_ListValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AttrValue_ListValue)
	if !ok {
		that2, ok := that.(AttrValue_ListValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.S) != len(that1.S) {
		return false
	}
	for i := range this.S {
		if !bytes.Equal(this.S[i], that1.S[i]) {
			return false
		}
	}
	if len(this.I) != len(that1.I) {
		return false
	}
	for i := range this.I {
		if this.I[i] != that1.I[i] {
			return false
		}
	}
	if len(this.F) != len(that1.F) {
		return false
	}
	for i := range this.F {
		if this.F[i] != that1.F[i] {
			return false
		}
	}
	if len(this.B) != len(that1.B) {
		return false
	}
	for i := range this.B {
		if this.B[i] != that1.B[i] {
			return false
		}
	}
	if len(this.Type) != len(that1.Type) {
		return false
	}
	for i := range this.Type {
		if this.Type[i] != that1.Type[i] {
			return false
		}
	}
	if len(this.Shape) != len(that1.Shape) {
		return false
	}
	for i := range this.Shape {
		if !this.Shape[i].Equal(that1.Shape[i]) {
			return false
		}
	}
	if len(this.Tensor) != len(that1.Tensor) {
		return false
	}
	for i := range this.Tensor {
		if !this.Tensor[i].Equal(that1.Tensor[i]) {
			return false
		}
	}
	if len(this.Func) != len(that1.Func) {
		return false
	}
	for i := range this.Func {
		if !this.Func[i].Equal(that1.Func[i]) {
			return false
		}
	}
	return true
}
func (this *NameAttrList) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NameAttrList)
	if !ok {
		that2, ok := that.(NameAttrList)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *NameAttrList")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NameAttrList but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NameAttrList but is not nil && this == nil")
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if len(this.Attr) != len(that1.Attr) {
		return fmt.Errorf("Attr this(%v) Not Equal that(%v)", len(this.Attr), len(that1.Attr))
	}
	for i := range this.Attr {
		if !this.Attr[i].Equal(that1.Attr[i]) {
			return fmt.Errorf("Attr this[%v](%v) Not Equal that[%v](%v)", i, this.Attr[i], i, that1.Attr[i])
		}
	}
	return nil
}
func (this *NameAttrList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NameAttrList)
	if !ok {
		that2, ok := that.(NameAttrList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Attr) != len(that1.Attr) {
		return false
	}
	for i := range this.Attr {
		if !this.Attr[i].Equal(that1.Attr[i]) {
			return false
		}
	}
	return true
}
func (this *AttrValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&framework.AttrValue{")
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AttrValue_S) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&framework.AttrValue_S{` +
		`S:` + fmt.Sprintf("%#v", this.S) + `}`}, ", ")
	return s
}
func (this *AttrValue_I) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&framework.AttrValue_I{` +
		`I:` + fmt.Sprintf("%#v", this.I) + `}`}, ", ")
	return s
}
func (this *AttrValue_F) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&framework.AttrValue_F{` +
		`F:` + fmt.Sprintf("%#v", this.F) + `}`}, ", ")
	return s
}
func (this *AttrValue_B) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&framework.AttrValue_B{` +
		`B:` + fmt.Sprintf("%#v", this.B) + `}`}, ", ")
	return s
}
func (this *AttrValue_Type) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&framework.AttrValue_Type{` +
		`Type:` + fmt.Sprintf("%#v", this.Type) + `}`}, ", ")
	return s
}
func (this *AttrValue_Shape) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&framework.AttrValue_Shape{` +
		`Shape:` + fmt.Sprintf("%#v", this.Shape) + `}`}, ", ")
	return s
}
func (this *AttrValue_Tensor) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&framework.AttrValue_Tensor{` +
		`Tensor:` + fmt.Sprintf("%#v", this.Tensor) + `}`}, ", ")
	return s
}
func (this *AttrValue_List) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&framework.AttrValue_List{` +
		`List:` + fmt.Sprintf("%#v", this.List) + `}`}, ", ")
	return s
}
func (this *AttrValue_Func) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&framework.AttrValue_Func{` +
		`Func:` + fmt.Sprintf("%#v", this.Func) + `}`}, ", ")
	return s
}
func (this *AttrValue_Placeholder) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&framework.AttrValue_Placeholder{` +
		`Placeholder:` + fmt.Sprintf("%#v", this.Placeholder) + `}`}, ", ")
	return s
}
func (this *AttrValue_ListValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&framework.AttrValue_ListValue{")
	s = append(s, "S: "+fmt.Sprintf("%#v", this.S)+",\n")
	s = append(s, "I: "+fmt.Sprintf("%#v", this.I)+",\n")
	s = append(s, "F: "+fmt.Sprintf("%#v", this.F)+",\n")
	s = append(s, "B: "+fmt.Sprintf("%#v", this.B)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.Shape != nil {
		s = append(s, "Shape: "+fmt.Sprintf("%#v", this.Shape)+",\n")
	}
	if this.Tensor != nil {
		s = append(s, "Tensor: "+fmt.Sprintf("%#v", this.Tensor)+",\n")
	}
	if this.Func != nil {
		s = append(s, "Func: "+fmt.Sprintf("%#v", this.Func)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NameAttrList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&framework.NameAttrList{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	keysForAttr := make([]string, 0, len(this.Attr))
	for k, _ := range this.Attr {
		keysForAttr = append(keysForAttr, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttr)
	mapStringForAttr := "map[string]*AttrValue{"
	for _, k := range keysForAttr {
		mapStringForAttr += fmt.Sprintf("%#v: %#v,", k, this.Attr[k])
	}
	mapStringForAttr += "}"
	if this.Attr != nil {
		s = append(s, "Attr: "+mapStringForAttr+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAttrValue(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *AttrValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttrValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		nn1, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *AttrValue_List) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.List != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAttrValue(dAtA, i, uint64(m.List.Size()))
		n2, err := m.List.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *AttrValue_S) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.S != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAttrValue(dAtA, i, uint64(len(m.S)))
		i += copy(dAtA[i:], m.S)
	}
	return i, nil
}
func (m *AttrValue_I) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x18
	i++
	i = encodeVarintAttrValue(dAtA, i, uint64(m.I))
	return i, nil
}
func (m *AttrValue_F) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x25
	i++
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.F))))
	i += 4
	return i, nil
}
func (m *AttrValue_B) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x28
	i++
	if m.B {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *AttrValue_Type) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x30
	i++
	i = encodeVarintAttrValue(dAtA, i, uint64(m.Type))
	return i, nil
}
func (m *AttrValue_Shape) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Shape != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAttrValue(dAtA, i, uint64(m.Shape.Size()))
		n3, err := m.Shape.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *AttrValue_Tensor) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Tensor != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintAttrValue(dAtA, i, uint64(m.Tensor.Size()))
		n4, err := m.Tensor.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *AttrValue_Placeholder) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x4a
	i++
	i = encodeVarintAttrValue(dAtA, i, uint64(len(m.Placeholder)))
	i += copy(dAtA[i:], m.Placeholder)
	return i, nil
}
func (m *AttrValue_Func) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Func != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintAttrValue(dAtA, i, uint64(m.Func.Size()))
		n5, err := m.Func.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *AttrValue_ListValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttrValue_ListValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.S) > 0 {
		for _, b := range m.S {
			dAtA[i] = 0x12
			i++
			i = encodeVarintAttrValue(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.I) > 0 {
		dAtA7 := make([]byte, len(m.I)*10)
		var j6 int
		for _, num1 := range m.I {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAttrValue(dAtA, i, uint64(j6))
		i += copy(dAtA[i:], dAtA7[:j6])
	}
	if len(m.F) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAttrValue(dAtA, i, uint64(len(m.F)*4))
		for _, num := range m.F {
			f8 := math.Float32bits(float32(num))
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f8))
			i += 4
		}
	}
	if len(m.B) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAttrValue(dAtA, i, uint64(len(m.B)))
		for _, b := range m.B {
			if b {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	if len(m.Type) > 0 {
		dAtA10 := make([]byte, len(m.Type)*10)
		var j9 int
		for _, num := range m.Type {
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintAttrValue(dAtA, i, uint64(j9))
		i += copy(dAtA[i:], dAtA10[:j9])
	}
	if len(m.Shape) > 0 {
		for _, msg := range m.Shape {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintAttrValue(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Tensor) > 0 {
		for _, msg := range m.Tensor {
			dAtA[i] = 0x42
			i++
			i = encodeVarintAttrValue(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Func) > 0 {
		for _, msg := range m.Func {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintAttrValue(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NameAttrList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NameAttrList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAttrValue(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Attr) > 0 {
		for k, _ := range m.Attr {
			dAtA[i] = 0x12
			i++
			v := m.Attr[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovAttrValue(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovAttrValue(uint64(len(k))) + msgSize
			i = encodeVarintAttrValue(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintAttrValue(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintAttrValue(dAtA, i, uint64(v.Size()))
				n11, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n11
			}
		}
	}
	return i, nil
}

func encodeVarintAttrValue(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedAttrValue(r randyAttrValue, easy bool) *AttrValue {
	this := &AttrValue{}
	oneofNumber_Value := []int32{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}[r.Intn(10)]
	switch oneofNumber_Value {
	case 1:
		this.Value = NewPopulatedAttrValue_List(r, easy)
	case 2:
		this.Value = NewPopulatedAttrValue_S(r, easy)
	case 3:
		this.Value = NewPopulatedAttrValue_I(r, easy)
	case 4:
		this.Value = NewPopulatedAttrValue_F(r, easy)
	case 5:
		this.Value = NewPopulatedAttrValue_B(r, easy)
	case 6:
		this.Value = NewPopulatedAttrValue_Type(r, easy)
	case 7:
		this.Value = NewPopulatedAttrValue_Shape(r, easy)
	case 8:
		this.Value = NewPopulatedAttrValue_Tensor(r, easy)
	case 9:
		this.Value = NewPopulatedAttrValue_Placeholder(r, easy)
	case 10:
		this.Value = NewPopulatedAttrValue_Func(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAttrValue_List(r randyAttrValue, easy bool) *AttrValue_List {
	this := &AttrValue_List{}
	this.List = NewPopulatedAttrValue_ListValue(r, easy)
	return this
}
func NewPopulatedAttrValue_S(r randyAttrValue, easy bool) *AttrValue_S {
	this := &AttrValue_S{}
	v1 := r.Intn(100)
	this.S = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.S[i] = byte(r.Intn(256))
	}
	return this
}
func NewPopulatedAttrValue_I(r randyAttrValue, easy bool) *AttrValue_I {
	this := &AttrValue_I{}
	this.I = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.I *= -1
	}
	return this
}
func NewPopulatedAttrValue_F(r randyAttrValue, easy bool) *AttrValue_F {
	this := &AttrValue_F{}
	this.F = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.F *= -1
	}
	return this
}
func NewPopulatedAttrValue_B(r randyAttrValue, easy bool) *AttrValue_B {
	this := &AttrValue_B{}
	this.B = bool(bool(r.Intn(2) == 0))
	return this
}
func NewPopulatedAttrValue_Type(r randyAttrValue, easy bool) *AttrValue_Type {
	this := &AttrValue_Type{}
	this.Type = DataType([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}[r.Intn(47)])
	return this
}
func NewPopulatedAttrValue_Shape(r randyAttrValue, easy bool) *AttrValue_Shape {
	this := &AttrValue_Shape{}
	this.Shape = NewPopulatedTensorShapeProto(r, easy)
	return this
}
func NewPopulatedAttrValue_Tensor(r randyAttrValue, easy bool) *AttrValue_Tensor {
	this := &AttrValue_Tensor{}
	this.Tensor = NewPopulatedTensorProto(r, easy)
	return this
}
func NewPopulatedAttrValue_Placeholder(r randyAttrValue, easy bool) *AttrValue_Placeholder {
	this := &AttrValue_Placeholder{}
	this.Placeholder = string(randStringAttrValue(r))
	return this
}
func NewPopulatedAttrValue_Func(r randyAttrValue, easy bool) *AttrValue_Func {
	this := &AttrValue_Func{}
	this.Func = NewPopulatedNameAttrList(r, easy)
	return this
}
func NewPopulatedAttrValue_ListValue(r randyAttrValue, easy bool) *AttrValue_ListValue {
	this := &AttrValue_ListValue{}
	v2 := r.Intn(10)
	this.S = make([][]byte, v2)
	for i := 0; i < v2; i++ {
		v3 := r.Intn(100)
		this.S[i] = make([]byte, v3)
		for j := 0; j < v3; j++ {
			this.S[i][j] = byte(r.Intn(256))
		}
	}
	v4 := r.Intn(10)
	this.I = make([]int64, v4)
	for i := 0; i < v4; i++ {
		this.I[i] = int64(r.Int63())
		if r.Intn(2) == 0 {
			this.I[i] *= -1
		}
	}
	v5 := r.Intn(10)
	this.F = make([]float32, v5)
	for i := 0; i < v5; i++ {
		this.F[i] = float32(r.Float32())
		if r.Intn(2) == 0 {
			this.F[i] *= -1
		}
	}
	v6 := r.Intn(10)
	this.B = make([]bool, v6)
	for i := 0; i < v6; i++ {
		this.B[i] = bool(bool(r.Intn(2) == 0))
	}
	v7 := r.Intn(10)
	this.Type = make([]DataType, v7)
	for i := 0; i < v7; i++ {
		this.Type[i] = DataType([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}[r.Intn(47)])
	}
	if r.Intn(10) != 0 {
		v8 := r.Intn(5)
		this.Shape = make([]*TensorShapeProto, v8)
		for i := 0; i < v8; i++ {
			this.Shape[i] = NewPopulatedTensorShapeProto(r, easy)
		}
	}
	if r.Intn(10) == 0 {
		v9 := r.Intn(5)
		this.Tensor = make([]*TensorProto, v9)
		for i := 0; i < v9; i++ {
			this.Tensor[i] = NewPopulatedTensorProto(r, easy)
		}
	}
	if r.Intn(10) == 0 {
		v10 := r.Intn(5)
		this.Func = make([]*NameAttrList, v10)
		for i := 0; i < v10; i++ {
			this.Func[i] = NewPopulatedNameAttrList(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNameAttrList(r randyAttrValue, easy bool) *NameAttrList {
	this := &NameAttrList{}
	this.Name = string(randStringAttrValue(r))
	if r.Intn(10) == 0 {
		v11 := r.Intn(10)
		this.Attr = make(map[string]*AttrValue)
		for i := 0; i < v11; i++ {
			this.Attr[randStringAttrValue(r)] = NewPopulatedAttrValue(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyAttrValue interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneAttrValue(r randyAttrValue) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringAttrValue(r randyAttrValue) string {
	v12 := r.Intn(100)
	tmps := make([]rune, v12)
	for i := 0; i < v12; i++ {
		tmps[i] = randUTF8RuneAttrValue(r)
	}
	return string(tmps)
}
func randUnrecognizedAttrValue(r randyAttrValue, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldAttrValue(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldAttrValue(dAtA []byte, r randyAttrValue, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateAttrValue(dAtA, uint64(key))
		v13 := r.Int63()
		if r.Intn(2) == 0 {
			v13 *= -1
		}
		dAtA = encodeVarintPopulateAttrValue(dAtA, uint64(v13))
	case 1:
		dAtA = encodeVarintPopulateAttrValue(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateAttrValue(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateAttrValue(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateAttrValue(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateAttrValue(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *AttrValue) Size() (n int) {
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *AttrValue_List) Size() (n int) {
	var l int
	_ = l
	if m.List != nil {
		l = m.List.Size()
		n += 1 + l + sovAttrValue(uint64(l))
	}
	return n
}
func (m *AttrValue_S) Size() (n int) {
	var l int
	_ = l
	if m.S != nil {
		l = len(m.S)
		n += 1 + l + sovAttrValue(uint64(l))
	}
	return n
}
func (m *AttrValue_I) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovAttrValue(uint64(m.I))
	return n
}
func (m *AttrValue_F) Size() (n int) {
	var l int
	_ = l
	n += 5
	return n
}
func (m *AttrValue_B) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *AttrValue_Type) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovAttrValue(uint64(m.Type))
	return n
}
func (m *AttrValue_Shape) Size() (n int) {
	var l int
	_ = l
	if m.Shape != nil {
		l = m.Shape.Size()
		n += 1 + l + sovAttrValue(uint64(l))
	}
	return n
}
func (m *AttrValue_Tensor) Size() (n int) {
	var l int
	_ = l
	if m.Tensor != nil {
		l = m.Tensor.Size()
		n += 1 + l + sovAttrValue(uint64(l))
	}
	return n
}
func (m *AttrValue_Placeholder) Size() (n int) {
	var l int
	_ = l
	l = len(m.Placeholder)
	n += 1 + l + sovAttrValue(uint64(l))
	return n
}
func (m *AttrValue_Func) Size() (n int) {
	var l int
	_ = l
	if m.Func != nil {
		l = m.Func.Size()
		n += 1 + l + sovAttrValue(uint64(l))
	}
	return n
}
func (m *AttrValue_ListValue) Size() (n int) {
	var l int
	_ = l
	if len(m.S) > 0 {
		for _, b := range m.S {
			l = len(b)
			n += 1 + l + sovAttrValue(uint64(l))
		}
	}
	if len(m.I) > 0 {
		l = 0
		for _, e := range m.I {
			l += sovAttrValue(uint64(e))
		}
		n += 1 + sovAttrValue(uint64(l)) + l
	}
	if len(m.F) > 0 {
		n += 1 + sovAttrValue(uint64(len(m.F)*4)) + len(m.F)*4
	}
	if len(m.B) > 0 {
		n += 1 + sovAttrValue(uint64(len(m.B))) + len(m.B)*1
	}
	if len(m.Type) > 0 {
		l = 0
		for _, e := range m.Type {
			l += sovAttrValue(uint64(e))
		}
		n += 1 + sovAttrValue(uint64(l)) + l
	}
	if len(m.Shape) > 0 {
		for _, e := range m.Shape {
			l = e.Size()
			n += 1 + l + sovAttrValue(uint64(l))
		}
	}
	if len(m.Tensor) > 0 {
		for _, e := range m.Tensor {
			l = e.Size()
			n += 1 + l + sovAttrValue(uint64(l))
		}
	}
	if len(m.Func) > 0 {
		for _, e := range m.Func {
			l = e.Size()
			n += 1 + l + sovAttrValue(uint64(l))
		}
	}
	return n
}

func (m *NameAttrList) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAttrValue(uint64(l))
	}
	if len(m.Attr) > 0 {
		for k, v := range m.Attr {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovAttrValue(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovAttrValue(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovAttrValue(uint64(mapEntrySize))
		}
	}
	return n
}

func sovAttrValue(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAttrValue(x uint64) (n int) {
	return sovAttrValue(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AttrValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AttrValue{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AttrValue_List) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AttrValue_List{`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "AttrValue_ListValue", "AttrValue_ListValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AttrValue_S) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AttrValue_S{`,
		`S:` + fmt.Sprintf("%v", this.S) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AttrValue_I) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AttrValue_I{`,
		`I:` + fmt.Sprintf("%v", this.I) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AttrValue_F) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AttrValue_F{`,
		`F:` + fmt.Sprintf("%v", this.F) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AttrValue_B) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AttrValue_B{`,
		`B:` + fmt.Sprintf("%v", this.B) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AttrValue_Type) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AttrValue_Type{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AttrValue_Shape) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AttrValue_Shape{`,
		`Shape:` + strings.Replace(fmt.Sprintf("%v", this.Shape), "TensorShapeProto", "TensorShapeProto", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AttrValue_Tensor) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AttrValue_Tensor{`,
		`Tensor:` + strings.Replace(fmt.Sprintf("%v", this.Tensor), "TensorProto", "TensorProto", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AttrValue_Placeholder) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AttrValue_Placeholder{`,
		`Placeholder:` + fmt.Sprintf("%v", this.Placeholder) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AttrValue_Func) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AttrValue_Func{`,
		`Func:` + strings.Replace(fmt.Sprintf("%v", this.Func), "NameAttrList", "NameAttrList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AttrValue_ListValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AttrValue_ListValue{`,
		`S:` + fmt.Sprintf("%v", this.S) + `,`,
		`I:` + fmt.Sprintf("%v", this.I) + `,`,
		`F:` + fmt.Sprintf("%v", this.F) + `,`,
		`B:` + fmt.Sprintf("%v", this.B) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Shape:` + strings.Replace(fmt.Sprintf("%v", this.Shape), "TensorShapeProto", "TensorShapeProto", 1) + `,`,
		`Tensor:` + strings.Replace(fmt.Sprintf("%v", this.Tensor), "TensorProto", "TensorProto", 1) + `,`,
		`Func:` + strings.Replace(fmt.Sprintf("%v", this.Func), "NameAttrList", "NameAttrList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NameAttrList) String() string {
	if this == nil {
		return "nil"
	}
	keysForAttr := make([]string, 0, len(this.Attr))
	for k, _ := range this.Attr {
		keysForAttr = append(keysForAttr, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttr)
	mapStringForAttr := "map[string]*AttrValue{"
	for _, k := range keysForAttr {
		mapStringForAttr += fmt.Sprintf("%v: %v,", k, this.Attr[k])
	}
	mapStringForAttr += "}"
	s := strings.Join([]string{`&NameAttrList{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Attr:` + mapStringForAttr + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAttrValue(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AttrValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttrValue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttrValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttrValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttrValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttrValue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AttrValue_ListValue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &AttrValue_List{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttrValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAttrValue
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Value = &AttrValue_S{v}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field I", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttrValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &AttrValue_I{v}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field F", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Value = &AttrValue_F{float32(math.Float32frombits(v))}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttrValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Value = &AttrValue_B{b}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v DataType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttrValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (DataType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &AttrValue_Type{v}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shape", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttrValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttrValue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TensorShapeProto{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &AttrValue_Shape{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tensor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttrValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttrValue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TensorProto{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &AttrValue_Tensor{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Placeholder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttrValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttrValue
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &AttrValue_Placeholder{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Func", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttrValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttrValue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NameAttrList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &AttrValue_Func{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttrValue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAttrValue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttrValue_ListValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttrValue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttrValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAttrValue
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.S = append(m.S, make([]byte, postIndex-iNdEx))
			copy(m.S[len(m.S)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAttrValue
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.I = append(m.I, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAttrValue
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAttrValue
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAttrValue
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.I = append(m.I, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field I", wireType)
			}
		case 4:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.F = append(m.F, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAttrValue
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAttrValue
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.F = append(m.F, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field F", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAttrValue
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.B = append(m.B, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAttrValue
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAttrValue
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAttrValue
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.B = append(m.B, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
		case 6:
			if wireType == 0 {
				var v DataType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAttrValue
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (DataType(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Type = append(m.Type, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAttrValue
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAttrValue
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v DataType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAttrValue
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (DataType(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Type = append(m.Type, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shape", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttrValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttrValue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shape = append(m.Shape, &TensorShapeProto{})
			if err := m.Shape[len(m.Shape)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tensor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttrValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttrValue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tensor = append(m.Tensor, &TensorProto{})
			if err := m.Tensor[len(m.Tensor)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Func", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttrValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttrValue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Func = append(m.Func, &NameAttrList{})
			if err := m.Func[len(m.Func)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttrValue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAttrValue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NameAttrList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttrValue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NameAttrList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NameAttrList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttrValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttrValue
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttrValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttrValue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attr == nil {
				m.Attr = make(map[string]*AttrValue)
			}
			var mapkey string
			var mapvalue *AttrValue
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAttrValue
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAttrValue
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAttrValue
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAttrValue
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthAttrValue
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthAttrValue
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &AttrValue{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAttrValue(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAttrValue
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attr[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttrValue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAttrValue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAttrValue(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAttrValue
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAttrValue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAttrValue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAttrValue
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAttrValue
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAttrValue(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAttrValue = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAttrValue   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("attr_value.proto", fileDescriptor_attr_value_4c635426a519f3ed) }

var fileDescriptor_attr_value_4c635426a519f3ed = []byte{
	// 526 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0x3d, 0x5e, 0x27, 0x8d, 0x37, 0x51, 0x15, 0x2d, 0x08, 0x56, 0x41, 0x5a, 0x99, 0x9c,
	0x16, 0x0a, 0x29, 0xa4, 0x20, 0x21, 0x6e, 0x44, 0x20, 0xe5, 0x00, 0x08, 0x99, 0x8a, 0x6b, 0xe5,
	0x14, 0xbb, 0x8d, 0x9a, 0xc4, 0x91, 0xbd, 0x01, 0xe5, 0xc6, 0x03, 0x70, 0xe0, 0x31, 0xfa, 0x08,
	0x3c, 0x02, 0x47, 0x8e, 0x1c, 0x1b, 0xf3, 0x02, 0x1c, 0x39, 0x21, 0x34, 0xb3, 0xae, 0xb1, 0x04,
	0x11, 0xb7, 0xf9, 0x67, 0xff, 0x9d, 0x99, 0xfd, 0x34, 0xcb, 0xbb, 0x91, 0x31, 0xd9, 0xd1, 0xbb,
	0x68, 0xb6, 0x8a, 0x07, 0xcb, 0x2c, 0x35, 0xa9, 0xf0, 0x93, 0x2c, 0x9a, 0xc7, 0xef, 0xd3, 0xec,
	0xac, 0xd7, 0x3f, 0x49, 0x4f, 0xd2, 0x7d, 0x4a, 0x4f, 0x56, 0xc9, 0x3e, 0x2a, 0x12, 0x14, 0x59,
	0x7b, 0xaf, 0x63, 0xe2, 0x45, 0x9e, 0x66, 0xa5, 0x12, 0x56, 0x1d, 0xe5, 0xa7, 0xd1, 0xb2, 0x2c,
	0xd8, 0x6b, 0x9b, 0xf5, 0x32, 0xce, 0xad, 0xe8, 0xff, 0xf2, 0xb8, 0xff, 0xc4, 0x98, 0xec, 0x0d,
	0x76, 0x14, 0x0f, 0xb8, 0x37, 0x9b, 0xe6, 0x46, 0x42, 0x00, 0xba, 0x3d, 0x54, 0x83, 0xaa, 0xf5,
	0xa0, 0xf2, 0x0c, 0x9e, 0x4f, 0x73, 0x43, 0xd1, 0xd8, 0x09, 0xc9, 0x2d, 0x76, 0x39, 0xe4, 0xd2,
	0x0d, 0x40, 0x77, 0xc6, 0x4e, 0x08, 0x39, 0xea, 0xa9, 0x64, 0x01, 0x68, 0x86, 0x7a, 0x8a, 0x3a,
	0x91, 0x5e, 0x00, 0xda, 0x45, 0x9d, 0xa0, 0x9e, 0xc8, 0x46, 0x00, 0xba, 0x85, 0x7a, 0x22, 0x6e,
	0x71, 0x0f, 0x47, 0x92, 0xcd, 0x00, 0xf4, 0xee, 0xf0, 0x4a, 0xad, 0xeb, 0xd3, 0xc8, 0x44, 0x87,
	0xeb, 0x25, 0xb5, 0x42, 0x8b, 0x38, 0xe0, 0x0d, 0x7a, 0x8a, 0xdc, 0xa1, 0x09, 0x6f, 0xd4, 0xbc,
	0x87, 0xf4, 0xd2, 0xd7, 0x78, 0xfa, 0x0a, 0x9f, 0x36, 0x76, 0x42, 0xeb, 0x15, 0xf7, 0x78, 0xd3,
	0x62, 0x90, 0x2d, 0xba, 0x75, 0xed, 0xaf, 0x5b, 0x97, 0x17, 0x4a, 0x9f, 0xe8, 0xf3, 0xf6, 0x72,
	0x16, 0x1d, 0xc7, 0xa7, 0xe9, 0xec, 0x6d, 0x9c, 0x49, 0x3f, 0x00, 0xed, 0x8f, 0x9d, 0xb0, 0x9e,
	0x14, 0x77, 0xb9, 0x97, 0xac, 0x16, 0xc7, 0x92, 0x53, 0xcd, 0xeb, 0xb5, 0x9a, 0x2f, 0xa3, 0x79,
	0x8c, 0xbc, 0x90, 0x14, 0x4e, 0x8e, 0xb6, 0xde, 0x47, 0x97, 0xfb, 0x15, 0x3a, 0xd1, 0xb1, 0xc8,
	0x98, 0xee, 0x20, 0xb0, 0xae, 0x05, 0xc6, 0x34, 0x1b, 0xb9, 0x5d, 0x40, 0x64, 0x5d, 0x8b, 0x8c,
	0x69, 0xd7, 0x66, 0x12, 0xcc, 0x20, 0x34, 0xa6, 0x5b, 0x36, 0x33, 0x11, 0x7b, 0x15, 0x36, 0xb6,
	0x05, 0x1b, 0x39, 0x2d, 0xb8, 0xfb, 0x7f, 0xc0, 0xb1, 0xff, 0x80, 0xbb, 0xc4, 0x36, 0xa8, 0x61,
	0x63, 0xdb, 0xb1, 0x55, 0xd0, 0xf6, 0x4a, 0x20, 0x3e, 0xb9, 0xb7, 0x01, 0xb1, 0x38, 0x46, 0x3b,
	0xbc, 0x41, 0x4b, 0xde, 0x3f, 0x07, 0xde, 0xa9, 0x9f, 0x0b, 0xc1, 0xbd, 0x45, 0x34, 0x8f, 0x69,
	0x07, 0xfd, 0x90, 0x62, 0xf1, 0x90, 0x7b, 0xf8, 0x2f, 0x88, 0x58, 0x7b, 0x78, 0x73, 0x4b, 0x69,
	0x5a, 0xd2, 0x67, 0x0b, 0x93, 0xad, 0x43, 0xb2, 0xf7, 0x5e, 0xd8, 0xdd, 0xa6, 0x94, 0xe8, 0x72,
	0x76, 0x16, 0xaf, 0xcb, 0xb2, 0x18, 0x8a, 0xdb, 0xe5, 0x0c, 0xb4, 0xbb, 0xed, 0xe1, 0xd5, 0x7f,
	0xad, 0x7b, 0x68, 0x2d, 0x8f, 0xdd, 0x47, 0x30, 0xba, 0xf3, 0x6d, 0xa3, 0x9c, 0x8b, 0x8d, 0x82,
	0x1f, 0x1b, 0x05, 0x3f, 0x37, 0x0a, 0x3e, 0x14, 0x0a, 0xce, 0x0b, 0x05, 0x9f, 0x0b, 0x05, 0x5f,
	0x0a, 0x05, 0x5f, 0x0b, 0x05, 0x17, 0x85, 0x82, 0x4f, 0xdf, 0x95, 0x33, 0x69, 0xd2, 0x07, 0x3b,
	0xf8, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x2a, 0x1d, 0xe6, 0x15, 0xd2, 0x03, 0x00, 0x00,
}

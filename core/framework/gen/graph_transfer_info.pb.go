// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: graph_transfer_info.proto

package framework

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GraphTransferInfo_Destination int32

const (
	GraphTransferInfo_NOP     GraphTransferInfo_Destination = 0
	GraphTransferInfo_HEXAGON GraphTransferInfo_Destination = 1
)

var GraphTransferInfo_Destination_name = map[int32]string{
	0: "NOP",
	1: "HEXAGON",
}
var GraphTransferInfo_Destination_value = map[string]int32{
	"NOP":     0,
	"HEXAGON": 1,
}

func (x GraphTransferInfo_Destination) String() string {
	return proto.EnumName(GraphTransferInfo_Destination_name, int32(x))
}
func (GraphTransferInfo_Destination) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_graph_transfer_info_41e688052afb144c, []int{7, 0}
}

type GraphTransferNodeInput struct {
	NodeId               int32    `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	OutputPort           int32    `protobuf:"varint,2,opt,name=output_port,json=outputPort,proto3" json:"output_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GraphTransferNodeInput) Reset()      { *m = GraphTransferNodeInput{} }
func (*GraphTransferNodeInput) ProtoMessage() {}
func (*GraphTransferNodeInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_graph_transfer_info_41e688052afb144c, []int{0}
}
func (m *GraphTransferNodeInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GraphTransferNodeInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GraphTransferNodeInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GraphTransferNodeInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphTransferNodeInput.Merge(dst, src)
}
func (m *GraphTransferNodeInput) XXX_Size() int {
	return m.Size()
}
func (m *GraphTransferNodeInput) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphTransferNodeInput.DiscardUnknown(m)
}

var xxx_messageInfo_GraphTransferNodeInput proto.InternalMessageInfo

func (m *GraphTransferNodeInput) GetNodeId() int32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *GraphTransferNodeInput) GetOutputPort() int32 {
	if m != nil {
		return m.OutputPort
	}
	return 0
}

type GraphTransferNodeInfo struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	NodeId               int32    `protobuf:"varint,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	TypeName             string   `protobuf:"bytes,3,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	SocOpId              int32    `protobuf:"varint,4,opt,name=soc_op_id,json=socOpId,proto3" json:"soc_op_id,omitempty"`
	PaddingId            int32    `protobuf:"varint,5,opt,name=padding_id,json=paddingId,proto3" json:"padding_id,omitempty"`
	InputCount           int32    `protobuf:"varint,6,opt,name=input_count,json=inputCount,proto3" json:"input_count,omitempty"`
	OutputCount          int32    `protobuf:"varint,7,opt,name=output_count,json=outputCount,proto3" json:"output_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GraphTransferNodeInfo) Reset()      { *m = GraphTransferNodeInfo{} }
func (*GraphTransferNodeInfo) ProtoMessage() {}
func (*GraphTransferNodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_graph_transfer_info_41e688052afb144c, []int{1}
}
func (m *GraphTransferNodeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GraphTransferNodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GraphTransferNodeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GraphTransferNodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphTransferNodeInfo.Merge(dst, src)
}
func (m *GraphTransferNodeInfo) XXX_Size() int {
	return m.Size()
}
func (m *GraphTransferNodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphTransferNodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GraphTransferNodeInfo proto.InternalMessageInfo

func (m *GraphTransferNodeInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GraphTransferNodeInfo) GetNodeId() int32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *GraphTransferNodeInfo) GetTypeName() string {
	if m != nil {
		return m.TypeName
	}
	return ""
}

func (m *GraphTransferNodeInfo) GetSocOpId() int32 {
	if m != nil {
		return m.SocOpId
	}
	return 0
}

func (m *GraphTransferNodeInfo) GetPaddingId() int32 {
	if m != nil {
		return m.PaddingId
	}
	return 0
}

func (m *GraphTransferNodeInfo) GetInputCount() int32 {
	if m != nil {
		return m.InputCount
	}
	return 0
}

func (m *GraphTransferNodeInfo) GetOutputCount() int32 {
	if m != nil {
		return m.OutputCount
	}
	return 0
}

type GraphTransferConstNodeInfo struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	NodeId               int32    `protobuf:"varint,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Shape                []int64  `protobuf:"varint,3,rep,packed,name=shape" json:"shape,omitempty"`
	Data                 []byte   `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Dtype                DataType `protobuf:"varint,5,opt,name=dtype,proto3,enum=framework.DataType" json:"dtype,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GraphTransferConstNodeInfo) Reset()      { *m = GraphTransferConstNodeInfo{} }
func (*GraphTransferConstNodeInfo) ProtoMessage() {}
func (*GraphTransferConstNodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_graph_transfer_info_41e688052afb144c, []int{2}
}
func (m *GraphTransferConstNodeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GraphTransferConstNodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GraphTransferConstNodeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GraphTransferConstNodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphTransferConstNodeInfo.Merge(dst, src)
}
func (m *GraphTransferConstNodeInfo) XXX_Size() int {
	return m.Size()
}
func (m *GraphTransferConstNodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphTransferConstNodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GraphTransferConstNodeInfo proto.InternalMessageInfo

func (m *GraphTransferConstNodeInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GraphTransferConstNodeInfo) GetNodeId() int32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *GraphTransferConstNodeInfo) GetShape() []int64 {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *GraphTransferConstNodeInfo) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GraphTransferConstNodeInfo) GetDtype() DataType {
	if m != nil {
		return m.Dtype
	}
	return DataType_DT_INVALID
}

type GraphTransferNodeInputInfo struct {
	NodeId               int32                     `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	NodeInput            []*GraphTransferNodeInput `protobuf:"bytes,2,rep,name=node_input,json=nodeInput" json:"node_input,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *GraphTransferNodeInputInfo) Reset()      { *m = GraphTransferNodeInputInfo{} }
func (*GraphTransferNodeInputInfo) ProtoMessage() {}
func (*GraphTransferNodeInputInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_graph_transfer_info_41e688052afb144c, []int{3}
}
func (m *GraphTransferNodeInputInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GraphTransferNodeInputInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GraphTransferNodeInputInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GraphTransferNodeInputInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphTransferNodeInputInfo.Merge(dst, src)
}
func (m *GraphTransferNodeInputInfo) XXX_Size() int {
	return m.Size()
}
func (m *GraphTransferNodeInputInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphTransferNodeInputInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GraphTransferNodeInputInfo proto.InternalMessageInfo

func (m *GraphTransferNodeInputInfo) GetNodeId() int32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *GraphTransferNodeInputInfo) GetNodeInput() []*GraphTransferNodeInput {
	if m != nil {
		return m.NodeInput
	}
	return nil
}

type GraphTransferNodeOutputInfo struct {
	NodeId               int32    `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	MaxByteSize          []int32  `protobuf:"varint,2,rep,packed,name=max_byte_size,json=maxByteSize" json:"max_byte_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GraphTransferNodeOutputInfo) Reset()      { *m = GraphTransferNodeOutputInfo{} }
func (*GraphTransferNodeOutputInfo) ProtoMessage() {}
func (*GraphTransferNodeOutputInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_graph_transfer_info_41e688052afb144c, []int{4}
}
func (m *GraphTransferNodeOutputInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GraphTransferNodeOutputInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GraphTransferNodeOutputInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GraphTransferNodeOutputInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphTransferNodeOutputInfo.Merge(dst, src)
}
func (m *GraphTransferNodeOutputInfo) XXX_Size() int {
	return m.Size()
}
func (m *GraphTransferNodeOutputInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphTransferNodeOutputInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GraphTransferNodeOutputInfo proto.InternalMessageInfo

func (m *GraphTransferNodeOutputInfo) GetNodeId() int32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *GraphTransferNodeOutputInfo) GetMaxByteSize() []int32 {
	if m != nil {
		return m.MaxByteSize
	}
	return nil
}

type GraphTransferGraphInputNodeInfo struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Shape                []int64  `protobuf:"varint,2,rep,packed,name=shape" json:"shape,omitempty"`
	Dtype                DataType `protobuf:"varint,3,opt,name=dtype,proto3,enum=framework.DataType" json:"dtype,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GraphTransferGraphInputNodeInfo) Reset()      { *m = GraphTransferGraphInputNodeInfo{} }
func (*GraphTransferGraphInputNodeInfo) ProtoMessage() {}
func (*GraphTransferGraphInputNodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_graph_transfer_info_41e688052afb144c, []int{5}
}
func (m *GraphTransferGraphInputNodeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GraphTransferGraphInputNodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GraphTransferGraphInputNodeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GraphTransferGraphInputNodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphTransferGraphInputNodeInfo.Merge(dst, src)
}
func (m *GraphTransferGraphInputNodeInfo) XXX_Size() int {
	return m.Size()
}
func (m *GraphTransferGraphInputNodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphTransferGraphInputNodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GraphTransferGraphInputNodeInfo proto.InternalMessageInfo

func (m *GraphTransferGraphInputNodeInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GraphTransferGraphInputNodeInfo) GetShape() []int64 {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *GraphTransferGraphInputNodeInfo) GetDtype() DataType {
	if m != nil {
		return m.Dtype
	}
	return DataType_DT_INVALID
}

type GraphTransferGraphOutputNodeInfo struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Shape                []int64  `protobuf:"varint,2,rep,packed,name=shape" json:"shape,omitempty"`
	Dtype                DataType `protobuf:"varint,3,opt,name=dtype,proto3,enum=framework.DataType" json:"dtype,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GraphTransferGraphOutputNodeInfo) Reset()      { *m = GraphTransferGraphOutputNodeInfo{} }
func (*GraphTransferGraphOutputNodeInfo) ProtoMessage() {}
func (*GraphTransferGraphOutputNodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_graph_transfer_info_41e688052afb144c, []int{6}
}
func (m *GraphTransferGraphOutputNodeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GraphTransferGraphOutputNodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GraphTransferGraphOutputNodeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GraphTransferGraphOutputNodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphTransferGraphOutputNodeInfo.Merge(dst, src)
}
func (m *GraphTransferGraphOutputNodeInfo) XXX_Size() int {
	return m.Size()
}
func (m *GraphTransferGraphOutputNodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphTransferGraphOutputNodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GraphTransferGraphOutputNodeInfo proto.InternalMessageInfo

func (m *GraphTransferGraphOutputNodeInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GraphTransferGraphOutputNodeInfo) GetShape() []int64 {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *GraphTransferGraphOutputNodeInfo) GetDtype() DataType {
	if m != nil {
		return m.Dtype
	}
	return DataType_DT_INVALID
}

// Protocol buffer representing a handle to a tensorflow resource. Handles are
// not valid across executions, but can be serialized back and forth from within
// a single run.
type GraphTransferInfo struct {
	NodeInfo       []*GraphTransferNodeInfo       `protobuf:"bytes,1,rep,name=node_info,json=nodeInfo" json:"node_info,omitempty"`
	ConstNodeInfo  []*GraphTransferConstNodeInfo  `protobuf:"bytes,2,rep,name=const_node_info,json=constNodeInfo" json:"const_node_info,omitempty"`
	NodeInputInfo  []*GraphTransferNodeInputInfo  `protobuf:"bytes,3,rep,name=node_input_info,json=nodeInputInfo" json:"node_input_info,omitempty"`
	NodeOutputInfo []*GraphTransferNodeOutputInfo `protobuf:"bytes,4,rep,name=node_output_info,json=nodeOutputInfo" json:"node_output_info,omitempty"`
	// Input Node parameters of transferred graph
	GraphInputNodeInfo  []*GraphTransferGraphInputNodeInfo  `protobuf:"bytes,5,rep,name=graph_input_node_info,json=graphInputNodeInfo" json:"graph_input_node_info,omitempty"`
	GraphOutputNodeInfo []*GraphTransferGraphOutputNodeInfo `protobuf:"bytes,6,rep,name=graph_output_node_info,json=graphOutputNodeInfo" json:"graph_output_node_info,omitempty"`
	// Destination of graph transfer
	Destination          GraphTransferInfo_Destination `protobuf:"varint,7,opt,name=destination,proto3,enum=framework.GraphTransferInfo_Destination" json:"destination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *GraphTransferInfo) Reset()      { *m = GraphTransferInfo{} }
func (*GraphTransferInfo) ProtoMessage() {}
func (*GraphTransferInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_graph_transfer_info_41e688052afb144c, []int{7}
}
func (m *GraphTransferInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GraphTransferInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GraphTransferInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GraphTransferInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphTransferInfo.Merge(dst, src)
}
func (m *GraphTransferInfo) XXX_Size() int {
	return m.Size()
}
func (m *GraphTransferInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphTransferInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GraphTransferInfo proto.InternalMessageInfo

func (m *GraphTransferInfo) GetNodeInfo() []*GraphTransferNodeInfo {
	if m != nil {
		return m.NodeInfo
	}
	return nil
}

func (m *GraphTransferInfo) GetConstNodeInfo() []*GraphTransferConstNodeInfo {
	if m != nil {
		return m.ConstNodeInfo
	}
	return nil
}

func (m *GraphTransferInfo) GetNodeInputInfo() []*GraphTransferNodeInputInfo {
	if m != nil {
		return m.NodeInputInfo
	}
	return nil
}

func (m *GraphTransferInfo) GetNodeOutputInfo() []*GraphTransferNodeOutputInfo {
	if m != nil {
		return m.NodeOutputInfo
	}
	return nil
}

func (m *GraphTransferInfo) GetGraphInputNodeInfo() []*GraphTransferGraphInputNodeInfo {
	if m != nil {
		return m.GraphInputNodeInfo
	}
	return nil
}

func (m *GraphTransferInfo) GetGraphOutputNodeInfo() []*GraphTransferGraphOutputNodeInfo {
	if m != nil {
		return m.GraphOutputNodeInfo
	}
	return nil
}

func (m *GraphTransferInfo) GetDestination() GraphTransferInfo_Destination {
	if m != nil {
		return m.Destination
	}
	return GraphTransferInfo_NOP
}

func init() {
	proto.RegisterType((*GraphTransferNodeInput)(nil), "framework.GraphTransferNodeInput")
	proto.RegisterType((*GraphTransferNodeInfo)(nil), "framework.GraphTransferNodeInfo")
	proto.RegisterType((*GraphTransferConstNodeInfo)(nil), "framework.GraphTransferConstNodeInfo")
	proto.RegisterType((*GraphTransferNodeInputInfo)(nil), "framework.GraphTransferNodeInputInfo")
	proto.RegisterType((*GraphTransferNodeOutputInfo)(nil), "framework.GraphTransferNodeOutputInfo")
	proto.RegisterType((*GraphTransferGraphInputNodeInfo)(nil), "framework.GraphTransferGraphInputNodeInfo")
	proto.RegisterType((*GraphTransferGraphOutputNodeInfo)(nil), "framework.GraphTransferGraphOutputNodeInfo")
	proto.RegisterType((*GraphTransferInfo)(nil), "framework.GraphTransferInfo")
	proto.RegisterEnum("framework.GraphTransferInfo_Destination", GraphTransferInfo_Destination_name, GraphTransferInfo_Destination_value)
}
func (this *GraphTransferNodeInput) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GraphTransferNodeInput)
	if !ok {
		that2, ok := that.(GraphTransferNodeInput)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GraphTransferNodeInput")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GraphTransferNodeInput but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GraphTransferNodeInput but is not nil && this == nil")
	}
	if this.NodeId != that1.NodeId {
		return fmt.Errorf("NodeId this(%v) Not Equal that(%v)", this.NodeId, that1.NodeId)
	}
	if this.OutputPort != that1.OutputPort {
		return fmt.Errorf("OutputPort this(%v) Not Equal that(%v)", this.OutputPort, that1.OutputPort)
	}
	return nil
}
func (this *GraphTransferNodeInput) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GraphTransferNodeInput)
	if !ok {
		that2, ok := that.(GraphTransferNodeInput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeId != that1.NodeId {
		return false
	}
	if this.OutputPort != that1.OutputPort {
		return false
	}
	return true
}
func (this *GraphTransferNodeInfo) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GraphTransferNodeInfo)
	if !ok {
		that2, ok := that.(GraphTransferNodeInfo)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GraphTransferNodeInfo")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GraphTransferNodeInfo but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GraphTransferNodeInfo but is not nil && this == nil")
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.NodeId != that1.NodeId {
		return fmt.Errorf("NodeId this(%v) Not Equal that(%v)", this.NodeId, that1.NodeId)
	}
	if this.TypeName != that1.TypeName {
		return fmt.Errorf("TypeName this(%v) Not Equal that(%v)", this.TypeName, that1.TypeName)
	}
	if this.SocOpId != that1.SocOpId {
		return fmt.Errorf("SocOpId this(%v) Not Equal that(%v)", this.SocOpId, that1.SocOpId)
	}
	if this.PaddingId != that1.PaddingId {
		return fmt.Errorf("PaddingId this(%v) Not Equal that(%v)", this.PaddingId, that1.PaddingId)
	}
	if this.InputCount != that1.InputCount {
		return fmt.Errorf("InputCount this(%v) Not Equal that(%v)", this.InputCount, that1.InputCount)
	}
	if this.OutputCount != that1.OutputCount {
		return fmt.Errorf("OutputCount this(%v) Not Equal that(%v)", this.OutputCount, that1.OutputCount)
	}
	return nil
}
func (this *GraphTransferNodeInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GraphTransferNodeInfo)
	if !ok {
		that2, ok := that.(GraphTransferNodeInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.NodeId != that1.NodeId {
		return false
	}
	if this.TypeName != that1.TypeName {
		return false
	}
	if this.SocOpId != that1.SocOpId {
		return false
	}
	if this.PaddingId != that1.PaddingId {
		return false
	}
	if this.InputCount != that1.InputCount {
		return false
	}
	if this.OutputCount != that1.OutputCount {
		return false
	}
	return true
}
func (this *GraphTransferConstNodeInfo) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GraphTransferConstNodeInfo)
	if !ok {
		that2, ok := that.(GraphTransferConstNodeInfo)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GraphTransferConstNodeInfo")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GraphTransferConstNodeInfo but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GraphTransferConstNodeInfo but is not nil && this == nil")
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.NodeId != that1.NodeId {
		return fmt.Errorf("NodeId this(%v) Not Equal that(%v)", this.NodeId, that1.NodeId)
	}
	if len(this.Shape) != len(that1.Shape) {
		return fmt.Errorf("Shape this(%v) Not Equal that(%v)", len(this.Shape), len(that1.Shape))
	}
	for i := range this.Shape {
		if this.Shape[i] != that1.Shape[i] {
			return fmt.Errorf("Shape this[%v](%v) Not Equal that[%v](%v)", i, this.Shape[i], i, that1.Shape[i])
		}
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return fmt.Errorf("Data this(%v) Not Equal that(%v)", this.Data, that1.Data)
	}
	if this.Dtype != that1.Dtype {
		return fmt.Errorf("Dtype this(%v) Not Equal that(%v)", this.Dtype, that1.Dtype)
	}
	return nil
}
func (this *GraphTransferConstNodeInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GraphTransferConstNodeInfo)
	if !ok {
		that2, ok := that.(GraphTransferConstNodeInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.NodeId != that1.NodeId {
		return false
	}
	if len(this.Shape) != len(that1.Shape) {
		return false
	}
	for i := range this.Shape {
		if this.Shape[i] != that1.Shape[i] {
			return false
		}
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if this.Dtype != that1.Dtype {
		return false
	}
	return true
}
func (this *GraphTransferNodeInputInfo) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GraphTransferNodeInputInfo)
	if !ok {
		that2, ok := that.(GraphTransferNodeInputInfo)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GraphTransferNodeInputInfo")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GraphTransferNodeInputInfo but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GraphTransferNodeInputInfo but is not nil && this == nil")
	}
	if this.NodeId != that1.NodeId {
		return fmt.Errorf("NodeId this(%v) Not Equal that(%v)", this.NodeId, that1.NodeId)
	}
	if len(this.NodeInput) != len(that1.NodeInput) {
		return fmt.Errorf("NodeInput this(%v) Not Equal that(%v)", len(this.NodeInput), len(that1.NodeInput))
	}
	for i := range this.NodeInput {
		if !this.NodeInput[i].Equal(that1.NodeInput[i]) {
			return fmt.Errorf("NodeInput this[%v](%v) Not Equal that[%v](%v)", i, this.NodeInput[i], i, that1.NodeInput[i])
		}
	}
	return nil
}
func (this *GraphTransferNodeInputInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GraphTransferNodeInputInfo)
	if !ok {
		that2, ok := that.(GraphTransferNodeInputInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeId != that1.NodeId {
		return false
	}
	if len(this.NodeInput) != len(that1.NodeInput) {
		return false
	}
	for i := range this.NodeInput {
		if !this.NodeInput[i].Equal(that1.NodeInput[i]) {
			return false
		}
	}
	return true
}
func (this *GraphTransferNodeOutputInfo) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GraphTransferNodeOutputInfo)
	if !ok {
		that2, ok := that.(GraphTransferNodeOutputInfo)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GraphTransferNodeOutputInfo")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GraphTransferNodeOutputInfo but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GraphTransferNodeOutputInfo but is not nil && this == nil")
	}
	if this.NodeId != that1.NodeId {
		return fmt.Errorf("NodeId this(%v) Not Equal that(%v)", this.NodeId, that1.NodeId)
	}
	if len(this.MaxByteSize) != len(that1.MaxByteSize) {
		return fmt.Errorf("MaxByteSize this(%v) Not Equal that(%v)", len(this.MaxByteSize), len(that1.MaxByteSize))
	}
	for i := range this.MaxByteSize {
		if this.MaxByteSize[i] != that1.MaxByteSize[i] {
			return fmt.Errorf("MaxByteSize this[%v](%v) Not Equal that[%v](%v)", i, this.MaxByteSize[i], i, that1.MaxByteSize[i])
		}
	}
	return nil
}
func (this *GraphTransferNodeOutputInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GraphTransferNodeOutputInfo)
	if !ok {
		that2, ok := that.(GraphTransferNodeOutputInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeId != that1.NodeId {
		return false
	}
	if len(this.MaxByteSize) != len(that1.MaxByteSize) {
		return false
	}
	for i := range this.MaxByteSize {
		if this.MaxByteSize[i] != that1.MaxByteSize[i] {
			return false
		}
	}
	return true
}
func (this *GraphTransferGraphInputNodeInfo) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GraphTransferGraphInputNodeInfo)
	if !ok {
		that2, ok := that.(GraphTransferGraphInputNodeInfo)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GraphTransferGraphInputNodeInfo")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GraphTransferGraphInputNodeInfo but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GraphTransferGraphInputNodeInfo but is not nil && this == nil")
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if len(this.Shape) != len(that1.Shape) {
		return fmt.Errorf("Shape this(%v) Not Equal that(%v)", len(this.Shape), len(that1.Shape))
	}
	for i := range this.Shape {
		if this.Shape[i] != that1.Shape[i] {
			return fmt.Errorf("Shape this[%v](%v) Not Equal that[%v](%v)", i, this.Shape[i], i, that1.Shape[i])
		}
	}
	if this.Dtype != that1.Dtype {
		return fmt.Errorf("Dtype this(%v) Not Equal that(%v)", this.Dtype, that1.Dtype)
	}
	return nil
}
func (this *GraphTransferGraphInputNodeInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GraphTransferGraphInputNodeInfo)
	if !ok {
		that2, ok := that.(GraphTransferGraphInputNodeInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Shape) != len(that1.Shape) {
		return false
	}
	for i := range this.Shape {
		if this.Shape[i] != that1.Shape[i] {
			return false
		}
	}
	if this.Dtype != that1.Dtype {
		return false
	}
	return true
}
func (this *GraphTransferGraphOutputNodeInfo) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GraphTransferGraphOutputNodeInfo)
	if !ok {
		that2, ok := that.(GraphTransferGraphOutputNodeInfo)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GraphTransferGraphOutputNodeInfo")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GraphTransferGraphOutputNodeInfo but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GraphTransferGraphOutputNodeInfo but is not nil && this == nil")
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if len(this.Shape) != len(that1.Shape) {
		return fmt.Errorf("Shape this(%v) Not Equal that(%v)", len(this.Shape), len(that1.Shape))
	}
	for i := range this.Shape {
		if this.Shape[i] != that1.Shape[i] {
			return fmt.Errorf("Shape this[%v](%v) Not Equal that[%v](%v)", i, this.Shape[i], i, that1.Shape[i])
		}
	}
	if this.Dtype != that1.Dtype {
		return fmt.Errorf("Dtype this(%v) Not Equal that(%v)", this.Dtype, that1.Dtype)
	}
	return nil
}
func (this *GraphTransferGraphOutputNodeInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GraphTransferGraphOutputNodeInfo)
	if !ok {
		that2, ok := that.(GraphTransferGraphOutputNodeInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Shape) != len(that1.Shape) {
		return false
	}
	for i := range this.Shape {
		if this.Shape[i] != that1.Shape[i] {
			return false
		}
	}
	if this.Dtype != that1.Dtype {
		return false
	}
	return true
}
func (this *GraphTransferInfo) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GraphTransferInfo)
	if !ok {
		that2, ok := that.(GraphTransferInfo)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GraphTransferInfo")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GraphTransferInfo but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GraphTransferInfo but is not nil && this == nil")
	}
	if len(this.NodeInfo) != len(that1.NodeInfo) {
		return fmt.Errorf("NodeInfo this(%v) Not Equal that(%v)", len(this.NodeInfo), len(that1.NodeInfo))
	}
	for i := range this.NodeInfo {
		if !this.NodeInfo[i].Equal(that1.NodeInfo[i]) {
			return fmt.Errorf("NodeInfo this[%v](%v) Not Equal that[%v](%v)", i, this.NodeInfo[i], i, that1.NodeInfo[i])
		}
	}
	if len(this.ConstNodeInfo) != len(that1.ConstNodeInfo) {
		return fmt.Errorf("ConstNodeInfo this(%v) Not Equal that(%v)", len(this.ConstNodeInfo), len(that1.ConstNodeInfo))
	}
	for i := range this.ConstNodeInfo {
		if !this.ConstNodeInfo[i].Equal(that1.ConstNodeInfo[i]) {
			return fmt.Errorf("ConstNodeInfo this[%v](%v) Not Equal that[%v](%v)", i, this.ConstNodeInfo[i], i, that1.ConstNodeInfo[i])
		}
	}
	if len(this.NodeInputInfo) != len(that1.NodeInputInfo) {
		return fmt.Errorf("NodeInputInfo this(%v) Not Equal that(%v)", len(this.NodeInputInfo), len(that1.NodeInputInfo))
	}
	for i := range this.NodeInputInfo {
		if !this.NodeInputInfo[i].Equal(that1.NodeInputInfo[i]) {
			return fmt.Errorf("NodeInputInfo this[%v](%v) Not Equal that[%v](%v)", i, this.NodeInputInfo[i], i, that1.NodeInputInfo[i])
		}
	}
	if len(this.NodeOutputInfo) != len(that1.NodeOutputInfo) {
		return fmt.Errorf("NodeOutputInfo this(%v) Not Equal that(%v)", len(this.NodeOutputInfo), len(that1.NodeOutputInfo))
	}
	for i := range this.NodeOutputInfo {
		if !this.NodeOutputInfo[i].Equal(that1.NodeOutputInfo[i]) {
			return fmt.Errorf("NodeOutputInfo this[%v](%v) Not Equal that[%v](%v)", i, this.NodeOutputInfo[i], i, that1.NodeOutputInfo[i])
		}
	}
	if len(this.GraphInputNodeInfo) != len(that1.GraphInputNodeInfo) {
		return fmt.Errorf("GraphInputNodeInfo this(%v) Not Equal that(%v)", len(this.GraphInputNodeInfo), len(that1.GraphInputNodeInfo))
	}
	for i := range this.GraphInputNodeInfo {
		if !this.GraphInputNodeInfo[i].Equal(that1.GraphInputNodeInfo[i]) {
			return fmt.Errorf("GraphInputNodeInfo this[%v](%v) Not Equal that[%v](%v)", i, this.GraphInputNodeInfo[i], i, that1.GraphInputNodeInfo[i])
		}
	}
	if len(this.GraphOutputNodeInfo) != len(that1.GraphOutputNodeInfo) {
		return fmt.Errorf("GraphOutputNodeInfo this(%v) Not Equal that(%v)", len(this.GraphOutputNodeInfo), len(that1.GraphOutputNodeInfo))
	}
	for i := range this.GraphOutputNodeInfo {
		if !this.GraphOutputNodeInfo[i].Equal(that1.GraphOutputNodeInfo[i]) {
			return fmt.Errorf("GraphOutputNodeInfo this[%v](%v) Not Equal that[%v](%v)", i, this.GraphOutputNodeInfo[i], i, that1.GraphOutputNodeInfo[i])
		}
	}
	if this.Destination != that1.Destination {
		return fmt.Errorf("Destination this(%v) Not Equal that(%v)", this.Destination, that1.Destination)
	}
	return nil
}
func (this *GraphTransferInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GraphTransferInfo)
	if !ok {
		that2, ok := that.(GraphTransferInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.NodeInfo) != len(that1.NodeInfo) {
		return false
	}
	for i := range this.NodeInfo {
		if !this.NodeInfo[i].Equal(that1.NodeInfo[i]) {
			return false
		}
	}
	if len(this.ConstNodeInfo) != len(that1.ConstNodeInfo) {
		return false
	}
	for i := range this.ConstNodeInfo {
		if !this.ConstNodeInfo[i].Equal(that1.ConstNodeInfo[i]) {
			return false
		}
	}
	if len(this.NodeInputInfo) != len(that1.NodeInputInfo) {
		return false
	}
	for i := range this.NodeInputInfo {
		if !this.NodeInputInfo[i].Equal(that1.NodeInputInfo[i]) {
			return false
		}
	}
	if len(this.NodeOutputInfo) != len(that1.NodeOutputInfo) {
		return false
	}
	for i := range this.NodeOutputInfo {
		if !this.NodeOutputInfo[i].Equal(that1.NodeOutputInfo[i]) {
			return false
		}
	}
	if len(this.GraphInputNodeInfo) != len(that1.GraphInputNodeInfo) {
		return false
	}
	for i := range this.GraphInputNodeInfo {
		if !this.GraphInputNodeInfo[i].Equal(that1.GraphInputNodeInfo[i]) {
			return false
		}
	}
	if len(this.GraphOutputNodeInfo) != len(that1.GraphOutputNodeInfo) {
		return false
	}
	for i := range this.GraphOutputNodeInfo {
		if !this.GraphOutputNodeInfo[i].Equal(that1.GraphOutputNodeInfo[i]) {
			return false
		}
	}
	if this.Destination != that1.Destination {
		return false
	}
	return true
}
func (this *GraphTransferNodeInput) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&framework.GraphTransferNodeInput{")
	s = append(s, "NodeId: "+fmt.Sprintf("%#v", this.NodeId)+",\n")
	s = append(s, "OutputPort: "+fmt.Sprintf("%#v", this.OutputPort)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GraphTransferNodeInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&framework.GraphTransferNodeInfo{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "NodeId: "+fmt.Sprintf("%#v", this.NodeId)+",\n")
	s = append(s, "TypeName: "+fmt.Sprintf("%#v", this.TypeName)+",\n")
	s = append(s, "SocOpId: "+fmt.Sprintf("%#v", this.SocOpId)+",\n")
	s = append(s, "PaddingId: "+fmt.Sprintf("%#v", this.PaddingId)+",\n")
	s = append(s, "InputCount: "+fmt.Sprintf("%#v", this.InputCount)+",\n")
	s = append(s, "OutputCount: "+fmt.Sprintf("%#v", this.OutputCount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GraphTransferConstNodeInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&framework.GraphTransferConstNodeInfo{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "NodeId: "+fmt.Sprintf("%#v", this.NodeId)+",\n")
	s = append(s, "Shape: "+fmt.Sprintf("%#v", this.Shape)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "Dtype: "+fmt.Sprintf("%#v", this.Dtype)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GraphTransferNodeInputInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&framework.GraphTransferNodeInputInfo{")
	s = append(s, "NodeId: "+fmt.Sprintf("%#v", this.NodeId)+",\n")
	if this.NodeInput != nil {
		s = append(s, "NodeInput: "+fmt.Sprintf("%#v", this.NodeInput)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GraphTransferNodeOutputInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&framework.GraphTransferNodeOutputInfo{")
	s = append(s, "NodeId: "+fmt.Sprintf("%#v", this.NodeId)+",\n")
	s = append(s, "MaxByteSize: "+fmt.Sprintf("%#v", this.MaxByteSize)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GraphTransferGraphInputNodeInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&framework.GraphTransferGraphInputNodeInfo{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Shape: "+fmt.Sprintf("%#v", this.Shape)+",\n")
	s = append(s, "Dtype: "+fmt.Sprintf("%#v", this.Dtype)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GraphTransferGraphOutputNodeInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&framework.GraphTransferGraphOutputNodeInfo{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Shape: "+fmt.Sprintf("%#v", this.Shape)+",\n")
	s = append(s, "Dtype: "+fmt.Sprintf("%#v", this.Dtype)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GraphTransferInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&framework.GraphTransferInfo{")
	if this.NodeInfo != nil {
		s = append(s, "NodeInfo: "+fmt.Sprintf("%#v", this.NodeInfo)+",\n")
	}
	if this.ConstNodeInfo != nil {
		s = append(s, "ConstNodeInfo: "+fmt.Sprintf("%#v", this.ConstNodeInfo)+",\n")
	}
	if this.NodeInputInfo != nil {
		s = append(s, "NodeInputInfo: "+fmt.Sprintf("%#v", this.NodeInputInfo)+",\n")
	}
	if this.NodeOutputInfo != nil {
		s = append(s, "NodeOutputInfo: "+fmt.Sprintf("%#v", this.NodeOutputInfo)+",\n")
	}
	if this.GraphInputNodeInfo != nil {
		s = append(s, "GraphInputNodeInfo: "+fmt.Sprintf("%#v", this.GraphInputNodeInfo)+",\n")
	}
	if this.GraphOutputNodeInfo != nil {
		s = append(s, "GraphOutputNodeInfo: "+fmt.Sprintf("%#v", this.GraphOutputNodeInfo)+",\n")
	}
	s = append(s, "Destination: "+fmt.Sprintf("%#v", this.Destination)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGraphTransferInfo(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GraphTransferNodeInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphTransferNodeInput) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NodeId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(m.NodeId))
	}
	if m.OutputPort != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(m.OutputPort))
	}
	return i, nil
}

func (m *GraphTransferNodeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphTransferNodeInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.NodeId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(m.NodeId))
	}
	if len(m.TypeName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(len(m.TypeName)))
		i += copy(dAtA[i:], m.TypeName)
	}
	if m.SocOpId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(m.SocOpId))
	}
	if m.PaddingId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(m.PaddingId))
	}
	if m.InputCount != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(m.InputCount))
	}
	if m.OutputCount != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(m.OutputCount))
	}
	return i, nil
}

func (m *GraphTransferConstNodeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphTransferConstNodeInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.NodeId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(m.NodeId))
	}
	if len(m.Shape) > 0 {
		dAtA2 := make([]byte, len(m.Shape)*10)
		var j1 int
		for _, num1 := range m.Shape {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.Dtype != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(m.Dtype))
	}
	return i, nil
}

func (m *GraphTransferNodeInputInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphTransferNodeInputInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NodeId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(m.NodeId))
	}
	if len(m.NodeInput) > 0 {
		for _, msg := range m.NodeInput {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGraphTransferInfo(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GraphTransferNodeOutputInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphTransferNodeOutputInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NodeId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(m.NodeId))
	}
	if len(m.MaxByteSize) > 0 {
		dAtA4 := make([]byte, len(m.MaxByteSize)*10)
		var j3 int
		for _, num1 := range m.MaxByteSize {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	return i, nil
}

func (m *GraphTransferGraphInputNodeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphTransferGraphInputNodeInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Shape) > 0 {
		dAtA6 := make([]byte, len(m.Shape)*10)
		var j5 int
		for _, num1 := range m.Shape {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	if m.Dtype != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(m.Dtype))
	}
	return i, nil
}

func (m *GraphTransferGraphOutputNodeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphTransferGraphOutputNodeInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Shape) > 0 {
		dAtA8 := make([]byte, len(m.Shape)*10)
		var j7 int
		for _, num1 := range m.Shape {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	if m.Dtype != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(m.Dtype))
	}
	return i, nil
}

func (m *GraphTransferInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphTransferInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NodeInfo) > 0 {
		for _, msg := range m.NodeInfo {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGraphTransferInfo(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ConstNodeInfo) > 0 {
		for _, msg := range m.ConstNodeInfo {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGraphTransferInfo(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.NodeInputInfo) > 0 {
		for _, msg := range m.NodeInputInfo {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGraphTransferInfo(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.NodeOutputInfo) > 0 {
		for _, msg := range m.NodeOutputInfo {
			dAtA[i] = 0x22
			i++
			i = encodeVarintGraphTransferInfo(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.GraphInputNodeInfo) > 0 {
		for _, msg := range m.GraphInputNodeInfo {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintGraphTransferInfo(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.GraphOutputNodeInfo) > 0 {
		for _, msg := range m.GraphOutputNodeInfo {
			dAtA[i] = 0x32
			i++
			i = encodeVarintGraphTransferInfo(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Destination != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(m.Destination))
	}
	return i, nil
}

func encodeVarintGraphTransferInfo(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedGraphTransferNodeInput(r randyGraphTransferInfo, easy bool) *GraphTransferNodeInput {
	this := &GraphTransferNodeInput{}
	this.NodeId = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.NodeId *= -1
	}
	this.OutputPort = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.OutputPort *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGraphTransferNodeInfo(r randyGraphTransferInfo, easy bool) *GraphTransferNodeInfo {
	this := &GraphTransferNodeInfo{}
	this.Name = string(randStringGraphTransferInfo(r))
	this.NodeId = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.NodeId *= -1
	}
	this.TypeName = string(randStringGraphTransferInfo(r))
	this.SocOpId = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.SocOpId *= -1
	}
	this.PaddingId = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.PaddingId *= -1
	}
	this.InputCount = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.InputCount *= -1
	}
	this.OutputCount = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.OutputCount *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGraphTransferConstNodeInfo(r randyGraphTransferInfo, easy bool) *GraphTransferConstNodeInfo {
	this := &GraphTransferConstNodeInfo{}
	this.Name = string(randStringGraphTransferInfo(r))
	this.NodeId = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.NodeId *= -1
	}
	v1 := r.Intn(10)
	this.Shape = make([]int64, v1)
	for i := 0; i < v1; i++ {
		this.Shape[i] = int64(r.Int63())
		if r.Intn(2) == 0 {
			this.Shape[i] *= -1
		}
	}
	v2 := r.Intn(100)
	this.Data = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.Data[i] = byte(r.Intn(256))
	}
	this.Dtype = DataType([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}[r.Intn(47)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGraphTransferNodeInputInfo(r randyGraphTransferInfo, easy bool) *GraphTransferNodeInputInfo {
	this := &GraphTransferNodeInputInfo{}
	this.NodeId = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.NodeId *= -1
	}
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.NodeInput = make([]*GraphTransferNodeInput, v3)
		for i := 0; i < v3; i++ {
			this.NodeInput[i] = NewPopulatedGraphTransferNodeInput(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGraphTransferNodeOutputInfo(r randyGraphTransferInfo, easy bool) *GraphTransferNodeOutputInfo {
	this := &GraphTransferNodeOutputInfo{}
	this.NodeId = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.NodeId *= -1
	}
	v4 := r.Intn(10)
	this.MaxByteSize = make([]int32, v4)
	for i := 0; i < v4; i++ {
		this.MaxByteSize[i] = int32(r.Int31())
		if r.Intn(2) == 0 {
			this.MaxByteSize[i] *= -1
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGraphTransferGraphInputNodeInfo(r randyGraphTransferInfo, easy bool) *GraphTransferGraphInputNodeInfo {
	this := &GraphTransferGraphInputNodeInfo{}
	this.Name = string(randStringGraphTransferInfo(r))
	v5 := r.Intn(10)
	this.Shape = make([]int64, v5)
	for i := 0; i < v5; i++ {
		this.Shape[i] = int64(r.Int63())
		if r.Intn(2) == 0 {
			this.Shape[i] *= -1
		}
	}
	this.Dtype = DataType([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}[r.Intn(47)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGraphTransferGraphOutputNodeInfo(r randyGraphTransferInfo, easy bool) *GraphTransferGraphOutputNodeInfo {
	this := &GraphTransferGraphOutputNodeInfo{}
	this.Name = string(randStringGraphTransferInfo(r))
	v6 := r.Intn(10)
	this.Shape = make([]int64, v6)
	for i := 0; i < v6; i++ {
		this.Shape[i] = int64(r.Int63())
		if r.Intn(2) == 0 {
			this.Shape[i] *= -1
		}
	}
	this.Dtype = DataType([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}[r.Intn(47)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGraphTransferInfo(r randyGraphTransferInfo, easy bool) *GraphTransferInfo {
	this := &GraphTransferInfo{}
	if r.Intn(10) != 0 {
		v7 := r.Intn(5)
		this.NodeInfo = make([]*GraphTransferNodeInfo, v7)
		for i := 0; i < v7; i++ {
			this.NodeInfo[i] = NewPopulatedGraphTransferNodeInfo(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v8 := r.Intn(5)
		this.ConstNodeInfo = make([]*GraphTransferConstNodeInfo, v8)
		for i := 0; i < v8; i++ {
			this.ConstNodeInfo[i] = NewPopulatedGraphTransferConstNodeInfo(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v9 := r.Intn(5)
		this.NodeInputInfo = make([]*GraphTransferNodeInputInfo, v9)
		for i := 0; i < v9; i++ {
			this.NodeInputInfo[i] = NewPopulatedGraphTransferNodeInputInfo(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v10 := r.Intn(5)
		this.NodeOutputInfo = make([]*GraphTransferNodeOutputInfo, v10)
		for i := 0; i < v10; i++ {
			this.NodeOutputInfo[i] = NewPopulatedGraphTransferNodeOutputInfo(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v11 := r.Intn(5)
		this.GraphInputNodeInfo = make([]*GraphTransferGraphInputNodeInfo, v11)
		for i := 0; i < v11; i++ {
			this.GraphInputNodeInfo[i] = NewPopulatedGraphTransferGraphInputNodeInfo(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v12 := r.Intn(5)
		this.GraphOutputNodeInfo = make([]*GraphTransferGraphOutputNodeInfo, v12)
		for i := 0; i < v12; i++ {
			this.GraphOutputNodeInfo[i] = NewPopulatedGraphTransferGraphOutputNodeInfo(r, easy)
		}
	}
	this.Destination = GraphTransferInfo_Destination([]int32{0, 1}[r.Intn(2)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyGraphTransferInfo interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneGraphTransferInfo(r randyGraphTransferInfo) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringGraphTransferInfo(r randyGraphTransferInfo) string {
	v13 := r.Intn(100)
	tmps := make([]rune, v13)
	for i := 0; i < v13; i++ {
		tmps[i] = randUTF8RuneGraphTransferInfo(r)
	}
	return string(tmps)
}
func randUnrecognizedGraphTransferInfo(r randyGraphTransferInfo, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldGraphTransferInfo(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldGraphTransferInfo(dAtA []byte, r randyGraphTransferInfo, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateGraphTransferInfo(dAtA, uint64(key))
		v14 := r.Int63()
		if r.Intn(2) == 0 {
			v14 *= -1
		}
		dAtA = encodeVarintPopulateGraphTransferInfo(dAtA, uint64(v14))
	case 1:
		dAtA = encodeVarintPopulateGraphTransferInfo(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateGraphTransferInfo(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateGraphTransferInfo(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateGraphTransferInfo(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateGraphTransferInfo(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *GraphTransferNodeInput) Size() (n int) {
	var l int
	_ = l
	if m.NodeId != 0 {
		n += 1 + sovGraphTransferInfo(uint64(m.NodeId))
	}
	if m.OutputPort != 0 {
		n += 1 + sovGraphTransferInfo(uint64(m.OutputPort))
	}
	return n
}

func (m *GraphTransferNodeInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGraphTransferInfo(uint64(l))
	}
	if m.NodeId != 0 {
		n += 1 + sovGraphTransferInfo(uint64(m.NodeId))
	}
	l = len(m.TypeName)
	if l > 0 {
		n += 1 + l + sovGraphTransferInfo(uint64(l))
	}
	if m.SocOpId != 0 {
		n += 1 + sovGraphTransferInfo(uint64(m.SocOpId))
	}
	if m.PaddingId != 0 {
		n += 1 + sovGraphTransferInfo(uint64(m.PaddingId))
	}
	if m.InputCount != 0 {
		n += 1 + sovGraphTransferInfo(uint64(m.InputCount))
	}
	if m.OutputCount != 0 {
		n += 1 + sovGraphTransferInfo(uint64(m.OutputCount))
	}
	return n
}

func (m *GraphTransferConstNodeInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGraphTransferInfo(uint64(l))
	}
	if m.NodeId != 0 {
		n += 1 + sovGraphTransferInfo(uint64(m.NodeId))
	}
	if len(m.Shape) > 0 {
		l = 0
		for _, e := range m.Shape {
			l += sovGraphTransferInfo(uint64(e))
		}
		n += 1 + sovGraphTransferInfo(uint64(l)) + l
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovGraphTransferInfo(uint64(l))
	}
	if m.Dtype != 0 {
		n += 1 + sovGraphTransferInfo(uint64(m.Dtype))
	}
	return n
}

func (m *GraphTransferNodeInputInfo) Size() (n int) {
	var l int
	_ = l
	if m.NodeId != 0 {
		n += 1 + sovGraphTransferInfo(uint64(m.NodeId))
	}
	if len(m.NodeInput) > 0 {
		for _, e := range m.NodeInput {
			l = e.Size()
			n += 1 + l + sovGraphTransferInfo(uint64(l))
		}
	}
	return n
}

func (m *GraphTransferNodeOutputInfo) Size() (n int) {
	var l int
	_ = l
	if m.NodeId != 0 {
		n += 1 + sovGraphTransferInfo(uint64(m.NodeId))
	}
	if len(m.MaxByteSize) > 0 {
		l = 0
		for _, e := range m.MaxByteSize {
			l += sovGraphTransferInfo(uint64(e))
		}
		n += 1 + sovGraphTransferInfo(uint64(l)) + l
	}
	return n
}

func (m *GraphTransferGraphInputNodeInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGraphTransferInfo(uint64(l))
	}
	if len(m.Shape) > 0 {
		l = 0
		for _, e := range m.Shape {
			l += sovGraphTransferInfo(uint64(e))
		}
		n += 1 + sovGraphTransferInfo(uint64(l)) + l
	}
	if m.Dtype != 0 {
		n += 1 + sovGraphTransferInfo(uint64(m.Dtype))
	}
	return n
}

func (m *GraphTransferGraphOutputNodeInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGraphTransferInfo(uint64(l))
	}
	if len(m.Shape) > 0 {
		l = 0
		for _, e := range m.Shape {
			l += sovGraphTransferInfo(uint64(e))
		}
		n += 1 + sovGraphTransferInfo(uint64(l)) + l
	}
	if m.Dtype != 0 {
		n += 1 + sovGraphTransferInfo(uint64(m.Dtype))
	}
	return n
}

func (m *GraphTransferInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.NodeInfo) > 0 {
		for _, e := range m.NodeInfo {
			l = e.Size()
			n += 1 + l + sovGraphTransferInfo(uint64(l))
		}
	}
	if len(m.ConstNodeInfo) > 0 {
		for _, e := range m.ConstNodeInfo {
			l = e.Size()
			n += 1 + l + sovGraphTransferInfo(uint64(l))
		}
	}
	if len(m.NodeInputInfo) > 0 {
		for _, e := range m.NodeInputInfo {
			l = e.Size()
			n += 1 + l + sovGraphTransferInfo(uint64(l))
		}
	}
	if len(m.NodeOutputInfo) > 0 {
		for _, e := range m.NodeOutputInfo {
			l = e.Size()
			n += 1 + l + sovGraphTransferInfo(uint64(l))
		}
	}
	if len(m.GraphInputNodeInfo) > 0 {
		for _, e := range m.GraphInputNodeInfo {
			l = e.Size()
			n += 1 + l + sovGraphTransferInfo(uint64(l))
		}
	}
	if len(m.GraphOutputNodeInfo) > 0 {
		for _, e := range m.GraphOutputNodeInfo {
			l = e.Size()
			n += 1 + l + sovGraphTransferInfo(uint64(l))
		}
	}
	if m.Destination != 0 {
		n += 1 + sovGraphTransferInfo(uint64(m.Destination))
	}
	return n
}

func sovGraphTransferInfo(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGraphTransferInfo(x uint64) (n int) {
	return sovGraphTransferInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GraphTransferNodeInput) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GraphTransferNodeInput{`,
		`NodeId:` + fmt.Sprintf("%v", this.NodeId) + `,`,
		`OutputPort:` + fmt.Sprintf("%v", this.OutputPort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GraphTransferNodeInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GraphTransferNodeInfo{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`NodeId:` + fmt.Sprintf("%v", this.NodeId) + `,`,
		`TypeName:` + fmt.Sprintf("%v", this.TypeName) + `,`,
		`SocOpId:` + fmt.Sprintf("%v", this.SocOpId) + `,`,
		`PaddingId:` + fmt.Sprintf("%v", this.PaddingId) + `,`,
		`InputCount:` + fmt.Sprintf("%v", this.InputCount) + `,`,
		`OutputCount:` + fmt.Sprintf("%v", this.OutputCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GraphTransferConstNodeInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GraphTransferConstNodeInfo{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`NodeId:` + fmt.Sprintf("%v", this.NodeId) + `,`,
		`Shape:` + fmt.Sprintf("%v", this.Shape) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`Dtype:` + fmt.Sprintf("%v", this.Dtype) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GraphTransferNodeInputInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GraphTransferNodeInputInfo{`,
		`NodeId:` + fmt.Sprintf("%v", this.NodeId) + `,`,
		`NodeInput:` + strings.Replace(fmt.Sprintf("%v", this.NodeInput), "GraphTransferNodeInput", "GraphTransferNodeInput", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GraphTransferNodeOutputInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GraphTransferNodeOutputInfo{`,
		`NodeId:` + fmt.Sprintf("%v", this.NodeId) + `,`,
		`MaxByteSize:` + fmt.Sprintf("%v", this.MaxByteSize) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GraphTransferGraphInputNodeInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GraphTransferGraphInputNodeInfo{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Shape:` + fmt.Sprintf("%v", this.Shape) + `,`,
		`Dtype:` + fmt.Sprintf("%v", this.Dtype) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GraphTransferGraphOutputNodeInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GraphTransferGraphOutputNodeInfo{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Shape:` + fmt.Sprintf("%v", this.Shape) + `,`,
		`Dtype:` + fmt.Sprintf("%v", this.Dtype) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GraphTransferInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GraphTransferInfo{`,
		`NodeInfo:` + strings.Replace(fmt.Sprintf("%v", this.NodeInfo), "GraphTransferNodeInfo", "GraphTransferNodeInfo", 1) + `,`,
		`ConstNodeInfo:` + strings.Replace(fmt.Sprintf("%v", this.ConstNodeInfo), "GraphTransferConstNodeInfo", "GraphTransferConstNodeInfo", 1) + `,`,
		`NodeInputInfo:` + strings.Replace(fmt.Sprintf("%v", this.NodeInputInfo), "GraphTransferNodeInputInfo", "GraphTransferNodeInputInfo", 1) + `,`,
		`NodeOutputInfo:` + strings.Replace(fmt.Sprintf("%v", this.NodeOutputInfo), "GraphTransferNodeOutputInfo", "GraphTransferNodeOutputInfo", 1) + `,`,
		`GraphInputNodeInfo:` + strings.Replace(fmt.Sprintf("%v", this.GraphInputNodeInfo), "GraphTransferGraphInputNodeInfo", "GraphTransferGraphInputNodeInfo", 1) + `,`,
		`GraphOutputNodeInfo:` + strings.Replace(fmt.Sprintf("%v", this.GraphOutputNodeInfo), "GraphTransferGraphOutputNodeInfo", "GraphTransferGraphOutputNodeInfo", 1) + `,`,
		`Destination:` + fmt.Sprintf("%v", this.Destination) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGraphTransferInfo(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GraphTransferNodeInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphTransferInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GraphTransferNodeInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GraphTransferNodeInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			m.NodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputPort", wireType)
			}
			m.OutputPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutputPort |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGraphTransferInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GraphTransferNodeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphTransferInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GraphTransferNodeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GraphTransferNodeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			m.NodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SocOpId", wireType)
			}
			m.SocOpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SocOpId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaddingId", wireType)
			}
			m.PaddingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaddingId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputCount", wireType)
			}
			m.InputCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InputCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputCount", wireType)
			}
			m.OutputCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutputCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGraphTransferInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GraphTransferConstNodeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphTransferInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GraphTransferConstNodeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GraphTransferConstNodeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			m.NodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGraphTransferInfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Shape = append(m.Shape, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGraphTransferInfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGraphTransferInfo
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGraphTransferInfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Shape = append(m.Shape, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Shape", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dtype", wireType)
			}
			m.Dtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dtype |= (DataType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGraphTransferInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GraphTransferNodeInputInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphTransferInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GraphTransferNodeInputInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GraphTransferNodeInputInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			m.NodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeInput", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeInput = append(m.NodeInput, &GraphTransferNodeInput{})
			if err := m.NodeInput[len(m.NodeInput)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGraphTransferInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GraphTransferNodeOutputInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphTransferInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GraphTransferNodeOutputInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GraphTransferNodeOutputInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			m.NodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGraphTransferInfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MaxByteSize = append(m.MaxByteSize, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGraphTransferInfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGraphTransferInfo
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGraphTransferInfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MaxByteSize = append(m.MaxByteSize, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxByteSize", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGraphTransferInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GraphTransferGraphInputNodeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphTransferInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GraphTransferGraphInputNodeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GraphTransferGraphInputNodeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGraphTransferInfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Shape = append(m.Shape, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGraphTransferInfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGraphTransferInfo
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGraphTransferInfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Shape = append(m.Shape, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Shape", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dtype", wireType)
			}
			m.Dtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dtype |= (DataType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGraphTransferInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GraphTransferGraphOutputNodeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphTransferInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GraphTransferGraphOutputNodeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GraphTransferGraphOutputNodeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGraphTransferInfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Shape = append(m.Shape, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGraphTransferInfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGraphTransferInfo
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGraphTransferInfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Shape = append(m.Shape, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Shape", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dtype", wireType)
			}
			m.Dtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dtype |= (DataType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGraphTransferInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GraphTransferInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphTransferInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GraphTransferInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GraphTransferInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeInfo = append(m.NodeInfo, &GraphTransferNodeInfo{})
			if err := m.NodeInfo[len(m.NodeInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConstNodeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConstNodeInfo = append(m.ConstNodeInfo, &GraphTransferConstNodeInfo{})
			if err := m.ConstNodeInfo[len(m.ConstNodeInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeInputInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeInputInfo = append(m.NodeInputInfo, &GraphTransferNodeInputInfo{})
			if err := m.NodeInputInfo[len(m.NodeInputInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeOutputInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeOutputInfo = append(m.NodeOutputInfo, &GraphTransferNodeOutputInfo{})
			if err := m.NodeOutputInfo[len(m.NodeOutputInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphInputNodeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GraphInputNodeInfo = append(m.GraphInputNodeInfo, &GraphTransferGraphInputNodeInfo{})
			if err := m.GraphInputNodeInfo[len(m.GraphInputNodeInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphOutputNodeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GraphOutputNodeInfo = append(m.GraphOutputNodeInfo, &GraphTransferGraphOutputNodeInfo{})
			if err := m.GraphOutputNodeInfo[len(m.GraphOutputNodeInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			m.Destination = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Destination |= (GraphTransferInfo_Destination(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGraphTransferInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGraphTransferInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGraphTransferInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGraphTransferInfo
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGraphTransferInfo
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGraphTransferInfo(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGraphTransferInfo = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGraphTransferInfo   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("graph_transfer_info.proto", fileDescriptor_graph_transfer_info_41e688052afb144c)
}

var fileDescriptor_graph_transfer_info_41e688052afb144c = []byte{
	// 684 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x95, 0xcb, 0x6e, 0xd3, 0x4c,
	0x14, 0xc7, 0x3b, 0xb9, 0xd6, 0xc7, 0xbd, 0x7d, 0xee, 0xd7, 0x12, 0x52, 0xe1, 0xa6, 0x46, 0xa0,
	0x70, 0x51, 0x2a, 0x95, 0x35, 0x12, 0xb4, 0x45, 0xa5, 0x48, 0x4d, 0xaa, 0xa1, 0x0b, 0x84, 0x84,
	0x8c, 0x1b, 0xdb, 0xa9, 0x85, 0x32, 0x63, 0xd9, 0x13, 0xda, 0x74, 0xc5, 0x23, 0xf0, 0x04, 0xac,
	0x79, 0x04, 0x1e, 0x81, 0x25, 0x4b, 0x96, 0x4d, 0x78, 0x01, 0x16, 0x2c, 0x58, 0xa2, 0x39, 0xe3,
	0x26, 0x31, 0x69, 0x22, 0x84, 0xc4, 0x6e, 0xe6, 0xcc, 0x39, 0xbf, 0x73, 0xfb, 0xc7, 0x81, 0xeb,
	0xad, 0xc8, 0x09, 0x4f, 0x6c, 0x11, 0x39, 0x2c, 0xf6, 0xbd, 0xc8, 0x0e, 0x98, 0xcf, 0x6b, 0x61,
	0xc4, 0x05, 0x37, 0x34, 0x3f, 0x72, 0xda, 0xde, 0x29, 0x8f, 0xde, 0x94, 0xad, 0x16, 0x6f, 0xf1,
	0x4d, 0x34, 0x1f, 0x77, 0xfc, 0x4d, 0x79, 0xc3, 0x0b, 0x9e, 0x94, 0x7b, 0x59, 0x17, 0xdd, 0xd0,
	0x8b, 0xd5, 0xc5, 0xa2, 0xb0, 0xba, 0x27, 0xc1, 0x47, 0x09, 0xb7, 0xce, 0x5d, 0x6f, 0x9f, 0x85,
	0x1d, 0x61, 0x5c, 0x83, 0x22, 0xe3, 0xae, 0x67, 0x07, 0x6e, 0x89, 0x54, 0x48, 0x35, 0x4f, 0x0b,
	0xf2, 0xba, 0xef, 0x1a, 0xeb, 0xa0, 0xf3, 0x8e, 0x08, 0x3b, 0xc2, 0x0e, 0x79, 0x24, 0x4a, 0x19,
	0x7c, 0x04, 0x65, 0x3a, 0xe4, 0x91, 0xb0, 0x2e, 0x08, 0xac, 0x5c, 0x01, 0xf5, 0xb9, 0x61, 0x40,
	0x8e, 0x39, 0x6d, 0x0f, 0x81, 0x1a, 0xc5, 0xf3, 0x68, 0x9e, 0x4c, 0x2a, 0xcf, 0x1a, 0x68, 0xb2,
	0x52, 0x1b, 0x23, 0xb2, 0x18, 0x31, 0x2b, 0x0d, 0x75, 0x19, 0x55, 0x06, 0x2d, 0xe6, 0x4d, 0x9b,
	0x87, 0x32, 0x2e, 0x87, 0x71, 0xc5, 0x98, 0x37, 0x1b, 0xe1, 0xbe, 0x6b, 0xdc, 0x00, 0x08, 0x1d,
	0xd7, 0x0d, 0x58, 0x4b, 0x3e, 0xe6, 0xf1, 0x51, 0x4b, 0x2c, 0xaa, 0xfe, 0x40, 0x76, 0x68, 0x37,
	0x79, 0x87, 0x89, 0x52, 0x41, 0xd5, 0x8f, 0xa6, 0x1d, 0x69, 0x31, 0x36, 0x60, 0x2e, 0x69, 0x50,
	0x79, 0x14, 0xd1, 0x23, 0x69, 0x1a, 0x5d, 0xac, 0x0f, 0x04, 0xca, 0xa9, 0x16, 0x77, 0x38, 0x8b,
	0xc5, 0xdf, 0xf5, 0xf9, 0x3f, 0xe4, 0xe3, 0x13, 0x27, 0x94, 0x3d, 0x66, 0xab, 0x59, 0xaa, 0x2e,
	0x12, 0xe1, 0x3a, 0xc2, 0xc1, 0xde, 0xe6, 0x28, 0x9e, 0x8d, 0x3b, 0x90, 0x77, 0xe5, 0x04, 0xb0,
	0xa7, 0x85, 0xad, 0xe5, 0xda, 0x60, 0xf1, 0xb5, 0x5d, 0x47, 0x38, 0x47, 0xdd, 0xd0, 0xa3, 0xca,
	0xc3, 0x3a, 0xfd, 0xad, 0xbe, 0xc1, 0x5e, 0xb1, 0xbe, 0x89, 0xbb, 0x7d, 0x04, 0xa0, 0x1e, 0xa4,
	0x6b, 0x29, 0x53, 0xc9, 0x56, 0xf5, 0xad, 0x8d, 0x91, 0x34, 0x57, 0x33, 0xa9, 0xc6, 0x2e, 0x8f,
	0xd6, 0x4b, 0x58, 0x1b, 0x73, 0x6a, 0xe0, 0xe4, 0xa6, 0x67, 0xb6, 0x60, 0xbe, 0xed, 0x9c, 0xd9,
	0xc7, 0x5d, 0xe1, 0xd9, 0x71, 0x70, 0xee, 0x61, 0xf2, 0x3c, 0xd5, 0xdb, 0xce, 0xd9, 0x76, 0x57,
	0x78, 0xcf, 0x83, 0x73, 0xcf, 0x7a, 0x0b, 0xeb, 0x29, 0x36, 0x5e, 0x30, 0xed, 0xd4, 0xc9, 0x0f,
	0x06, 0x9c, 0x19, 0x1d, 0xf0, 0x60, 0x98, 0xd9, 0x3f, 0x18, 0x66, 0x65, 0x3c, 0xaf, 0x6a, 0xea,
	0xdf, 0x26, 0xfe, 0x91, 0x83, 0xff, 0x52, 0x99, 0x31, 0xd5, 0x43, 0xd0, 0x92, 0x25, 0xf9, 0xbc,
	0x44, 0x70, 0x47, 0x95, 0xe9, 0x3b, 0xf2, 0x39, 0x9d, 0x65, 0x97, 0x95, 0x1e, 0xc0, 0x62, 0x53,
	0xaa, 0xd5, 0x1e, 0x42, 0xd4, 0xa2, 0x6f, 0x4d, 0x82, 0xa4, 0xc4, 0x4d, 0xe7, 0x9b, 0x29, 0xad,
	0x1f, 0xc0, 0xe2, 0x50, 0x32, 0x0a, 0x97, 0x9d, 0x8e, 0x4b, 0x69, 0x91, 0xce, 0xb3, 0x94, 0x34,
	0x0f, 0x61, 0x09, 0x71, 0xc9, 0x2f, 0x10, 0x79, 0x39, 0xe4, 0xdd, 0x9e, 0xc6, 0x1b, 0x4a, 0x8c,
	0x2e, 0xb0, 0xb4, 0xe4, 0x5e, 0xc1, 0x8a, 0xfa, 0x76, 0xaa, 0x0a, 0x87, 0x5d, 0xe7, 0x11, 0x7b,
	0x77, 0x12, 0x76, 0x5c, 0x5d, 0xd4, 0x68, 0x8d, 0x2b, 0xee, 0x35, 0xac, 0x2a, 0x7c, 0x52, 0xf1,
	0x90, 0x5f, 0x40, 0xfe, 0xbd, 0xa9, 0xfc, 0xb4, 0x8a, 0xe8, 0x72, 0xeb, 0x0a, 0x69, 0x3d, 0x03,
	0xdd, 0xf5, 0x62, 0x11, 0x30, 0x47, 0x04, 0x9c, 0xe1, 0xe7, 0x68, 0x61, 0xab, 0x3a, 0x09, 0x2b,
	0x43, 0x6a, 0xbb, 0x43, 0x7f, 0x3a, 0x1a, 0x6c, 0xdd, 0x04, 0x7d, 0xe4, 0xcd, 0x28, 0x42, 0xb6,
	0xde, 0x38, 0x5c, 0x9a, 0x31, 0x74, 0x28, 0x3e, 0x7d, 0xf2, 0xe2, 0xf1, 0x5e, 0xa3, 0xbe, 0x44,
	0xb6, 0xef, 0x7f, 0xed, 0x99, 0x33, 0x17, 0x3d, 0x93, 0x7c, 0xef, 0x99, 0xe4, 0x67, 0xcf, 0x24,
	0xef, 0xfa, 0x26, 0xf9, 0xd8, 0x37, 0xc9, 0xa7, 0xbe, 0x49, 0x3e, 0xf7, 0x4d, 0xf2, 0xa5, 0x6f,
	0x92, 0x8b, 0xbe, 0x49, 0xde, 0x7f, 0x33, 0x67, 0x8e, 0x0b, 0xf8, 0x4f, 0xf2, 0xe0, 0x57, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x32, 0x00, 0xee, 0xd8, 0xa2, 0x06, 0x00, 0x00,
}

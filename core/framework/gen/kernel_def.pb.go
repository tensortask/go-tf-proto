// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kernel_def.proto

package framework

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type KernelDef struct {
	// Must match the name of an Op.
	Op string `protobuf:"bytes,1,opt,name=op,proto3" json:"op,omitempty"`
	// Type of device this kernel runs on.
	DeviceType string                      `protobuf:"bytes,2,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	Constraint []*KernelDef_AttrConstraint `protobuf:"bytes,3,rep,name=constraint" json:"constraint,omitempty"`
	// Names of the Op's input_/output_args that reside in host memory
	// instead of device memory.
	HostMemoryArg []string `protobuf:"bytes,4,rep,name=host_memory_arg,json=hostMemoryArg" json:"host_memory_arg,omitempty"`
	// This allows experimental kernels to be registered for an op that
	// won't be used unless the user specifies a "_kernel" attr with
	// value matching this.
	Label string `protobuf:"bytes,5,opt,name=label,proto3" json:"label,omitempty"`
	// Prioritization of kernel amongst different devices. By default we assume
	// priority is 0. The higher the priority the better. By default (i.e. if
	// this is not set), we prefer GPU kernels over CPU.
	Priority             int32    `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KernelDef) Reset()      { *m = KernelDef{} }
func (*KernelDef) ProtoMessage() {}
func (*KernelDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_kernel_def_e082561d00d25df9, []int{0}
}
func (m *KernelDef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KernelDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KernelDef.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *KernelDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KernelDef.Merge(dst, src)
}
func (m *KernelDef) XXX_Size() int {
	return m.Size()
}
func (m *KernelDef) XXX_DiscardUnknown() {
	xxx_messageInfo_KernelDef.DiscardUnknown(m)
}

var xxx_messageInfo_KernelDef proto.InternalMessageInfo

func (m *KernelDef) GetOp() string {
	if m != nil {
		return m.Op
	}
	return ""
}

func (m *KernelDef) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *KernelDef) GetConstraint() []*KernelDef_AttrConstraint {
	if m != nil {
		return m.Constraint
	}
	return nil
}

func (m *KernelDef) GetHostMemoryArg() []string {
	if m != nil {
		return m.HostMemoryArg
	}
	return nil
}

func (m *KernelDef) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *KernelDef) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

type KernelDef_AttrConstraint struct {
	// Name of an attr from the Op.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A list of values that this kernel supports for this attr.
	// Like OpDef.AttrDef.allowed_values, except for kernels instead of Ops.
	AllowedValues        *AttrValue `protobuf:"bytes,2,opt,name=allowed_values,json=allowedValues" json:"allowed_values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *KernelDef_AttrConstraint) Reset()      { *m = KernelDef_AttrConstraint{} }
func (*KernelDef_AttrConstraint) ProtoMessage() {}
func (*KernelDef_AttrConstraint) Descriptor() ([]byte, []int) {
	return fileDescriptor_kernel_def_e082561d00d25df9, []int{0, 0}
}
func (m *KernelDef_AttrConstraint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KernelDef_AttrConstraint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KernelDef_AttrConstraint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *KernelDef_AttrConstraint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KernelDef_AttrConstraint.Merge(dst, src)
}
func (m *KernelDef_AttrConstraint) XXX_Size() int {
	return m.Size()
}
func (m *KernelDef_AttrConstraint) XXX_DiscardUnknown() {
	xxx_messageInfo_KernelDef_AttrConstraint.DiscardUnknown(m)
}

var xxx_messageInfo_KernelDef_AttrConstraint proto.InternalMessageInfo

func (m *KernelDef_AttrConstraint) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *KernelDef_AttrConstraint) GetAllowedValues() *AttrValue {
	if m != nil {
		return m.AllowedValues
	}
	return nil
}

// A collection of KernelDefs
type KernelList struct {
	Kernel               []*KernelDef `protobuf:"bytes,1,rep,name=kernel" json:"kernel,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *KernelList) Reset()      { *m = KernelList{} }
func (*KernelList) ProtoMessage() {}
func (*KernelList) Descriptor() ([]byte, []int) {
	return fileDescriptor_kernel_def_e082561d00d25df9, []int{1}
}
func (m *KernelList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KernelList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KernelList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *KernelList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KernelList.Merge(dst, src)
}
func (m *KernelList) XXX_Size() int {
	return m.Size()
}
func (m *KernelList) XXX_DiscardUnknown() {
	xxx_messageInfo_KernelList.DiscardUnknown(m)
}

var xxx_messageInfo_KernelList proto.InternalMessageInfo

func (m *KernelList) GetKernel() []*KernelDef {
	if m != nil {
		return m.Kernel
	}
	return nil
}

func init() {
	proto.RegisterType((*KernelDef)(nil), "framework.KernelDef")
	proto.RegisterType((*KernelDef_AttrConstraint)(nil), "framework.KernelDef.AttrConstraint")
	proto.RegisterType((*KernelList)(nil), "framework.KernelList")
}
func (this *KernelDef) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*KernelDef)
	if !ok {
		that2, ok := that.(KernelDef)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *KernelDef")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *KernelDef but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *KernelDef but is not nil && this == nil")
	}
	if this.Op != that1.Op {
		return fmt.Errorf("Op this(%v) Not Equal that(%v)", this.Op, that1.Op)
	}
	if this.DeviceType != that1.DeviceType {
		return fmt.Errorf("DeviceType this(%v) Not Equal that(%v)", this.DeviceType, that1.DeviceType)
	}
	if len(this.Constraint) != len(that1.Constraint) {
		return fmt.Errorf("Constraint this(%v) Not Equal that(%v)", len(this.Constraint), len(that1.Constraint))
	}
	for i := range this.Constraint {
		if !this.Constraint[i].Equal(that1.Constraint[i]) {
			return fmt.Errorf("Constraint this[%v](%v) Not Equal that[%v](%v)", i, this.Constraint[i], i, that1.Constraint[i])
		}
	}
	if len(this.HostMemoryArg) != len(that1.HostMemoryArg) {
		return fmt.Errorf("HostMemoryArg this(%v) Not Equal that(%v)", len(this.HostMemoryArg), len(that1.HostMemoryArg))
	}
	for i := range this.HostMemoryArg {
		if this.HostMemoryArg[i] != that1.HostMemoryArg[i] {
			return fmt.Errorf("HostMemoryArg this[%v](%v) Not Equal that[%v](%v)", i, this.HostMemoryArg[i], i, that1.HostMemoryArg[i])
		}
	}
	if this.Label != that1.Label {
		return fmt.Errorf("Label this(%v) Not Equal that(%v)", this.Label, that1.Label)
	}
	if this.Priority != that1.Priority {
		return fmt.Errorf("Priority this(%v) Not Equal that(%v)", this.Priority, that1.Priority)
	}
	return nil
}
func (this *KernelDef) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KernelDef)
	if !ok {
		that2, ok := that.(KernelDef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Op != that1.Op {
		return false
	}
	if this.DeviceType != that1.DeviceType {
		return false
	}
	if len(this.Constraint) != len(that1.Constraint) {
		return false
	}
	for i := range this.Constraint {
		if !this.Constraint[i].Equal(that1.Constraint[i]) {
			return false
		}
	}
	if len(this.HostMemoryArg) != len(that1.HostMemoryArg) {
		return false
	}
	for i := range this.HostMemoryArg {
		if this.HostMemoryArg[i] != that1.HostMemoryArg[i] {
			return false
		}
	}
	if this.Label != that1.Label {
		return false
	}
	if this.Priority != that1.Priority {
		return false
	}
	return true
}
func (this *KernelDef_AttrConstraint) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*KernelDef_AttrConstraint)
	if !ok {
		that2, ok := that.(KernelDef_AttrConstraint)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *KernelDef_AttrConstraint")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *KernelDef_AttrConstraint but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *KernelDef_AttrConstraint but is not nil && this == nil")
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if !this.AllowedValues.Equal(that1.AllowedValues) {
		return fmt.Errorf("AllowedValues this(%v) Not Equal that(%v)", this.AllowedValues, that1.AllowedValues)
	}
	return nil
}
func (this *KernelDef_AttrConstraint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KernelDef_AttrConstraint)
	if !ok {
		that2, ok := that.(KernelDef_AttrConstraint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.AllowedValues.Equal(that1.AllowedValues) {
		return false
	}
	return true
}
func (this *KernelList) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*KernelList)
	if !ok {
		that2, ok := that.(KernelList)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *KernelList")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *KernelList but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *KernelList but is not nil && this == nil")
	}
	if len(this.Kernel) != len(that1.Kernel) {
		return fmt.Errorf("Kernel this(%v) Not Equal that(%v)", len(this.Kernel), len(that1.Kernel))
	}
	for i := range this.Kernel {
		if !this.Kernel[i].Equal(that1.Kernel[i]) {
			return fmt.Errorf("Kernel this[%v](%v) Not Equal that[%v](%v)", i, this.Kernel[i], i, that1.Kernel[i])
		}
	}
	return nil
}
func (this *KernelList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KernelList)
	if !ok {
		that2, ok := that.(KernelList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Kernel) != len(that1.Kernel) {
		return false
	}
	for i := range this.Kernel {
		if !this.Kernel[i].Equal(that1.Kernel[i]) {
			return false
		}
	}
	return true
}
func (this *KernelDef) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&framework.KernelDef{")
	s = append(s, "Op: "+fmt.Sprintf("%#v", this.Op)+",\n")
	s = append(s, "DeviceType: "+fmt.Sprintf("%#v", this.DeviceType)+",\n")
	if this.Constraint != nil {
		s = append(s, "Constraint: "+fmt.Sprintf("%#v", this.Constraint)+",\n")
	}
	s = append(s, "HostMemoryArg: "+fmt.Sprintf("%#v", this.HostMemoryArg)+",\n")
	s = append(s, "Label: "+fmt.Sprintf("%#v", this.Label)+",\n")
	s = append(s, "Priority: "+fmt.Sprintf("%#v", this.Priority)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *KernelDef_AttrConstraint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&framework.KernelDef_AttrConstraint{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.AllowedValues != nil {
		s = append(s, "AllowedValues: "+fmt.Sprintf("%#v", this.AllowedValues)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *KernelList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&framework.KernelList{")
	if this.Kernel != nil {
		s = append(s, "Kernel: "+fmt.Sprintf("%#v", this.Kernel)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringKernelDef(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *KernelDef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KernelDef) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Op) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintKernelDef(dAtA, i, uint64(len(m.Op)))
		i += copy(dAtA[i:], m.Op)
	}
	if len(m.DeviceType) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintKernelDef(dAtA, i, uint64(len(m.DeviceType)))
		i += copy(dAtA[i:], m.DeviceType)
	}
	if len(m.Constraint) > 0 {
		for _, msg := range m.Constraint {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintKernelDef(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.HostMemoryArg) > 0 {
		for _, s := range m.HostMemoryArg {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Label) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintKernelDef(dAtA, i, uint64(len(m.Label)))
		i += copy(dAtA[i:], m.Label)
	}
	if m.Priority != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintKernelDef(dAtA, i, uint64(m.Priority))
	}
	return i, nil
}

func (m *KernelDef_AttrConstraint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KernelDef_AttrConstraint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintKernelDef(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.AllowedValues != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintKernelDef(dAtA, i, uint64(m.AllowedValues.Size()))
		n1, err := m.AllowedValues.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *KernelList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KernelList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Kernel) > 0 {
		for _, msg := range m.Kernel {
			dAtA[i] = 0xa
			i++
			i = encodeVarintKernelDef(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintKernelDef(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedKernelDef(r randyKernelDef, easy bool) *KernelDef {
	this := &KernelDef{}
	this.Op = string(randStringKernelDef(r))
	this.DeviceType = string(randStringKernelDef(r))
	if r.Intn(10) == 0 {
		v1 := r.Intn(5)
		this.Constraint = make([]*KernelDef_AttrConstraint, v1)
		for i := 0; i < v1; i++ {
			this.Constraint[i] = NewPopulatedKernelDef_AttrConstraint(r, easy)
		}
	}
	v2 := r.Intn(10)
	this.HostMemoryArg = make([]string, v2)
	for i := 0; i < v2; i++ {
		this.HostMemoryArg[i] = string(randStringKernelDef(r))
	}
	this.Label = string(randStringKernelDef(r))
	this.Priority = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Priority *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedKernelDef_AttrConstraint(r randyKernelDef, easy bool) *KernelDef_AttrConstraint {
	this := &KernelDef_AttrConstraint{}
	this.Name = string(randStringKernelDef(r))
	if r.Intn(10) == 0 {
		this.AllowedValues = NewPopulatedAttrValue(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedKernelList(r randyKernelDef, easy bool) *KernelList {
	this := &KernelList{}
	if r.Intn(10) == 0 {
		v3 := r.Intn(5)
		this.Kernel = make([]*KernelDef, v3)
		for i := 0; i < v3; i++ {
			this.Kernel[i] = NewPopulatedKernelDef(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyKernelDef interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneKernelDef(r randyKernelDef) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringKernelDef(r randyKernelDef) string {
	v4 := r.Intn(100)
	tmps := make([]rune, v4)
	for i := 0; i < v4; i++ {
		tmps[i] = randUTF8RuneKernelDef(r)
	}
	return string(tmps)
}
func randUnrecognizedKernelDef(r randyKernelDef, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldKernelDef(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldKernelDef(dAtA []byte, r randyKernelDef, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateKernelDef(dAtA, uint64(key))
		v5 := r.Int63()
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		dAtA = encodeVarintPopulateKernelDef(dAtA, uint64(v5))
	case 1:
		dAtA = encodeVarintPopulateKernelDef(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateKernelDef(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateKernelDef(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateKernelDef(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateKernelDef(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *KernelDef) Size() (n int) {
	var l int
	_ = l
	l = len(m.Op)
	if l > 0 {
		n += 1 + l + sovKernelDef(uint64(l))
	}
	l = len(m.DeviceType)
	if l > 0 {
		n += 1 + l + sovKernelDef(uint64(l))
	}
	if len(m.Constraint) > 0 {
		for _, e := range m.Constraint {
			l = e.Size()
			n += 1 + l + sovKernelDef(uint64(l))
		}
	}
	if len(m.HostMemoryArg) > 0 {
		for _, s := range m.HostMemoryArg {
			l = len(s)
			n += 1 + l + sovKernelDef(uint64(l))
		}
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovKernelDef(uint64(l))
	}
	if m.Priority != 0 {
		n += 1 + sovKernelDef(uint64(m.Priority))
	}
	return n
}

func (m *KernelDef_AttrConstraint) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovKernelDef(uint64(l))
	}
	if m.AllowedValues != nil {
		l = m.AllowedValues.Size()
		n += 1 + l + sovKernelDef(uint64(l))
	}
	return n
}

func (m *KernelList) Size() (n int) {
	var l int
	_ = l
	if len(m.Kernel) > 0 {
		for _, e := range m.Kernel {
			l = e.Size()
			n += 1 + l + sovKernelDef(uint64(l))
		}
	}
	return n
}

func sovKernelDef(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozKernelDef(x uint64) (n int) {
	return sovKernelDef(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *KernelDef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KernelDef{`,
		`Op:` + fmt.Sprintf("%v", this.Op) + `,`,
		`DeviceType:` + fmt.Sprintf("%v", this.DeviceType) + `,`,
		`Constraint:` + strings.Replace(fmt.Sprintf("%v", this.Constraint), "KernelDef_AttrConstraint", "KernelDef_AttrConstraint", 1) + `,`,
		`HostMemoryArg:` + fmt.Sprintf("%v", this.HostMemoryArg) + `,`,
		`Label:` + fmt.Sprintf("%v", this.Label) + `,`,
		`Priority:` + fmt.Sprintf("%v", this.Priority) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KernelDef_AttrConstraint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KernelDef_AttrConstraint{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`AllowedValues:` + strings.Replace(fmt.Sprintf("%v", this.AllowedValues), "AttrValue", "AttrValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KernelList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KernelList{`,
		`Kernel:` + strings.Replace(fmt.Sprintf("%v", this.Kernel), "KernelDef", "KernelDef", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringKernelDef(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *KernelDef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKernelDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KernelDef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KernelDef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKernelDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKernelDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Op = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKernelDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKernelDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constraint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKernelDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKernelDef
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Constraint = append(m.Constraint, &KernelDef_AttrConstraint{})
			if err := m.Constraint[len(m.Constraint)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostMemoryArg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKernelDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKernelDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostMemoryArg = append(m.HostMemoryArg, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKernelDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKernelDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKernelDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKernelDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKernelDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KernelDef_AttrConstraint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKernelDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttrConstraint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttrConstraint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKernelDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKernelDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKernelDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKernelDef
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AllowedValues == nil {
				m.AllowedValues = &AttrValue{}
			}
			if err := m.AllowedValues.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKernelDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKernelDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KernelList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKernelDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KernelList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KernelList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kernel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKernelDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKernelDef
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kernel = append(m.Kernel, &KernelDef{})
			if err := m.Kernel[len(m.Kernel)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKernelDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKernelDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipKernelDef(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowKernelDef
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKernelDef
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKernelDef
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthKernelDef
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowKernelDef
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipKernelDef(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthKernelDef = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowKernelDef   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("kernel_def.proto", fileDescriptor_kernel_def_e082561d00d25df9) }

var fileDescriptor_kernel_def_e082561d00d25df9 = []byte{
	// 372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0x3d, 0x6f, 0xe2, 0x40,
	0x10, 0x65, 0xcd, 0x87, 0xce, 0x83, 0xe0, 0xd0, 0x8a, 0xc2, 0x72, 0xb1, 0x67, 0x71, 0xd2, 0xc9,
	0x05, 0x32, 0x12, 0xd7, 0xdd, 0x55, 0x1c, 0xd7, 0xdd, 0xa5, 0xb1, 0xa2, 0xb4, 0xd6, 0x02, 0x6b,
	0xc7, 0xc2, 0xf6, 0x5a, 0xeb, 0x05, 0xe4, 0x2e, 0x3f, 0x21, 0x3f, 0x23, 0x3f, 0x21, 0x55, 0xea,
	0x94, 0x29, 0x53, 0x62, 0xe7, 0x0f, 0xa4, 0x4c, 0x19, 0x79, 0x8d, 0x2c, 0x22, 0xa5, 0x9b, 0xf7,
	0xe6, 0xed, 0xec, 0xbc, 0x37, 0x30, 0xda, 0x32, 0x91, 0xb0, 0xc8, 0xdb, 0x30, 0xdf, 0x49, 0x05,
	0x97, 0x1c, 0xeb, 0xbe, 0xa0, 0x31, 0x3b, 0x70, 0xb1, 0x35, 0x27, 0x01, 0x0f, 0xf8, 0x4c, 0xd1,
	0xab, 0x9d, 0x3f, 0xab, 0x90, 0x02, 0xaa, 0xaa, 0xe5, 0xe6, 0x88, 0x4a, 0x29, 0xbc, 0x3d, 0x8d,
	0x76, 0xac, 0x66, 0x26, 0x0f, 0x1a, 0xe8, 0xff, 0xd4, 0xd4, 0xbf, 0xcc, 0xc7, 0x43, 0xd0, 0x78,
	0x6a, 0x20, 0x0b, 0xd9, 0xba, 0xab, 0xf1, 0x14, 0x7f, 0x83, 0xfe, 0x86, 0xed, 0xc3, 0x35, 0xf3,
	0x64, 0x9e, 0x32, 0x43, 0x53, 0x0d, 0xa8, 0xa9, 0xcb, 0x3c, 0x65, 0x78, 0x09, 0xb0, 0xe6, 0x49,
	0x26, 0x05, 0x0d, 0x13, 0x69, 0xb4, 0xad, 0xb6, 0xdd, 0x9f, 0x7f, 0x77, 0x9a, 0xa5, 0x9c, 0x66,
	0xb4, 0xb3, 0x90, 0x52, 0x2c, 0x1b, 0xa9, 0x7b, 0xf6, 0x0c, 0xff, 0x80, 0xaf, 0xd7, 0x3c, 0x93,
	0x5e, 0xcc, 0x62, 0x2e, 0x72, 0x8f, 0x8a, 0xc0, 0xe8, 0x58, 0x6d, 0x5b, 0x77, 0x07, 0x15, 0x7d,
	0xa1, 0xd8, 0x85, 0x08, 0xf0, 0x18, 0xba, 0x11, 0x5d, 0xb1, 0xc8, 0xe8, 0xaa, 0x3d, 0x6a, 0x80,
	0x4d, 0xf8, 0x92, 0x8a, 0x90, 0x8b, 0x50, 0xe6, 0x46, 0xcf, 0x42, 0x76, 0xd7, 0x6d, 0xb0, 0x49,
	0x61, 0xf8, 0xf1, 0x5f, 0x8c, 0xa1, 0x93, 0xd0, 0x98, 0x9d, 0x3c, 0xaa, 0x1a, 0xff, 0x86, 0x21,
	0x8d, 0x22, 0x7e, 0x60, 0x9b, 0x3a, 0x9a, 0x4c, 0x19, 0xed, 0xcf, 0xc7, 0x67, 0x46, 0xaa, 0x31,
	0x57, 0x55, 0xd3, 0x1d, 0x9c, 0xb4, 0x0a, 0x65, 0x93, 0x5f, 0x00, 0xb5, 0xc9, 0xff, 0x61, 0x26,
	0xf1, 0x14, 0x7a, 0xf5, 0x8d, 0x0c, 0xa4, 0xb2, 0x18, 0x7f, 0x96, 0x85, 0x7b, 0xd2, 0xfc, 0x99,
	0x3e, 0x17, 0xa4, 0x75, 0x2c, 0x08, 0x7a, 0x2d, 0x08, 0x7a, 0x2b, 0x08, 0xba, 0x29, 0x09, 0xba,
	0x2b, 0x09, 0xba, 0x2f, 0x09, 0x7a, 0x2c, 0x09, 0x7a, 0x2a, 0x09, 0x3a, 0x96, 0x04, 0xdd, 0xbe,
	0x90, 0xd6, 0xaa, 0xa7, 0x2e, 0xf6, 0xf3, 0x3d, 0x00, 0x00, 0xff, 0xff, 0xde, 0x38, 0x54, 0x9c,
	0x06, 0x02, 0x00, 0x00,
}

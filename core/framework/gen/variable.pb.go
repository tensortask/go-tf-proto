// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: variable.proto

package framework

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Protocol buffer representing a Variable.
type VariableDef struct {
	// Name of the variable tensor.
	VariableName string `protobuf:"bytes,1,opt,name=variable_name,json=variableName,proto3" json:"variable_name,omitempty"`
	// Name of the tensor holding the variable's initial value.
	InitialValueName string `protobuf:"bytes,6,opt,name=initial_value_name,json=initialValueName,proto3" json:"initial_value_name,omitempty"`
	// Name of the initializer op.
	InitializerName string `protobuf:"bytes,2,opt,name=initializer_name,json=initializerName,proto3" json:"initializer_name,omitempty"`
	// Name of the snapshot tensor.
	SnapshotName string `protobuf:"bytes,3,opt,name=snapshot_name,json=snapshotName,proto3" json:"snapshot_name,omitempty"`
	// Support for saving variables as slices of a larger variable.
	SaveSliceInfoDef *SaveSliceInfoDef `protobuf:"bytes,4,opt,name=save_slice_info_def,json=saveSliceInfoDef" json:"save_slice_info_def,omitempty"`
	// Whether to represent this as a ResourceVariable.
	IsResource bool `protobuf:"varint,5,opt,name=is_resource,json=isResource,proto3" json:"is_resource,omitempty"`
	// Whether this variable should be trained.
	Trainable            bool     `protobuf:"varint,7,opt,name=trainable,proto3" json:"trainable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VariableDef) Reset()      { *m = VariableDef{} }
func (*VariableDef) ProtoMessage() {}
func (*VariableDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_variable_eb9a2c1f11f79ea9, []int{0}
}
func (m *VariableDef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VariableDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VariableDef.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *VariableDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VariableDef.Merge(dst, src)
}
func (m *VariableDef) XXX_Size() int {
	return m.Size()
}
func (m *VariableDef) XXX_DiscardUnknown() {
	xxx_messageInfo_VariableDef.DiscardUnknown(m)
}

var xxx_messageInfo_VariableDef proto.InternalMessageInfo

func (m *VariableDef) GetVariableName() string {
	if m != nil {
		return m.VariableName
	}
	return ""
}

func (m *VariableDef) GetInitialValueName() string {
	if m != nil {
		return m.InitialValueName
	}
	return ""
}

func (m *VariableDef) GetInitializerName() string {
	if m != nil {
		return m.InitializerName
	}
	return ""
}

func (m *VariableDef) GetSnapshotName() string {
	if m != nil {
		return m.SnapshotName
	}
	return ""
}

func (m *VariableDef) GetSaveSliceInfoDef() *SaveSliceInfoDef {
	if m != nil {
		return m.SaveSliceInfoDef
	}
	return nil
}

func (m *VariableDef) GetIsResource() bool {
	if m != nil {
		return m.IsResource
	}
	return false
}

func (m *VariableDef) GetTrainable() bool {
	if m != nil {
		return m.Trainable
	}
	return false
}

type SaveSliceInfoDef struct {
	// Name of the full variable of which this is a slice.
	FullName string `protobuf:"bytes,1,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	// Shape of the full variable.
	FullShape []int64 `protobuf:"varint,2,rep,packed,name=full_shape,json=fullShape" json:"full_shape,omitempty"`
	// Offset of this variable into the full variable.
	VarOffset []int64 `protobuf:"varint,3,rep,packed,name=var_offset,json=varOffset" json:"var_offset,omitempty"`
	// Shape of this variable.
	VarShape             []int64  `protobuf:"varint,4,rep,packed,name=var_shape,json=varShape" json:"var_shape,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SaveSliceInfoDef) Reset()      { *m = SaveSliceInfoDef{} }
func (*SaveSliceInfoDef) ProtoMessage() {}
func (*SaveSliceInfoDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_variable_eb9a2c1f11f79ea9, []int{1}
}
func (m *SaveSliceInfoDef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveSliceInfoDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveSliceInfoDef.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SaveSliceInfoDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveSliceInfoDef.Merge(dst, src)
}
func (m *SaveSliceInfoDef) XXX_Size() int {
	return m.Size()
}
func (m *SaveSliceInfoDef) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveSliceInfoDef.DiscardUnknown(m)
}

var xxx_messageInfo_SaveSliceInfoDef proto.InternalMessageInfo

func (m *SaveSliceInfoDef) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *SaveSliceInfoDef) GetFullShape() []int64 {
	if m != nil {
		return m.FullShape
	}
	return nil
}

func (m *SaveSliceInfoDef) GetVarOffset() []int64 {
	if m != nil {
		return m.VarOffset
	}
	return nil
}

func (m *SaveSliceInfoDef) GetVarShape() []int64 {
	if m != nil {
		return m.VarShape
	}
	return nil
}

func init() {
	proto.RegisterType((*VariableDef)(nil), "framework.VariableDef")
	proto.RegisterType((*SaveSliceInfoDef)(nil), "framework.SaveSliceInfoDef")
}
func (this *VariableDef) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*VariableDef)
	if !ok {
		that2, ok := that.(VariableDef)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *VariableDef")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *VariableDef but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *VariableDef but is not nil && this == nil")
	}
	if this.VariableName != that1.VariableName {
		return fmt.Errorf("VariableName this(%v) Not Equal that(%v)", this.VariableName, that1.VariableName)
	}
	if this.InitialValueName != that1.InitialValueName {
		return fmt.Errorf("InitialValueName this(%v) Not Equal that(%v)", this.InitialValueName, that1.InitialValueName)
	}
	if this.InitializerName != that1.InitializerName {
		return fmt.Errorf("InitializerName this(%v) Not Equal that(%v)", this.InitializerName, that1.InitializerName)
	}
	if this.SnapshotName != that1.SnapshotName {
		return fmt.Errorf("SnapshotName this(%v) Not Equal that(%v)", this.SnapshotName, that1.SnapshotName)
	}
	if !this.SaveSliceInfoDef.Equal(that1.SaveSliceInfoDef) {
		return fmt.Errorf("SaveSliceInfoDef this(%v) Not Equal that(%v)", this.SaveSliceInfoDef, that1.SaveSliceInfoDef)
	}
	if this.IsResource != that1.IsResource {
		return fmt.Errorf("IsResource this(%v) Not Equal that(%v)", this.IsResource, that1.IsResource)
	}
	if this.Trainable != that1.Trainable {
		return fmt.Errorf("Trainable this(%v) Not Equal that(%v)", this.Trainable, that1.Trainable)
	}
	return nil
}
func (this *VariableDef) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VariableDef)
	if !ok {
		that2, ok := that.(VariableDef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VariableName != that1.VariableName {
		return false
	}
	if this.InitialValueName != that1.InitialValueName {
		return false
	}
	if this.InitializerName != that1.InitializerName {
		return false
	}
	if this.SnapshotName != that1.SnapshotName {
		return false
	}
	if !this.SaveSliceInfoDef.Equal(that1.SaveSliceInfoDef) {
		return false
	}
	if this.IsResource != that1.IsResource {
		return false
	}
	if this.Trainable != that1.Trainable {
		return false
	}
	return true
}
func (this *SaveSliceInfoDef) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SaveSliceInfoDef)
	if !ok {
		that2, ok := that.(SaveSliceInfoDef)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SaveSliceInfoDef")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SaveSliceInfoDef but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SaveSliceInfoDef but is not nil && this == nil")
	}
	if this.FullName != that1.FullName {
		return fmt.Errorf("FullName this(%v) Not Equal that(%v)", this.FullName, that1.FullName)
	}
	if len(this.FullShape) != len(that1.FullShape) {
		return fmt.Errorf("FullShape this(%v) Not Equal that(%v)", len(this.FullShape), len(that1.FullShape))
	}
	for i := range this.FullShape {
		if this.FullShape[i] != that1.FullShape[i] {
			return fmt.Errorf("FullShape this[%v](%v) Not Equal that[%v](%v)", i, this.FullShape[i], i, that1.FullShape[i])
		}
	}
	if len(this.VarOffset) != len(that1.VarOffset) {
		return fmt.Errorf("VarOffset this(%v) Not Equal that(%v)", len(this.VarOffset), len(that1.VarOffset))
	}
	for i := range this.VarOffset {
		if this.VarOffset[i] != that1.VarOffset[i] {
			return fmt.Errorf("VarOffset this[%v](%v) Not Equal that[%v](%v)", i, this.VarOffset[i], i, that1.VarOffset[i])
		}
	}
	if len(this.VarShape) != len(that1.VarShape) {
		return fmt.Errorf("VarShape this(%v) Not Equal that(%v)", len(this.VarShape), len(that1.VarShape))
	}
	for i := range this.VarShape {
		if this.VarShape[i] != that1.VarShape[i] {
			return fmt.Errorf("VarShape this[%v](%v) Not Equal that[%v](%v)", i, this.VarShape[i], i, that1.VarShape[i])
		}
	}
	return nil
}
func (this *SaveSliceInfoDef) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SaveSliceInfoDef)
	if !ok {
		that2, ok := that.(SaveSliceInfoDef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FullName != that1.FullName {
		return false
	}
	if len(this.FullShape) != len(that1.FullShape) {
		return false
	}
	for i := range this.FullShape {
		if this.FullShape[i] != that1.FullShape[i] {
			return false
		}
	}
	if len(this.VarOffset) != len(that1.VarOffset) {
		return false
	}
	for i := range this.VarOffset {
		if this.VarOffset[i] != that1.VarOffset[i] {
			return false
		}
	}
	if len(this.VarShape) != len(that1.VarShape) {
		return false
	}
	for i := range this.VarShape {
		if this.VarShape[i] != that1.VarShape[i] {
			return false
		}
	}
	return true
}
func (this *VariableDef) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&framework.VariableDef{")
	s = append(s, "VariableName: "+fmt.Sprintf("%#v", this.VariableName)+",\n")
	s = append(s, "InitialValueName: "+fmt.Sprintf("%#v", this.InitialValueName)+",\n")
	s = append(s, "InitializerName: "+fmt.Sprintf("%#v", this.InitializerName)+",\n")
	s = append(s, "SnapshotName: "+fmt.Sprintf("%#v", this.SnapshotName)+",\n")
	if this.SaveSliceInfoDef != nil {
		s = append(s, "SaveSliceInfoDef: "+fmt.Sprintf("%#v", this.SaveSliceInfoDef)+",\n")
	}
	s = append(s, "IsResource: "+fmt.Sprintf("%#v", this.IsResource)+",\n")
	s = append(s, "Trainable: "+fmt.Sprintf("%#v", this.Trainable)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SaveSliceInfoDef) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&framework.SaveSliceInfoDef{")
	s = append(s, "FullName: "+fmt.Sprintf("%#v", this.FullName)+",\n")
	s = append(s, "FullShape: "+fmt.Sprintf("%#v", this.FullShape)+",\n")
	s = append(s, "VarOffset: "+fmt.Sprintf("%#v", this.VarOffset)+",\n")
	s = append(s, "VarShape: "+fmt.Sprintf("%#v", this.VarShape)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringVariable(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *VariableDef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VariableDef) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VariableName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVariable(dAtA, i, uint64(len(m.VariableName)))
		i += copy(dAtA[i:], m.VariableName)
	}
	if len(m.InitializerName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVariable(dAtA, i, uint64(len(m.InitializerName)))
		i += copy(dAtA[i:], m.InitializerName)
	}
	if len(m.SnapshotName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVariable(dAtA, i, uint64(len(m.SnapshotName)))
		i += copy(dAtA[i:], m.SnapshotName)
	}
	if m.SaveSliceInfoDef != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintVariable(dAtA, i, uint64(m.SaveSliceInfoDef.Size()))
		n1, err := m.SaveSliceInfoDef.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.IsResource {
		dAtA[i] = 0x28
		i++
		if m.IsResource {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.InitialValueName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintVariable(dAtA, i, uint64(len(m.InitialValueName)))
		i += copy(dAtA[i:], m.InitialValueName)
	}
	if m.Trainable {
		dAtA[i] = 0x38
		i++
		if m.Trainable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SaveSliceInfoDef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveSliceInfoDef) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FullName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVariable(dAtA, i, uint64(len(m.FullName)))
		i += copy(dAtA[i:], m.FullName)
	}
	if len(m.FullShape) > 0 {
		dAtA3 := make([]byte, len(m.FullShape)*10)
		var j2 int
		for _, num1 := range m.FullShape {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintVariable(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	if len(m.VarOffset) > 0 {
		dAtA5 := make([]byte, len(m.VarOffset)*10)
		var j4 int
		for _, num1 := range m.VarOffset {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVariable(dAtA, i, uint64(j4))
		i += copy(dAtA[i:], dAtA5[:j4])
	}
	if len(m.VarShape) > 0 {
		dAtA7 := make([]byte, len(m.VarShape)*10)
		var j6 int
		for _, num1 := range m.VarShape {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintVariable(dAtA, i, uint64(j6))
		i += copy(dAtA[i:], dAtA7[:j6])
	}
	return i, nil
}

func encodeVarintVariable(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedVariableDef(r randyVariable, easy bool) *VariableDef {
	this := &VariableDef{}
	this.VariableName = string(randStringVariable(r))
	this.InitializerName = string(randStringVariable(r))
	this.SnapshotName = string(randStringVariable(r))
	if r.Intn(10) != 0 {
		this.SaveSliceInfoDef = NewPopulatedSaveSliceInfoDef(r, easy)
	}
	this.IsResource = bool(bool(r.Intn(2) == 0))
	this.InitialValueName = string(randStringVariable(r))
	this.Trainable = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSaveSliceInfoDef(r randyVariable, easy bool) *SaveSliceInfoDef {
	this := &SaveSliceInfoDef{}
	this.FullName = string(randStringVariable(r))
	v1 := r.Intn(10)
	this.FullShape = make([]int64, v1)
	for i := 0; i < v1; i++ {
		this.FullShape[i] = int64(r.Int63())
		if r.Intn(2) == 0 {
			this.FullShape[i] *= -1
		}
	}
	v2 := r.Intn(10)
	this.VarOffset = make([]int64, v2)
	for i := 0; i < v2; i++ {
		this.VarOffset[i] = int64(r.Int63())
		if r.Intn(2) == 0 {
			this.VarOffset[i] *= -1
		}
	}
	v3 := r.Intn(10)
	this.VarShape = make([]int64, v3)
	for i := 0; i < v3; i++ {
		this.VarShape[i] = int64(r.Int63())
		if r.Intn(2) == 0 {
			this.VarShape[i] *= -1
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyVariable interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneVariable(r randyVariable) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringVariable(r randyVariable) string {
	v4 := r.Intn(100)
	tmps := make([]rune, v4)
	for i := 0; i < v4; i++ {
		tmps[i] = randUTF8RuneVariable(r)
	}
	return string(tmps)
}
func randUnrecognizedVariable(r randyVariable, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldVariable(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldVariable(dAtA []byte, r randyVariable, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateVariable(dAtA, uint64(key))
		v5 := r.Int63()
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		dAtA = encodeVarintPopulateVariable(dAtA, uint64(v5))
	case 1:
		dAtA = encodeVarintPopulateVariable(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateVariable(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateVariable(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateVariable(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateVariable(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *VariableDef) Size() (n int) {
	var l int
	_ = l
	l = len(m.VariableName)
	if l > 0 {
		n += 1 + l + sovVariable(uint64(l))
	}
	l = len(m.InitializerName)
	if l > 0 {
		n += 1 + l + sovVariable(uint64(l))
	}
	l = len(m.SnapshotName)
	if l > 0 {
		n += 1 + l + sovVariable(uint64(l))
	}
	if m.SaveSliceInfoDef != nil {
		l = m.SaveSliceInfoDef.Size()
		n += 1 + l + sovVariable(uint64(l))
	}
	if m.IsResource {
		n += 2
	}
	l = len(m.InitialValueName)
	if l > 0 {
		n += 1 + l + sovVariable(uint64(l))
	}
	if m.Trainable {
		n += 2
	}
	return n
}

func (m *SaveSliceInfoDef) Size() (n int) {
	var l int
	_ = l
	l = len(m.FullName)
	if l > 0 {
		n += 1 + l + sovVariable(uint64(l))
	}
	if len(m.FullShape) > 0 {
		l = 0
		for _, e := range m.FullShape {
			l += sovVariable(uint64(e))
		}
		n += 1 + sovVariable(uint64(l)) + l
	}
	if len(m.VarOffset) > 0 {
		l = 0
		for _, e := range m.VarOffset {
			l += sovVariable(uint64(e))
		}
		n += 1 + sovVariable(uint64(l)) + l
	}
	if len(m.VarShape) > 0 {
		l = 0
		for _, e := range m.VarShape {
			l += sovVariable(uint64(e))
		}
		n += 1 + sovVariable(uint64(l)) + l
	}
	return n
}

func sovVariable(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozVariable(x uint64) (n int) {
	return sovVariable(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *VariableDef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VariableDef{`,
		`VariableName:` + fmt.Sprintf("%v", this.VariableName) + `,`,
		`InitializerName:` + fmt.Sprintf("%v", this.InitializerName) + `,`,
		`SnapshotName:` + fmt.Sprintf("%v", this.SnapshotName) + `,`,
		`SaveSliceInfoDef:` + strings.Replace(fmt.Sprintf("%v", this.SaveSliceInfoDef), "SaveSliceInfoDef", "SaveSliceInfoDef", 1) + `,`,
		`IsResource:` + fmt.Sprintf("%v", this.IsResource) + `,`,
		`InitialValueName:` + fmt.Sprintf("%v", this.InitialValueName) + `,`,
		`Trainable:` + fmt.Sprintf("%v", this.Trainable) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SaveSliceInfoDef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SaveSliceInfoDef{`,
		`FullName:` + fmt.Sprintf("%v", this.FullName) + `,`,
		`FullShape:` + fmt.Sprintf("%v", this.FullShape) + `,`,
		`VarOffset:` + fmt.Sprintf("%v", this.VarOffset) + `,`,
		`VarShape:` + fmt.Sprintf("%v", this.VarShape) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringVariable(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *VariableDef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVariable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VariableDef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VariableDef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VariableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVariable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVariable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VariableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitializerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVariable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVariable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitializerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVariable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVariable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SnapshotName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaveSliceInfoDef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVariable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVariable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SaveSliceInfoDef == nil {
				m.SaveSliceInfoDef = &SaveSliceInfoDef{}
			}
			if err := m.SaveSliceInfoDef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsResource", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVariable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsResource = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialValueName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVariable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVariable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitialValueName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trainable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVariable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Trainable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipVariable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVariable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveSliceInfoDef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVariable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveSliceInfoDef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveSliceInfoDef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVariable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVariable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FullName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVariable
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FullShape = append(m.FullShape, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVariable
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthVariable
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVariable
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FullShape = append(m.FullShape, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FullShape", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVariable
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.VarOffset = append(m.VarOffset, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVariable
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthVariable
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVariable
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.VarOffset = append(m.VarOffset, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field VarOffset", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVariable
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.VarShape = append(m.VarShape, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVariable
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthVariable
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVariable
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.VarShape = append(m.VarShape, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field VarShape", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVariable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVariable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVariable(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVariable
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVariable
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVariable
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthVariable
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVariable
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVariable(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVariable = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVariable   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("variable.proto", fileDescriptor_variable_eb9a2c1f11f79ea9) }

var fileDescriptor_variable_eb9a2c1f11f79ea9 = []byte{
	// 390 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xb1, 0x6e, 0xda, 0x40,
	0x18, 0xc7, 0x39, 0x4c, 0x29, 0x3e, 0x4a, 0x8b, 0xdc, 0xc5, 0x2a, 0xed, 0x15, 0xc1, 0xe2, 0x4a,
	0x08, 0xa4, 0xf6, 0x0d, 0x2a, 0x96, 0x64, 0x48, 0x24, 0x23, 0xb1, 0x5a, 0x07, 0xb9, 0x83, 0x53,
	0x8c, 0x0f, 0xdd, 0xd9, 0x8e, 0x94, 0x29, 0x73, 0xa6, 0x3c, 0x46, 0x1e, 0x21, 0x52, 0x5e, 0x20,
	0x63, 0xc6, 0x8c, 0xd8, 0x79, 0x81, 0x8c, 0x19, 0xa3, 0xfb, 0x6c, 0x27, 0x88, 0xcd, 0xf7, 0xfb,
	0xff, 0xee, 0xaf, 0xef, 0x3b, 0xe3, 0xaf, 0x29, 0x55, 0x82, 0x2e, 0x42, 0x36, 0xde, 0x2a, 0x19,
	0x4b, 0xc7, 0xe6, 0x8a, 0x6e, 0xd8, 0x85, 0x54, 0xe7, 0x3f, 0x06, 0x2b, 0xb9, 0x92, 0x13, 0xc0,
	0x8b, 0x84, 0x4f, 0xcc, 0x09, 0x0e, 0xf0, 0x55, 0xe8, 0x83, 0xfb, 0x3a, 0x6e, 0xcf, 0xcb, 0x86,
	0x29, 0xe3, 0xce, 0x10, 0x77, 0xaa, 0xc2, 0x20, 0xa2, 0x1b, 0xe6, 0xa2, 0x3e, 0xf2, 0x6c, 0xff,
	0x4b, 0x05, 0x4f, 0xe8, 0x86, 0x39, 0x7f, 0x70, 0x57, 0x44, 0x22, 0x16, 0x34, 0x14, 0x97, 0x4c,
	0x15, 0x5e, 0x1d, 0xbc, 0x6f, 0x7b, 0x1c, 0xd4, 0x21, 0xee, 0xe8, 0x88, 0x6e, 0xf5, 0x5a, 0xc6,
	0x85, 0x67, 0x15, 0x7d, 0x15, 0x04, 0xe9, 0x18, 0x7f, 0xd7, 0x34, 0x65, 0x81, 0x0e, 0xc5, 0x92,
	0x05, 0x22, 0xe2, 0x32, 0x38, 0x63, 0xdc, 0x6d, 0xf4, 0x91, 0xd7, 0xfe, 0xdb, 0x1b, 0xbf, 0x6f,
	0x34, 0x9e, 0xd1, 0x94, 0xcd, 0x8c, 0x74, 0x14, 0x71, 0x39, 0x65, 0xdc, 0xef, 0xea, 0x03, 0xe2,
	0xfc, 0xc6, 0x6d, 0xa1, 0x03, 0xc5, 0xb4, 0x4c, 0xd4, 0x92, 0xb9, 0x9f, 0xfa, 0xc8, 0x6b, 0xf9,
	0x58, 0x68, 0xbf, 0x24, 0xce, 0x08, 0x3b, 0xe5, 0x90, 0x41, 0x4a, 0xc3, 0xa4, 0x5c, 0xb3, 0x09,
	0x63, 0x55, 0x6b, 0xcd, 0x4d, 0x00, 0xa3, 0xfd, 0xc4, 0x76, 0xac, 0xa8, 0x88, 0xcc, 0xee, 0xee,
	0x67, 0x28, 0xfb, 0x00, 0x83, 0x6b, 0x84, 0xbb, 0x87, 0x33, 0x39, 0x3d, 0x6c, 0xf3, 0x24, 0x0c,
	0xf7, 0x9f, 0xaf, 0x65, 0x00, 0xf4, 0xfd, 0xc2, 0x18, 0x42, 0xbd, 0xa6, 0x5b, 0xf3, 0x68, 0x96,
	0x67, 0xf9, 0xa0, 0xcf, 0x0c, 0x30, 0x71, 0x4a, 0x55, 0x20, 0x39, 0xd7, 0x2c, 0x76, 0xad, 0x22,
	0x4e, 0xa9, 0x3a, 0x05, 0x60, 0xaa, 0x4d, 0x5c, 0x5c, 0x6e, 0x40, 0xda, 0x4a, 0xa9, 0x82, 0xbb,
	0xff, 0x47, 0x4f, 0x19, 0xa9, 0xed, 0x32, 0x82, 0x5e, 0x32, 0x82, 0x5e, 0x33, 0x82, 0xae, 0x72,
	0x82, 0x6e, 0x73, 0x82, 0xee, 0x72, 0x82, 0x1e, 0x72, 0x82, 0x1e, 0x73, 0x82, 0x76, 0x39, 0x41,
	0x37, 0xcf, 0xa4, 0xb6, 0x68, 0xc2, 0xff, 0xff, 0xf7, 0x16, 0x00, 0x00, 0xff, 0xff, 0x58, 0x4f,
	0x2a, 0xb7, 0x40, 0x02, 0x00, 0x00,
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node_def.proto

package framework

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type NodeDef struct {
	// The name given to this operator. Used for naming inputs,
	// logging, visualization, etc.  Unique within a single GraphDef.
	// Must match the regexp "[A-Za-z0-9.][A-Za-z0-9_./]*".
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The operation name.  There may be custom parameters in attrs.
	// Op names starting with an underscore are reserved for internal use.
	Op string `protobuf:"bytes,2,opt,name=op,proto3" json:"op,omitempty"`
	// Each input is "node:src_output" with "node" being a string name and
	// "src_output" indicating which output tensor to use from "node". If
	// "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
	// may optionally be followed by control inputs that have the format
	// "^node".
	Input []string `protobuf:"bytes,3,rep,name=input" json:"input,omitempty"`
	// A (possibly partial) specification for the device on which this
	// node should be placed.
	// The expected syntax for this string is as follows:
	//
	// DEVICE_SPEC ::= PARTIAL_SPEC
	//
	// PARTIAL_SPEC ::= ("/" CONSTRAINT) *
	// CONSTRAINT ::= ("job:" JOB_NAME)
	//              | ("replica:" [1-9][0-9]*)
	//              | ("task:" [1-9][0-9]*)
	//              | ("device:" [A-Za-z]* ":" ([1-9][0-9]* | "*") )
	//
	// Valid values for this string include:
	// * "/job:worker/replica:0/task:1/device:GPU:3"  (full specification)
	// * "/job:worker/device:GPU:3"                   (partial specification)
	// * ""                                    (no specification)
	//
	// If the constraints do not resolve to a single device (or if this
	// field is empty or not present), the runtime will attempt to
	// choose a device automatically.
	Device string `protobuf:"bytes,4,opt,name=device,proto3" json:"device,omitempty"`
	// Operation-specific graph-construction-time configuration.
	// Note that this should include all attrs defined in the
	// corresponding OpDef, including those with a value matching
	// the default -- this allows the default to change and makes
	// NodeDefs easier to interpret on their own.  However, if
	// an attr with a default is not specified in this list, the
	// default will be used.
	// The "names" (keys) must match the regexp "[a-z][a-z0-9_]+" (and
	// one of the names from the corresponding OpDef's attr field).
	// The values must have a type matching the corresponding OpDef
	// attr's type field.
	// TODO(josh11b): Add some examples here showing best practices.
	Attr map[string]*AttrValue `protobuf:"bytes,5,rep,name=attr" json:"attr,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	// This stores debug information associated with the node.
	ExperimentalDebugInfo *NodeDef_ExperimentalDebugInfo `protobuf:"bytes,6,opt,name=experimental_debug_info,json=experimentalDebugInfo" json:"experimental_debug_info,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                       `json:"-"`
	XXX_sizecache         int32                          `json:"-"`
}

func (m *NodeDef) Reset()      { *m = NodeDef{} }
func (*NodeDef) ProtoMessage() {}
func (*NodeDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_node_def_0717a24f2af17d9e, []int{0}
}
func (m *NodeDef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeDef.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *NodeDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeDef.Merge(dst, src)
}
func (m *NodeDef) XXX_Size() int {
	return m.Size()
}
func (m *NodeDef) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeDef.DiscardUnknown(m)
}

var xxx_messageInfo_NodeDef proto.InternalMessageInfo

func (m *NodeDef) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NodeDef) GetOp() string {
	if m != nil {
		return m.Op
	}
	return ""
}

func (m *NodeDef) GetInput() []string {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *NodeDef) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *NodeDef) GetAttr() map[string]*AttrValue {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *NodeDef) GetExperimentalDebugInfo() *NodeDef_ExperimentalDebugInfo {
	if m != nil {
		return m.ExperimentalDebugInfo
	}
	return nil
}

type NodeDef_ExperimentalDebugInfo struct {
	// Opaque string inserted into error messages created by the runtime.
	//
	// This is intended to store the list of names of the nodes from the
	// original graph that this node was derived. For example if this node, say
	// C, was result of a fusion of 2 nodes A and B, then 'original_node' would
	// be {A, B}. This information can be used to map errors originating at the
	// current node to some top level source code.
	OriginalNodeNames    []string `protobuf:"bytes,1,rep,name=original_node_names,json=originalNodeNames" json:"original_node_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeDef_ExperimentalDebugInfo) Reset()      { *m = NodeDef_ExperimentalDebugInfo{} }
func (*NodeDef_ExperimentalDebugInfo) ProtoMessage() {}
func (*NodeDef_ExperimentalDebugInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_node_def_0717a24f2af17d9e, []int{0, 1}
}
func (m *NodeDef_ExperimentalDebugInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeDef_ExperimentalDebugInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeDef_ExperimentalDebugInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *NodeDef_ExperimentalDebugInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeDef_ExperimentalDebugInfo.Merge(dst, src)
}
func (m *NodeDef_ExperimentalDebugInfo) XXX_Size() int {
	return m.Size()
}
func (m *NodeDef_ExperimentalDebugInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeDef_ExperimentalDebugInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NodeDef_ExperimentalDebugInfo proto.InternalMessageInfo

func (m *NodeDef_ExperimentalDebugInfo) GetOriginalNodeNames() []string {
	if m != nil {
		return m.OriginalNodeNames
	}
	return nil
}

func init() {
	proto.RegisterType((*NodeDef)(nil), "framework.NodeDef")
	proto.RegisterMapType((map[string]*AttrValue)(nil), "framework.NodeDef.AttrEntry")
	proto.RegisterType((*NodeDef_ExperimentalDebugInfo)(nil), "framework.NodeDef.ExperimentalDebugInfo")
}
func (this *NodeDef) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NodeDef)
	if !ok {
		that2, ok := that.(NodeDef)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *NodeDef")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NodeDef but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NodeDef but is not nil && this == nil")
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Op != that1.Op {
		return fmt.Errorf("Op this(%v) Not Equal that(%v)", this.Op, that1.Op)
	}
	if len(this.Input) != len(that1.Input) {
		return fmt.Errorf("Input this(%v) Not Equal that(%v)", len(this.Input), len(that1.Input))
	}
	for i := range this.Input {
		if this.Input[i] != that1.Input[i] {
			return fmt.Errorf("Input this[%v](%v) Not Equal that[%v](%v)", i, this.Input[i], i, that1.Input[i])
		}
	}
	if this.Device != that1.Device {
		return fmt.Errorf("Device this(%v) Not Equal that(%v)", this.Device, that1.Device)
	}
	if len(this.Attr) != len(that1.Attr) {
		return fmt.Errorf("Attr this(%v) Not Equal that(%v)", len(this.Attr), len(that1.Attr))
	}
	for i := range this.Attr {
		if !this.Attr[i].Equal(that1.Attr[i]) {
			return fmt.Errorf("Attr this[%v](%v) Not Equal that[%v](%v)", i, this.Attr[i], i, that1.Attr[i])
		}
	}
	if !this.ExperimentalDebugInfo.Equal(that1.ExperimentalDebugInfo) {
		return fmt.Errorf("ExperimentalDebugInfo this(%v) Not Equal that(%v)", this.ExperimentalDebugInfo, that1.ExperimentalDebugInfo)
	}
	return nil
}
func (this *NodeDef) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeDef)
	if !ok {
		that2, ok := that.(NodeDef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Op != that1.Op {
		return false
	}
	if len(this.Input) != len(that1.Input) {
		return false
	}
	for i := range this.Input {
		if this.Input[i] != that1.Input[i] {
			return false
		}
	}
	if this.Device != that1.Device {
		return false
	}
	if len(this.Attr) != len(that1.Attr) {
		return false
	}
	for i := range this.Attr {
		if !this.Attr[i].Equal(that1.Attr[i]) {
			return false
		}
	}
	if !this.ExperimentalDebugInfo.Equal(that1.ExperimentalDebugInfo) {
		return false
	}
	return true
}
func (this *NodeDef_ExperimentalDebugInfo) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NodeDef_ExperimentalDebugInfo)
	if !ok {
		that2, ok := that.(NodeDef_ExperimentalDebugInfo)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *NodeDef_ExperimentalDebugInfo")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NodeDef_ExperimentalDebugInfo but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NodeDef_ExperimentalDebugInfo but is not nil && this == nil")
	}
	if len(this.OriginalNodeNames) != len(that1.OriginalNodeNames) {
		return fmt.Errorf("OriginalNodeNames this(%v) Not Equal that(%v)", len(this.OriginalNodeNames), len(that1.OriginalNodeNames))
	}
	for i := range this.OriginalNodeNames {
		if this.OriginalNodeNames[i] != that1.OriginalNodeNames[i] {
			return fmt.Errorf("OriginalNodeNames this[%v](%v) Not Equal that[%v](%v)", i, this.OriginalNodeNames[i], i, that1.OriginalNodeNames[i])
		}
	}
	return nil
}
func (this *NodeDef_ExperimentalDebugInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeDef_ExperimentalDebugInfo)
	if !ok {
		that2, ok := that.(NodeDef_ExperimentalDebugInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.OriginalNodeNames) != len(that1.OriginalNodeNames) {
		return false
	}
	for i := range this.OriginalNodeNames {
		if this.OriginalNodeNames[i] != that1.OriginalNodeNames[i] {
			return false
		}
	}
	return true
}
func (this *NodeDef) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&framework.NodeDef{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Op: "+fmt.Sprintf("%#v", this.Op)+",\n")
	s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	s = append(s, "Device: "+fmt.Sprintf("%#v", this.Device)+",\n")
	keysForAttr := make([]string, 0, len(this.Attr))
	for k, _ := range this.Attr {
		keysForAttr = append(keysForAttr, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttr)
	mapStringForAttr := "map[string]*AttrValue{"
	for _, k := range keysForAttr {
		mapStringForAttr += fmt.Sprintf("%#v: %#v,", k, this.Attr[k])
	}
	mapStringForAttr += "}"
	if this.Attr != nil {
		s = append(s, "Attr: "+mapStringForAttr+",\n")
	}
	if this.ExperimentalDebugInfo != nil {
		s = append(s, "ExperimentalDebugInfo: "+fmt.Sprintf("%#v", this.ExperimentalDebugInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeDef_ExperimentalDebugInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&framework.NodeDef_ExperimentalDebugInfo{")
	s = append(s, "OriginalNodeNames: "+fmt.Sprintf("%#v", this.OriginalNodeNames)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringNodeDef(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *NodeDef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeDef) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNodeDef(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Op) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNodeDef(dAtA, i, uint64(len(m.Op)))
		i += copy(dAtA[i:], m.Op)
	}
	if len(m.Input) > 0 {
		for _, s := range m.Input {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Device) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintNodeDef(dAtA, i, uint64(len(m.Device)))
		i += copy(dAtA[i:], m.Device)
	}
	if len(m.Attr) > 0 {
		for k, _ := range m.Attr {
			dAtA[i] = 0x2a
			i++
			v := m.Attr[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovNodeDef(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovNodeDef(uint64(len(k))) + msgSize
			i = encodeVarintNodeDef(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintNodeDef(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintNodeDef(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	if m.ExperimentalDebugInfo != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintNodeDef(dAtA, i, uint64(m.ExperimentalDebugInfo.Size()))
		n2, err := m.ExperimentalDebugInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *NodeDef_ExperimentalDebugInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeDef_ExperimentalDebugInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OriginalNodeNames) > 0 {
		for _, s := range m.OriginalNodeNames {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeVarintNodeDef(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedNodeDef(r randyNodeDef, easy bool) *NodeDef {
	this := &NodeDef{}
	this.Name = string(randStringNodeDef(r))
	this.Op = string(randStringNodeDef(r))
	v1 := r.Intn(10)
	this.Input = make([]string, v1)
	for i := 0; i < v1; i++ {
		this.Input[i] = string(randStringNodeDef(r))
	}
	this.Device = string(randStringNodeDef(r))
	if r.Intn(10) == 0 {
		v2 := r.Intn(10)
		this.Attr = make(map[string]*AttrValue)
		for i := 0; i < v2; i++ {
			this.Attr[randStringNodeDef(r)] = NewPopulatedAttrValue(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.ExperimentalDebugInfo = NewPopulatedNodeDef_ExperimentalDebugInfo(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNodeDef_ExperimentalDebugInfo(r randyNodeDef, easy bool) *NodeDef_ExperimentalDebugInfo {
	this := &NodeDef_ExperimentalDebugInfo{}
	v3 := r.Intn(10)
	this.OriginalNodeNames = make([]string, v3)
	for i := 0; i < v3; i++ {
		this.OriginalNodeNames[i] = string(randStringNodeDef(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyNodeDef interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneNodeDef(r randyNodeDef) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringNodeDef(r randyNodeDef) string {
	v4 := r.Intn(100)
	tmps := make([]rune, v4)
	for i := 0; i < v4; i++ {
		tmps[i] = randUTF8RuneNodeDef(r)
	}
	return string(tmps)
}
func randUnrecognizedNodeDef(r randyNodeDef, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldNodeDef(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldNodeDef(dAtA []byte, r randyNodeDef, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateNodeDef(dAtA, uint64(key))
		v5 := r.Int63()
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		dAtA = encodeVarintPopulateNodeDef(dAtA, uint64(v5))
	case 1:
		dAtA = encodeVarintPopulateNodeDef(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateNodeDef(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateNodeDef(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateNodeDef(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateNodeDef(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *NodeDef) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNodeDef(uint64(l))
	}
	l = len(m.Op)
	if l > 0 {
		n += 1 + l + sovNodeDef(uint64(l))
	}
	if len(m.Input) > 0 {
		for _, s := range m.Input {
			l = len(s)
			n += 1 + l + sovNodeDef(uint64(l))
		}
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovNodeDef(uint64(l))
	}
	if len(m.Attr) > 0 {
		for k, v := range m.Attr {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovNodeDef(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovNodeDef(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovNodeDef(uint64(mapEntrySize))
		}
	}
	if m.ExperimentalDebugInfo != nil {
		l = m.ExperimentalDebugInfo.Size()
		n += 1 + l + sovNodeDef(uint64(l))
	}
	return n
}

func (m *NodeDef_ExperimentalDebugInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.OriginalNodeNames) > 0 {
		for _, s := range m.OriginalNodeNames {
			l = len(s)
			n += 1 + l + sovNodeDef(uint64(l))
		}
	}
	return n
}

func sovNodeDef(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNodeDef(x uint64) (n int) {
	return sovNodeDef(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *NodeDef) String() string {
	if this == nil {
		return "nil"
	}
	keysForAttr := make([]string, 0, len(this.Attr))
	for k, _ := range this.Attr {
		keysForAttr = append(keysForAttr, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttr)
	mapStringForAttr := "map[string]*AttrValue{"
	for _, k := range keysForAttr {
		mapStringForAttr += fmt.Sprintf("%v: %v,", k, this.Attr[k])
	}
	mapStringForAttr += "}"
	s := strings.Join([]string{`&NodeDef{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Op:` + fmt.Sprintf("%v", this.Op) + `,`,
		`Input:` + fmt.Sprintf("%v", this.Input) + `,`,
		`Device:` + fmt.Sprintf("%v", this.Device) + `,`,
		`Attr:` + mapStringForAttr + `,`,
		`ExperimentalDebugInfo:` + strings.Replace(fmt.Sprintf("%v", this.ExperimentalDebugInfo), "NodeDef_ExperimentalDebugInfo", "NodeDef_ExperimentalDebugInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeDef_ExperimentalDebugInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeDef_ExperimentalDebugInfo{`,
		`OriginalNodeNames:` + fmt.Sprintf("%v", this.OriginalNodeNames) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringNodeDef(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *NodeDef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodeDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeDef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeDef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodeDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodeDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Op = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodeDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = append(m.Input, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodeDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNodeDef
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attr == nil {
				m.Attr = make(map[string]*AttrValue)
			}
			var mapkey string
			var mapvalue *AttrValue
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNodeDef
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNodeDef
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthNodeDef
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNodeDef
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthNodeDef
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthNodeDef
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &AttrValue{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipNodeDef(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthNodeDef
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attr[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExperimentalDebugInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNodeDef
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExperimentalDebugInfo == nil {
				m.ExperimentalDebugInfo = &NodeDef_ExperimentalDebugInfo{}
			}
			if err := m.ExperimentalDebugInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodeDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNodeDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeDef_ExperimentalDebugInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodeDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExperimentalDebugInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExperimentalDebugInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalNodeNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodeDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalNodeNames = append(m.OriginalNodeNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodeDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNodeDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNodeDef(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNodeDef
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNodeDef
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNodeDef
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNodeDef
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNodeDef
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNodeDef(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNodeDef = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNodeDef   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("node_def.proto", fileDescriptor_node_def_0717a24f2af17d9e) }

var fileDescriptor_node_def_0717a24f2af17d9e = []byte{
	// 369 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0xad, 0x93, 0xb6, 0x28, 0xae, 0x54, 0x15, 0xd3, 0x42, 0x14, 0x21, 0x2b, 0xea, 0x14, 0x21,
	0x94, 0xa2, 0xb2, 0x20, 0x36, 0x50, 0x2b, 0xc4, 0x40, 0x87, 0x0c, 0xac, 0x21, 0x25, 0x4e, 0x14,
	0xb5, 0xb5, 0x23, 0xe3, 0x14, 0xba, 0xb1, 0xb1, 0xf2, 0x19, 0x7c, 0x02, 0x9f, 0xc0, 0xc8, 0xc8,
	0xd8, 0x84, 0x1f, 0x60, 0x64, 0x44, 0x76, 0x4a, 0xd5, 0xa1, 0xdb, 0xbd, 0x77, 0xef, 0xfc, 0x7c,
	0xef, 0x60, 0x93, 0xb2, 0x90, 0xf8, 0x21, 0x89, 0xdc, 0x94, 0x33, 0xc1, 0x90, 0x11, 0xf1, 0x60,
	0x46, 0x1e, 0x19, 0x9f, 0x58, 0xdd, 0x98, 0xc5, 0xac, 0xa7, 0xe8, 0x71, 0x16, 0xf5, 0x24, 0x52,
	0x40, 0x55, 0xa5, 0xdc, 0x6a, 0x05, 0x42, 0x70, 0x7f, 0x1e, 0x4c, 0x33, 0x52, 0x32, 0xdd, 0x17,
	0x1d, 0xee, 0x8c, 0x58, 0x48, 0x06, 0x24, 0x42, 0x08, 0x56, 0x69, 0x30, 0x23, 0x26, 0xb0, 0x81,
	0x63, 0x78, 0xaa, 0x46, 0x4d, 0xa8, 0xb1, 0xd4, 0xd4, 0x14, 0xa3, 0xb1, 0x14, 0xb5, 0x61, 0x2d,
	0xa1, 0x69, 0x26, 0x4c, 0xdd, 0xd6, 0x1d, 0xc3, 0x2b, 0x01, 0xda, 0x87, 0xf5, 0x90, 0xcc, 0x93,
	0x7b, 0x62, 0x56, 0x95, 0x72, 0x85, 0xd0, 0x09, 0xac, 0x4a, 0x47, 0xb3, 0x66, 0xeb, 0x4e, 0xa3,
	0x7f, 0xe8, 0xae, 0x7f, 0xeb, 0xae, 0x3c, 0xdd, 0x0b, 0x21, 0xf8, 0x90, 0x0a, 0xbe, 0xf0, 0x94,
	0x12, 0xdd, 0xc1, 0x03, 0xf2, 0x94, 0x12, 0x9e, 0xcc, 0x08, 0x15, 0xc1, 0xd4, 0x0f, 0xc9, 0x38,
	0x8b, 0xfd, 0x84, 0x46, 0xcc, 0xac, 0xdb, 0xc0, 0x69, 0xf4, 0x9d, 0x2d, 0x8f, 0x0c, 0x37, 0x26,
	0x06, 0x72, 0xe0, 0x9a, 0x46, 0xcc, 0xeb, 0x90, 0x6d, 0xb4, 0x75, 0x03, 0x8d, 0xb5, 0x29, 0x6a,
	0x41, 0x7d, 0x42, 0x16, 0xab, 0x8d, 0x65, 0x89, 0x8e, 0x60, 0x4d, 0xe5, 0xa3, 0x76, 0x6e, 0xf4,
	0xdb, 0x1b, 0x76, 0x72, 0xec, 0x56, 0xf6, 0xbc, 0x52, 0x72, 0xae, 0x9d, 0x01, 0xeb, 0x0a, 0x76,
	0xb6, 0xda, 0x23, 0x17, 0xee, 0x31, 0x9e, 0xc4, 0x09, 0x0d, 0xa6, 0xbe, 0xba, 0x9a, 0xcc, 0xf3,
	0xc1, 0x04, 0x2a, 0xb7, 0xdd, 0xff, 0x96, 0x5c, 0x61, 0x24, 0x1b, 0x97, 0xc7, 0x5f, 0x39, 0xae,
	0x2c, 0x73, 0x0c, 0x7e, 0x72, 0x0c, 0x7e, 0x73, 0x0c, 0x9e, 0x0b, 0x0c, 0xde, 0x0a, 0x0c, 0xde,
	0x0b, 0x0c, 0x3e, 0x0a, 0x0c, 0x3e, 0x0b, 0x0c, 0x96, 0x05, 0x06, 0xaf, 0xdf, 0xb8, 0x32, 0xae,
	0xab, 0xf3, 0x9d, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0x59, 0x24, 0x08, 0x74, 0x11, 0x02, 0x00,
	0x00,
}

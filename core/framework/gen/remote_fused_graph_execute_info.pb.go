// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: remote_fused_graph_execute_info.proto

package framework

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Protocol buffer representing a handle to a tensorflow resource. Handles are
// not valid across executions, but can be serialized back and forth from within
// a single run.
type RemoteFusedGraphExecuteInfo struct {
	// Definition of remote graph
	RemoteGraph *GraphDef `protobuf:"bytes,1,opt,name=remote_graph,json=remoteGraph" json:"remote_graph,omitempty"`
	// Remote fused graph input node name
	GraphInputNodeName []string `protobuf:"bytes,2,rep,name=graph_input_node_name,json=graphInputNodeName" json:"graph_input_node_name,omitempty"`
	// Remote fused graph output node name
	GraphOutputNodeName []string `protobuf:"bytes,3,rep,name=graph_output_node_name,json=graphOutputNodeName" json:"graph_output_node_name,omitempty"`
	// Executor's name
	ExecutorName string `protobuf:"bytes,4,opt,name=executor_name,json=executorName,proto3" json:"executor_name,omitempty"`
	// Optional: Parameters given to the executor
	SerializedExecutorParameters []byte `protobuf:"bytes,5,opt,name=serialized_executor_parameters,json=serializedExecutorParameters,proto3" json:"serialized_executor_parameters,omitempty"`
	// Optional: Default graph input tensor shape used to allocate memory
	// before executing op
	DefaultGraphInputTensorShape []*RemoteFusedGraphExecuteInfo_TensorShapeTypeProto `protobuf:"bytes,6,rep,name=default_graph_input_tensor_shape,json=defaultGraphInputTensorShape" json:"default_graph_input_tensor_shape,omitempty"`
	// Optional: Default graph input tensor shape used to allocate memory
	// before executing op
	// TODO(satok): Remote output tensor shape once shape information is stored
	// in NodeDef
	DefaultGraphOutputTensorShape []*RemoteFusedGraphExecuteInfo_TensorShapeTypeProto `protobuf:"bytes,7,rep,name=default_graph_output_tensor_shape,json=defaultGraphOutputTensorShape" json:"default_graph_output_tensor_shape,omitempty"`
	XXX_NoUnkeyedLiteral          struct{}                                            `json:"-"`
	XXX_sizecache                 int32                                               `json:"-"`
}

func (m *RemoteFusedGraphExecuteInfo) Reset()      { *m = RemoteFusedGraphExecuteInfo{} }
func (*RemoteFusedGraphExecuteInfo) ProtoMessage() {}
func (*RemoteFusedGraphExecuteInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_remote_fused_graph_execute_info_104b66b591d054d8, []int{0}
}
func (m *RemoteFusedGraphExecuteInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoteFusedGraphExecuteInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoteFusedGraphExecuteInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RemoteFusedGraphExecuteInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoteFusedGraphExecuteInfo.Merge(dst, src)
}
func (m *RemoteFusedGraphExecuteInfo) XXX_Size() int {
	return m.Size()
}
func (m *RemoteFusedGraphExecuteInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoteFusedGraphExecuteInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RemoteFusedGraphExecuteInfo proto.InternalMessageInfo

func (m *RemoteFusedGraphExecuteInfo) GetRemoteGraph() *GraphDef {
	if m != nil {
		return m.RemoteGraph
	}
	return nil
}

func (m *RemoteFusedGraphExecuteInfo) GetGraphInputNodeName() []string {
	if m != nil {
		return m.GraphInputNodeName
	}
	return nil
}

func (m *RemoteFusedGraphExecuteInfo) GetGraphOutputNodeName() []string {
	if m != nil {
		return m.GraphOutputNodeName
	}
	return nil
}

func (m *RemoteFusedGraphExecuteInfo) GetExecutorName() string {
	if m != nil {
		return m.ExecutorName
	}
	return ""
}

func (m *RemoteFusedGraphExecuteInfo) GetSerializedExecutorParameters() []byte {
	if m != nil {
		return m.SerializedExecutorParameters
	}
	return nil
}

func (m *RemoteFusedGraphExecuteInfo) GetDefaultGraphInputTensorShape() []*RemoteFusedGraphExecuteInfo_TensorShapeTypeProto {
	if m != nil {
		return m.DefaultGraphInputTensorShape
	}
	return nil
}

func (m *RemoteFusedGraphExecuteInfo) GetDefaultGraphOutputTensorShape() []*RemoteFusedGraphExecuteInfo_TensorShapeTypeProto {
	if m != nil {
		return m.DefaultGraphOutputTensorShape
	}
	return nil
}

type RemoteFusedGraphExecuteInfo_TensorShapeTypeProto struct {
	Dtype                DataType          `protobuf:"varint,1,opt,name=dtype,proto3,enum=framework.DataType" json:"dtype,omitempty"`
	Shape                *TensorShapeProto `protobuf:"bytes,2,opt,name=shape" json:"shape,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) Reset() {
	*m = RemoteFusedGraphExecuteInfo_TensorShapeTypeProto{}
}
func (*RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) ProtoMessage() {}
func (*RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_remote_fused_graph_execute_info_104b66b591d054d8, []int{0, 0}
}
func (m *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoteFusedGraphExecuteInfo_TensorShapeTypeProto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoteFusedGraphExecuteInfo_TensorShapeTypeProto.Merge(dst, src)
}
func (m *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) XXX_Size() int {
	return m.Size()
}
func (m *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoteFusedGraphExecuteInfo_TensorShapeTypeProto.DiscardUnknown(m)
}

var xxx_messageInfo_RemoteFusedGraphExecuteInfo_TensorShapeTypeProto proto.InternalMessageInfo

func (m *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) GetDtype() DataType {
	if m != nil {
		return m.Dtype
	}
	return DataType_DT_INVALID
}

func (m *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) GetShape() *TensorShapeProto {
	if m != nil {
		return m.Shape
	}
	return nil
}

func init() {
	proto.RegisterType((*RemoteFusedGraphExecuteInfo)(nil), "framework.RemoteFusedGraphExecuteInfo")
	proto.RegisterType((*RemoteFusedGraphExecuteInfo_TensorShapeTypeProto)(nil), "framework.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto")
}
func (this *RemoteFusedGraphExecuteInfo) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RemoteFusedGraphExecuteInfo)
	if !ok {
		that2, ok := that.(RemoteFusedGraphExecuteInfo)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RemoteFusedGraphExecuteInfo")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RemoteFusedGraphExecuteInfo but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RemoteFusedGraphExecuteInfo but is not nil && this == nil")
	}
	if !this.RemoteGraph.Equal(that1.RemoteGraph) {
		return fmt.Errorf("RemoteGraph this(%v) Not Equal that(%v)", this.RemoteGraph, that1.RemoteGraph)
	}
	if len(this.GraphInputNodeName) != len(that1.GraphInputNodeName) {
		return fmt.Errorf("GraphInputNodeName this(%v) Not Equal that(%v)", len(this.GraphInputNodeName), len(that1.GraphInputNodeName))
	}
	for i := range this.GraphInputNodeName {
		if this.GraphInputNodeName[i] != that1.GraphInputNodeName[i] {
			return fmt.Errorf("GraphInputNodeName this[%v](%v) Not Equal that[%v](%v)", i, this.GraphInputNodeName[i], i, that1.GraphInputNodeName[i])
		}
	}
	if len(this.GraphOutputNodeName) != len(that1.GraphOutputNodeName) {
		return fmt.Errorf("GraphOutputNodeName this(%v) Not Equal that(%v)", len(this.GraphOutputNodeName), len(that1.GraphOutputNodeName))
	}
	for i := range this.GraphOutputNodeName {
		if this.GraphOutputNodeName[i] != that1.GraphOutputNodeName[i] {
			return fmt.Errorf("GraphOutputNodeName this[%v](%v) Not Equal that[%v](%v)", i, this.GraphOutputNodeName[i], i, that1.GraphOutputNodeName[i])
		}
	}
	if this.ExecutorName != that1.ExecutorName {
		return fmt.Errorf("ExecutorName this(%v) Not Equal that(%v)", this.ExecutorName, that1.ExecutorName)
	}
	if !bytes.Equal(this.SerializedExecutorParameters, that1.SerializedExecutorParameters) {
		return fmt.Errorf("SerializedExecutorParameters this(%v) Not Equal that(%v)", this.SerializedExecutorParameters, that1.SerializedExecutorParameters)
	}
	if len(this.DefaultGraphInputTensorShape) != len(that1.DefaultGraphInputTensorShape) {
		return fmt.Errorf("DefaultGraphInputTensorShape this(%v) Not Equal that(%v)", len(this.DefaultGraphInputTensorShape), len(that1.DefaultGraphInputTensorShape))
	}
	for i := range this.DefaultGraphInputTensorShape {
		if !this.DefaultGraphInputTensorShape[i].Equal(that1.DefaultGraphInputTensorShape[i]) {
			return fmt.Errorf("DefaultGraphInputTensorShape this[%v](%v) Not Equal that[%v](%v)", i, this.DefaultGraphInputTensorShape[i], i, that1.DefaultGraphInputTensorShape[i])
		}
	}
	if len(this.DefaultGraphOutputTensorShape) != len(that1.DefaultGraphOutputTensorShape) {
		return fmt.Errorf("DefaultGraphOutputTensorShape this(%v) Not Equal that(%v)", len(this.DefaultGraphOutputTensorShape), len(that1.DefaultGraphOutputTensorShape))
	}
	for i := range this.DefaultGraphOutputTensorShape {
		if !this.DefaultGraphOutputTensorShape[i].Equal(that1.DefaultGraphOutputTensorShape[i]) {
			return fmt.Errorf("DefaultGraphOutputTensorShape this[%v](%v) Not Equal that[%v](%v)", i, this.DefaultGraphOutputTensorShape[i], i, that1.DefaultGraphOutputTensorShape[i])
		}
	}
	return nil
}
func (this *RemoteFusedGraphExecuteInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoteFusedGraphExecuteInfo)
	if !ok {
		that2, ok := that.(RemoteFusedGraphExecuteInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RemoteGraph.Equal(that1.RemoteGraph) {
		return false
	}
	if len(this.GraphInputNodeName) != len(that1.GraphInputNodeName) {
		return false
	}
	for i := range this.GraphInputNodeName {
		if this.GraphInputNodeName[i] != that1.GraphInputNodeName[i] {
			return false
		}
	}
	if len(this.GraphOutputNodeName) != len(that1.GraphOutputNodeName) {
		return false
	}
	for i := range this.GraphOutputNodeName {
		if this.GraphOutputNodeName[i] != that1.GraphOutputNodeName[i] {
			return false
		}
	}
	if this.ExecutorName != that1.ExecutorName {
		return false
	}
	if !bytes.Equal(this.SerializedExecutorParameters, that1.SerializedExecutorParameters) {
		return false
	}
	if len(this.DefaultGraphInputTensorShape) != len(that1.DefaultGraphInputTensorShape) {
		return false
	}
	for i := range this.DefaultGraphInputTensorShape {
		if !this.DefaultGraphInputTensorShape[i].Equal(that1.DefaultGraphInputTensorShape[i]) {
			return false
		}
	}
	if len(this.DefaultGraphOutputTensorShape) != len(that1.DefaultGraphOutputTensorShape) {
		return false
	}
	for i := range this.DefaultGraphOutputTensorShape {
		if !this.DefaultGraphOutputTensorShape[i].Equal(that1.DefaultGraphOutputTensorShape[i]) {
			return false
		}
	}
	return true
}
func (this *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RemoteFusedGraphExecuteInfo_TensorShapeTypeProto)
	if !ok {
		that2, ok := that.(RemoteFusedGraphExecuteInfo_TensorShapeTypeProto)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto but is not nil && this == nil")
	}
	if this.Dtype != that1.Dtype {
		return fmt.Errorf("Dtype this(%v) Not Equal that(%v)", this.Dtype, that1.Dtype)
	}
	if !this.Shape.Equal(that1.Shape) {
		return fmt.Errorf("Shape this(%v) Not Equal that(%v)", this.Shape, that1.Shape)
	}
	return nil
}
func (this *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoteFusedGraphExecuteInfo_TensorShapeTypeProto)
	if !ok {
		that2, ok := that.(RemoteFusedGraphExecuteInfo_TensorShapeTypeProto)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Dtype != that1.Dtype {
		return false
	}
	if !this.Shape.Equal(that1.Shape) {
		return false
	}
	return true
}
func (this *RemoteFusedGraphExecuteInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&framework.RemoteFusedGraphExecuteInfo{")
	if this.RemoteGraph != nil {
		s = append(s, "RemoteGraph: "+fmt.Sprintf("%#v", this.RemoteGraph)+",\n")
	}
	s = append(s, "GraphInputNodeName: "+fmt.Sprintf("%#v", this.GraphInputNodeName)+",\n")
	s = append(s, "GraphOutputNodeName: "+fmt.Sprintf("%#v", this.GraphOutputNodeName)+",\n")
	s = append(s, "ExecutorName: "+fmt.Sprintf("%#v", this.ExecutorName)+",\n")
	s = append(s, "SerializedExecutorParameters: "+fmt.Sprintf("%#v", this.SerializedExecutorParameters)+",\n")
	if this.DefaultGraphInputTensorShape != nil {
		s = append(s, "DefaultGraphInputTensorShape: "+fmt.Sprintf("%#v", this.DefaultGraphInputTensorShape)+",\n")
	}
	if this.DefaultGraphOutputTensorShape != nil {
		s = append(s, "DefaultGraphOutputTensorShape: "+fmt.Sprintf("%#v", this.DefaultGraphOutputTensorShape)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&framework.RemoteFusedGraphExecuteInfo_TensorShapeTypeProto{")
	s = append(s, "Dtype: "+fmt.Sprintf("%#v", this.Dtype)+",\n")
	if this.Shape != nil {
		s = append(s, "Shape: "+fmt.Sprintf("%#v", this.Shape)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRemoteFusedGraphExecuteInfo(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *RemoteFusedGraphExecuteInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoteFusedGraphExecuteInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RemoteGraph != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRemoteFusedGraphExecuteInfo(dAtA, i, uint64(m.RemoteGraph.Size()))
		n1, err := m.RemoteGraph.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.GraphInputNodeName) > 0 {
		for _, s := range m.GraphInputNodeName {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.GraphOutputNodeName) > 0 {
		for _, s := range m.GraphOutputNodeName {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ExecutorName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRemoteFusedGraphExecuteInfo(dAtA, i, uint64(len(m.ExecutorName)))
		i += copy(dAtA[i:], m.ExecutorName)
	}
	if len(m.SerializedExecutorParameters) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRemoteFusedGraphExecuteInfo(dAtA, i, uint64(len(m.SerializedExecutorParameters)))
		i += copy(dAtA[i:], m.SerializedExecutorParameters)
	}
	if len(m.DefaultGraphInputTensorShape) > 0 {
		for _, msg := range m.DefaultGraphInputTensorShape {
			dAtA[i] = 0x32
			i++
			i = encodeVarintRemoteFusedGraphExecuteInfo(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.DefaultGraphOutputTensorShape) > 0 {
		for _, msg := range m.DefaultGraphOutputTensorShape {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintRemoteFusedGraphExecuteInfo(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Dtype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRemoteFusedGraphExecuteInfo(dAtA, i, uint64(m.Dtype))
	}
	if m.Shape != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRemoteFusedGraphExecuteInfo(dAtA, i, uint64(m.Shape.Size()))
		n2, err := m.Shape.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func encodeVarintRemoteFusedGraphExecuteInfo(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedRemoteFusedGraphExecuteInfo(r randyRemoteFusedGraphExecuteInfo, easy bool) *RemoteFusedGraphExecuteInfo {
	this := &RemoteFusedGraphExecuteInfo{}
	if r.Intn(10) == 0 {
		this.RemoteGraph = NewPopulatedGraphDef(r, easy)
	}
	v1 := r.Intn(10)
	this.GraphInputNodeName = make([]string, v1)
	for i := 0; i < v1; i++ {
		this.GraphInputNodeName[i] = string(randStringRemoteFusedGraphExecuteInfo(r))
	}
	v2 := r.Intn(10)
	this.GraphOutputNodeName = make([]string, v2)
	for i := 0; i < v2; i++ {
		this.GraphOutputNodeName[i] = string(randStringRemoteFusedGraphExecuteInfo(r))
	}
	this.ExecutorName = string(randStringRemoteFusedGraphExecuteInfo(r))
	v3 := r.Intn(100)
	this.SerializedExecutorParameters = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this.SerializedExecutorParameters[i] = byte(r.Intn(256))
	}
	if r.Intn(10) != 0 {
		v4 := r.Intn(5)
		this.DefaultGraphInputTensorShape = make([]*RemoteFusedGraphExecuteInfo_TensorShapeTypeProto, v4)
		for i := 0; i < v4; i++ {
			this.DefaultGraphInputTensorShape[i] = NewPopulatedRemoteFusedGraphExecuteInfo_TensorShapeTypeProto(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v5 := r.Intn(5)
		this.DefaultGraphOutputTensorShape = make([]*RemoteFusedGraphExecuteInfo_TensorShapeTypeProto, v5)
		for i := 0; i < v5; i++ {
			this.DefaultGraphOutputTensorShape[i] = NewPopulatedRemoteFusedGraphExecuteInfo_TensorShapeTypeProto(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRemoteFusedGraphExecuteInfo_TensorShapeTypeProto(r randyRemoteFusedGraphExecuteInfo, easy bool) *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto {
	this := &RemoteFusedGraphExecuteInfo_TensorShapeTypeProto{}
	this.Dtype = DataType([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}[r.Intn(47)])
	if r.Intn(10) != 0 {
		this.Shape = NewPopulatedTensorShapeProto(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyRemoteFusedGraphExecuteInfo interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneRemoteFusedGraphExecuteInfo(r randyRemoteFusedGraphExecuteInfo) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringRemoteFusedGraphExecuteInfo(r randyRemoteFusedGraphExecuteInfo) string {
	v6 := r.Intn(100)
	tmps := make([]rune, v6)
	for i := 0; i < v6; i++ {
		tmps[i] = randUTF8RuneRemoteFusedGraphExecuteInfo(r)
	}
	return string(tmps)
}
func randUnrecognizedRemoteFusedGraphExecuteInfo(r randyRemoteFusedGraphExecuteInfo, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldRemoteFusedGraphExecuteInfo(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldRemoteFusedGraphExecuteInfo(dAtA []byte, r randyRemoteFusedGraphExecuteInfo, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateRemoteFusedGraphExecuteInfo(dAtA, uint64(key))
		v7 := r.Int63()
		if r.Intn(2) == 0 {
			v7 *= -1
		}
		dAtA = encodeVarintPopulateRemoteFusedGraphExecuteInfo(dAtA, uint64(v7))
	case 1:
		dAtA = encodeVarintPopulateRemoteFusedGraphExecuteInfo(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateRemoteFusedGraphExecuteInfo(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateRemoteFusedGraphExecuteInfo(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateRemoteFusedGraphExecuteInfo(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateRemoteFusedGraphExecuteInfo(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *RemoteFusedGraphExecuteInfo) Size() (n int) {
	var l int
	_ = l
	if m.RemoteGraph != nil {
		l = m.RemoteGraph.Size()
		n += 1 + l + sovRemoteFusedGraphExecuteInfo(uint64(l))
	}
	if len(m.GraphInputNodeName) > 0 {
		for _, s := range m.GraphInputNodeName {
			l = len(s)
			n += 1 + l + sovRemoteFusedGraphExecuteInfo(uint64(l))
		}
	}
	if len(m.GraphOutputNodeName) > 0 {
		for _, s := range m.GraphOutputNodeName {
			l = len(s)
			n += 1 + l + sovRemoteFusedGraphExecuteInfo(uint64(l))
		}
	}
	l = len(m.ExecutorName)
	if l > 0 {
		n += 1 + l + sovRemoteFusedGraphExecuteInfo(uint64(l))
	}
	l = len(m.SerializedExecutorParameters)
	if l > 0 {
		n += 1 + l + sovRemoteFusedGraphExecuteInfo(uint64(l))
	}
	if len(m.DefaultGraphInputTensorShape) > 0 {
		for _, e := range m.DefaultGraphInputTensorShape {
			l = e.Size()
			n += 1 + l + sovRemoteFusedGraphExecuteInfo(uint64(l))
		}
	}
	if len(m.DefaultGraphOutputTensorShape) > 0 {
		for _, e := range m.DefaultGraphOutputTensorShape {
			l = e.Size()
			n += 1 + l + sovRemoteFusedGraphExecuteInfo(uint64(l))
		}
	}
	return n
}

func (m *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) Size() (n int) {
	var l int
	_ = l
	if m.Dtype != 0 {
		n += 1 + sovRemoteFusedGraphExecuteInfo(uint64(m.Dtype))
	}
	if m.Shape != nil {
		l = m.Shape.Size()
		n += 1 + l + sovRemoteFusedGraphExecuteInfo(uint64(l))
	}
	return n
}

func sovRemoteFusedGraphExecuteInfo(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRemoteFusedGraphExecuteInfo(x uint64) (n int) {
	return sovRemoteFusedGraphExecuteInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RemoteFusedGraphExecuteInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoteFusedGraphExecuteInfo{`,
		`RemoteGraph:` + strings.Replace(fmt.Sprintf("%v", this.RemoteGraph), "GraphDef", "GraphDef", 1) + `,`,
		`GraphInputNodeName:` + fmt.Sprintf("%v", this.GraphInputNodeName) + `,`,
		`GraphOutputNodeName:` + fmt.Sprintf("%v", this.GraphOutputNodeName) + `,`,
		`ExecutorName:` + fmt.Sprintf("%v", this.ExecutorName) + `,`,
		`SerializedExecutorParameters:` + fmt.Sprintf("%v", this.SerializedExecutorParameters) + `,`,
		`DefaultGraphInputTensorShape:` + strings.Replace(fmt.Sprintf("%v", this.DefaultGraphInputTensorShape), "RemoteFusedGraphExecuteInfo_TensorShapeTypeProto", "RemoteFusedGraphExecuteInfo_TensorShapeTypeProto", 1) + `,`,
		`DefaultGraphOutputTensorShape:` + strings.Replace(fmt.Sprintf("%v", this.DefaultGraphOutputTensorShape), "RemoteFusedGraphExecuteInfo_TensorShapeTypeProto", "RemoteFusedGraphExecuteInfo_TensorShapeTypeProto", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoteFusedGraphExecuteInfo_TensorShapeTypeProto{`,
		`Dtype:` + fmt.Sprintf("%v", this.Dtype) + `,`,
		`Shape:` + strings.Replace(fmt.Sprintf("%v", this.Shape), "TensorShapeProto", "TensorShapeProto", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRemoteFusedGraphExecuteInfo(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RemoteFusedGraphExecuteInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRemoteFusedGraphExecuteInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoteFusedGraphExecuteInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoteFusedGraphExecuteInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteGraph", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteFusedGraphExecuteInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemoteGraph == nil {
				m.RemoteGraph = &GraphDef{}
			}
			if err := m.RemoteGraph.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphInputNodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteFusedGraphExecuteInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GraphInputNodeName = append(m.GraphInputNodeName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphOutputNodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteFusedGraphExecuteInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GraphOutputNodeName = append(m.GraphOutputNodeName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteFusedGraphExecuteInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutorName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerializedExecutorParameters", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteFusedGraphExecuteInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SerializedExecutorParameters = append(m.SerializedExecutorParameters[:0], dAtA[iNdEx:postIndex]...)
			if m.SerializedExecutorParameters == nil {
				m.SerializedExecutorParameters = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultGraphInputTensorShape", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteFusedGraphExecuteInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultGraphInputTensorShape = append(m.DefaultGraphInputTensorShape, &RemoteFusedGraphExecuteInfo_TensorShapeTypeProto{})
			if err := m.DefaultGraphInputTensorShape[len(m.DefaultGraphInputTensorShape)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultGraphOutputTensorShape", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteFusedGraphExecuteInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultGraphOutputTensorShape = append(m.DefaultGraphOutputTensorShape, &RemoteFusedGraphExecuteInfo_TensorShapeTypeProto{})
			if err := m.DefaultGraphOutputTensorShape[len(m.DefaultGraphOutputTensorShape)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRemoteFusedGraphExecuteInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRemoteFusedGraphExecuteInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TensorShapeTypeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TensorShapeTypeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dtype", wireType)
			}
			m.Dtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteFusedGraphExecuteInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dtype |= (DataType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shape", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteFusedGraphExecuteInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shape == nil {
				m.Shape = &TensorShapeProto{}
			}
			if err := m.Shape.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRemoteFusedGraphExecuteInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRemoteFusedGraphExecuteInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRemoteFusedGraphExecuteInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRemoteFusedGraphExecuteInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRemoteFusedGraphExecuteInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRemoteFusedGraphExecuteInfo
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRemoteFusedGraphExecuteInfo(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRemoteFusedGraphExecuteInfo = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRemoteFusedGraphExecuteInfo   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("remote_fused_graph_execute_info.proto", fileDescriptor_remote_fused_graph_execute_info_104b66b591d054d8)
}

var fileDescriptor_remote_fused_graph_execute_info_104b66b591d054d8 = []byte{
	// 463 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0xb1, 0x6e, 0xd4, 0x40,
	0x10, 0x86, 0xb3, 0x39, 0x2e, 0xe8, 0xf6, 0x0e, 0x8a, 0x0d, 0xa0, 0xd3, 0x25, 0xac, 0x4c, 0x10,
	0x92, 0x91, 0xd0, 0x45, 0x49, 0x24, 0x1a, 0x3a, 0x74, 0x21, 0x4a, 0x13, 0x22, 0x93, 0x7e, 0xb5,
	0xc1, 0xe3, 0x8b, 0x45, 0xec, 0xb5, 0xd6, 0x6b, 0x41, 0xa8, 0x90, 0x10, 0x3d, 0x8f, 0x41, 0xc1,
	0x03, 0xf0, 0x08, 0x94, 0x94, 0x94, 0xb1, 0x79, 0x01, 0x4a, 0x4a, 0xb4, 0xb3, 0x8e, 0x59, 0x4b,
	0x88, 0x86, 0xee, 0x66, 0xe7, 0xfb, 0xe7, 0xfe, 0xf9, 0x3d, 0xf4, 0x81, 0x86, 0x4c, 0x19, 0x10,
	0x49, 0x55, 0x42, 0x2c, 0x96, 0x5a, 0x16, 0x67, 0x02, 0xde, 0xc0, 0xcb, 0xca, 0x80, 0x48, 0xf3,
	0x44, 0xcd, 0x0b, 0xad, 0x8c, 0x62, 0xa3, 0x44, 0xcb, 0x0c, 0x5e, 0x2b, 0xfd, 0x6a, 0xb6, 0xb5,
	0x54, 0x4b, 0xb5, 0x8d, 0xcf, 0xa7, 0x55, 0xb2, 0x6d, 0x2b, 0x2c, 0xf0, 0x97, 0xc3, 0x67, 0x63,
	0x1c, 0xd4, 0x16, 0xcc, 0x40, 0x5e, 0x2a, 0x2d, 0xca, 0x33, 0x59, 0xc0, 0x15, 0x60, 0x2e, 0x0a,
	0x28, 0x5d, 0xb1, 0xf5, 0x79, 0x48, 0x37, 0x22, 0xb4, 0xf1, 0xcc, 0xba, 0x38, 0xb0, 0xda, 0x7d,
	0xe7, 0xe1, 0x30, 0x4f, 0x14, 0x7b, 0x4c, 0x27, 0xad, 0x4b, 0x1c, 0x3b, 0x25, 0x01, 0x09, 0xc7,
	0xbb, 0xeb, 0xf3, 0xce, 0xd3, 0x1c, 0x25, 0x0b, 0x48, 0xa2, 0xb1, 0x03, 0xb1, 0x66, 0x3b, 0xf4,
	0xb6, 0x5b, 0x28, 0xcd, 0x8b, 0xca, 0x88, 0x5c, 0xc5, 0x20, 0x72, 0x99, 0xc1, 0x74, 0x35, 0x18,
	0x84, 0xa3, 0x88, 0x61, 0xf3, 0xd0, 0xf6, 0x8e, 0x54, 0x0c, 0x47, 0x32, 0x03, 0xb6, 0x47, 0xef,
	0x38, 0x89, 0xaa, 0x4c, 0x5f, 0x33, 0x40, 0xcd, 0x3a, 0x76, 0x9f, 0x63, 0xb3, 0x13, 0xdd, 0xa7,
	0x37, 0x5c, 0x64, 0x4a, 0x3b, 0xf6, 0x5a, 0x40, 0xc2, 0x51, 0x34, 0xb9, 0x7a, 0x44, 0x68, 0x41,
	0x79, 0x09, 0x3a, 0x95, 0xe7, 0xe9, 0x5b, 0x88, 0x45, 0xc7, 0x17, 0xd2, 0x2e, 0x61, 0x40, 0x97,
	0xd3, 0x61, 0x40, 0xc2, 0x49, 0xb4, 0xf9, 0x87, 0xda, 0x6f, 0xa1, 0xe3, 0x8e, 0x61, 0xef, 0x09,
	0x0d, 0x62, 0x48, 0x64, 0x75, 0x6e, 0x84, 0xbf, 0x9b, 0x1f, 0xf1, 0x74, 0x2d, 0x18, 0x84, 0xe3,
	0xdd, 0x27, 0x5e, 0x3e, 0xff, 0x48, 0x77, 0x7e, 0x82, 0xd2, 0x17, 0x56, 0x79, 0x72, 0x51, 0xc0,
	0xb1, 0xfd, 0x24, 0xd1, 0x66, 0xfb, 0x27, 0x07, 0x5d, 0x44, 0x1e, 0xc6, 0x3e, 0x10, 0x7a, 0xaf,
	0xef, 0xa2, 0x8d, 0xab, 0x67, 0xe3, 0xfa, 0xff, 0xdb, 0xb8, 0xeb, 0xdb, 0x70, 0xa9, 0x7b, 0xdc,
	0xcc, 0xd0, 0x5b, 0x7f, 0x93, 0xb1, 0x87, 0x74, 0x18, 0xdb, 0x03, 0xc3, 0x4b, 0xb9, 0xd9, 0xbb,
	0x94, 0x85, 0x34, 0xd2, 0x82, 0x91, 0x23, 0xd8, 0x0e, 0x1d, 0x3a, 0xb7, 0xab, 0x78, 0x54, 0x1b,
	0x1e, 0xea, 0x8d, 0x76, 0x6e, 0x1c, 0xf9, 0xf4, 0xd1, 0xf7, 0x9a, 0xaf, 0x5c, 0xd6, 0x9c, 0xfc,
	0xac, 0x39, 0xf9, 0x55, 0x73, 0xf2, 0xae, 0xe1, 0xe4, 0x53, 0xc3, 0xc9, 0x97, 0x86, 0x93, 0xaf,
	0x0d, 0x27, 0xdf, 0x1a, 0x4e, 0x2e, 0x1b, 0x4e, 0x3e, 0xfe, 0xe0, 0x2b, 0xa7, 0x6b, 0x78, 0xe3,
	0x7b, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x01, 0x30, 0x92, 0x6a, 0x69, 0x03, 0x00, 0x00,
}

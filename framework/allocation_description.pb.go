// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: allocation_description.proto

package framework

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type AllocationDescription struct {
	// Total number of bytes requested
	RequestedBytes int64 `protobuf:"varint,1,opt,name=requested_bytes,json=requestedBytes,proto3" json:"requested_bytes,omitempty"`
	// Total number of bytes allocated if known
	AllocatedBytes int64 `protobuf:"varint,2,opt,name=allocated_bytes,json=allocatedBytes,proto3" json:"allocated_bytes,omitempty"`
	// Name of the allocator used
	AllocatorName string `protobuf:"bytes,3,opt,name=allocator_name,json=allocatorName,proto3" json:"allocator_name,omitempty"`
	// Identifier of the allocated buffer if known
	AllocationId int64 `protobuf:"varint,4,opt,name=allocation_id,json=allocationId,proto3" json:"allocation_id,omitempty"`
	// Set if this tensor only has one remaining reference
	HasSingleReference bool `protobuf:"varint,5,opt,name=has_single_reference,json=hasSingleReference,proto3" json:"has_single_reference,omitempty"`
	// Address of the allocation.
	Ptr                  uint64   `protobuf:"varint,6,opt,name=ptr,proto3" json:"ptr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllocationDescription) Reset()      { *m = AllocationDescription{} }
func (*AllocationDescription) ProtoMessage() {}
func (*AllocationDescription) Descriptor() ([]byte, []int) {
	return fileDescriptor_allocation_description_882bdbf3aa0bbdb4, []int{0}
}
func (m *AllocationDescription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllocationDescription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllocationDescription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AllocationDescription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocationDescription.Merge(dst, src)
}
func (m *AllocationDescription) XXX_Size() int {
	return m.Size()
}
func (m *AllocationDescription) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocationDescription.DiscardUnknown(m)
}

var xxx_messageInfo_AllocationDescription proto.InternalMessageInfo

func (m *AllocationDescription) GetRequestedBytes() int64 {
	if m != nil {
		return m.RequestedBytes
	}
	return 0
}

func (m *AllocationDescription) GetAllocatedBytes() int64 {
	if m != nil {
		return m.AllocatedBytes
	}
	return 0
}

func (m *AllocationDescription) GetAllocatorName() string {
	if m != nil {
		return m.AllocatorName
	}
	return ""
}

func (m *AllocationDescription) GetAllocationId() int64 {
	if m != nil {
		return m.AllocationId
	}
	return 0
}

func (m *AllocationDescription) GetHasSingleReference() bool {
	if m != nil {
		return m.HasSingleReference
	}
	return false
}

func (m *AllocationDescription) GetPtr() uint64 {
	if m != nil {
		return m.Ptr
	}
	return 0
}

func init() {
	proto.RegisterType((*AllocationDescription)(nil), "framework.AllocationDescription")
}
func (this *AllocationDescription) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllocationDescription)
	if !ok {
		that2, ok := that.(AllocationDescription)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllocationDescription")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllocationDescription but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllocationDescription but is not nil && this == nil")
	}
	if this.RequestedBytes != that1.RequestedBytes {
		return fmt.Errorf("RequestedBytes this(%v) Not Equal that(%v)", this.RequestedBytes, that1.RequestedBytes)
	}
	if this.AllocatedBytes != that1.AllocatedBytes {
		return fmt.Errorf("AllocatedBytes this(%v) Not Equal that(%v)", this.AllocatedBytes, that1.AllocatedBytes)
	}
	if this.AllocatorName != that1.AllocatorName {
		return fmt.Errorf("AllocatorName this(%v) Not Equal that(%v)", this.AllocatorName, that1.AllocatorName)
	}
	if this.AllocationId != that1.AllocationId {
		return fmt.Errorf("AllocationId this(%v) Not Equal that(%v)", this.AllocationId, that1.AllocationId)
	}
	if this.HasSingleReference != that1.HasSingleReference {
		return fmt.Errorf("HasSingleReference this(%v) Not Equal that(%v)", this.HasSingleReference, that1.HasSingleReference)
	}
	if this.Ptr != that1.Ptr {
		return fmt.Errorf("Ptr this(%v) Not Equal that(%v)", this.Ptr, that1.Ptr)
	}
	return nil
}
func (this *AllocationDescription) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllocationDescription)
	if !ok {
		that2, ok := that.(AllocationDescription)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RequestedBytes != that1.RequestedBytes {
		return false
	}
	if this.AllocatedBytes != that1.AllocatedBytes {
		return false
	}
	if this.AllocatorName != that1.AllocatorName {
		return false
	}
	if this.AllocationId != that1.AllocationId {
		return false
	}
	if this.HasSingleReference != that1.HasSingleReference {
		return false
	}
	if this.Ptr != that1.Ptr {
		return false
	}
	return true
}
func (this *AllocationDescription) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&framework.AllocationDescription{")
	s = append(s, "RequestedBytes: "+fmt.Sprintf("%#v", this.RequestedBytes)+",\n")
	s = append(s, "AllocatedBytes: "+fmt.Sprintf("%#v", this.AllocatedBytes)+",\n")
	s = append(s, "AllocatorName: "+fmt.Sprintf("%#v", this.AllocatorName)+",\n")
	s = append(s, "AllocationId: "+fmt.Sprintf("%#v", this.AllocationId)+",\n")
	s = append(s, "HasSingleReference: "+fmt.Sprintf("%#v", this.HasSingleReference)+",\n")
	s = append(s, "Ptr: "+fmt.Sprintf("%#v", this.Ptr)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAllocationDescription(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *AllocationDescription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllocationDescription) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RequestedBytes != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAllocationDescription(dAtA, i, uint64(m.RequestedBytes))
	}
	if m.AllocatedBytes != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAllocationDescription(dAtA, i, uint64(m.AllocatedBytes))
	}
	if len(m.AllocatorName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAllocationDescription(dAtA, i, uint64(len(m.AllocatorName)))
		i += copy(dAtA[i:], m.AllocatorName)
	}
	if m.AllocationId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAllocationDescription(dAtA, i, uint64(m.AllocationId))
	}
	if m.HasSingleReference {
		dAtA[i] = 0x28
		i++
		if m.HasSingleReference {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Ptr != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintAllocationDescription(dAtA, i, uint64(m.Ptr))
	}
	return i, nil
}

func encodeVarintAllocationDescription(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedAllocationDescription(r randyAllocationDescription, easy bool) *AllocationDescription {
	this := &AllocationDescription{}
	this.RequestedBytes = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.RequestedBytes *= -1
	}
	this.AllocatedBytes = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.AllocatedBytes *= -1
	}
	this.AllocatorName = string(randStringAllocationDescription(r))
	this.AllocationId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.AllocationId *= -1
	}
	this.HasSingleReference = bool(bool(r.Intn(2) == 0))
	this.Ptr = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyAllocationDescription interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneAllocationDescription(r randyAllocationDescription) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringAllocationDescription(r randyAllocationDescription) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneAllocationDescription(r)
	}
	return string(tmps)
}
func randUnrecognizedAllocationDescription(r randyAllocationDescription, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldAllocationDescription(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldAllocationDescription(dAtA []byte, r randyAllocationDescription, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateAllocationDescription(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateAllocationDescription(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateAllocationDescription(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateAllocationDescription(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateAllocationDescription(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateAllocationDescription(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateAllocationDescription(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *AllocationDescription) Size() (n int) {
	var l int
	_ = l
	if m.RequestedBytes != 0 {
		n += 1 + sovAllocationDescription(uint64(m.RequestedBytes))
	}
	if m.AllocatedBytes != 0 {
		n += 1 + sovAllocationDescription(uint64(m.AllocatedBytes))
	}
	l = len(m.AllocatorName)
	if l > 0 {
		n += 1 + l + sovAllocationDescription(uint64(l))
	}
	if m.AllocationId != 0 {
		n += 1 + sovAllocationDescription(uint64(m.AllocationId))
	}
	if m.HasSingleReference {
		n += 2
	}
	if m.Ptr != 0 {
		n += 1 + sovAllocationDescription(uint64(m.Ptr))
	}
	return n
}

func sovAllocationDescription(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAllocationDescription(x uint64) (n int) {
	return sovAllocationDescription(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AllocationDescription) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllocationDescription{`,
		`RequestedBytes:` + fmt.Sprintf("%v", this.RequestedBytes) + `,`,
		`AllocatedBytes:` + fmt.Sprintf("%v", this.AllocatedBytes) + `,`,
		`AllocatorName:` + fmt.Sprintf("%v", this.AllocatorName) + `,`,
		`AllocationId:` + fmt.Sprintf("%v", this.AllocationId) + `,`,
		`HasSingleReference:` + fmt.Sprintf("%v", this.HasSingleReference) + `,`,
		`Ptr:` + fmt.Sprintf("%v", this.Ptr) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAllocationDescription(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AllocationDescription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllocationDescription
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocationDescription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocationDescription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestedBytes", wireType)
			}
			m.RequestedBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocationDescription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestedBytes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocatedBytes", wireType)
			}
			m.AllocatedBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocationDescription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllocatedBytes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocatorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocationDescription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllocationDescription
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllocatorName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocationId", wireType)
			}
			m.AllocationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocationDescription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllocationId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasSingleReference", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocationDescription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasSingleReference = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ptr", wireType)
			}
			m.Ptr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocationDescription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ptr |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAllocationDescription(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllocationDescription
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAllocationDescription(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAllocationDescription
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAllocationDescription
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAllocationDescription
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAllocationDescription
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAllocationDescription
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAllocationDescription(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAllocationDescription = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAllocationDescription   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("allocation_description.proto", fileDescriptor_allocation_description_882bdbf3aa0bbdb4)
}

var fileDescriptor_allocation_description_882bdbf3aa0bbdb4 = []byte{
	// 320 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x41, 0x4a, 0xf3, 0x40,
	0x14, 0xc7, 0xfb, 0xbe, 0xf6, 0x2b, 0x76, 0xb0, 0x2a, 0x41, 0x21, 0xa8, 0x0c, 0xa1, 0x22, 0x66,
	0xd5, 0x0a, 0x9e, 0xc0, 0xe2, 0xc6, 0x8d, 0x94, 0x78, 0x80, 0x30, 0x6d, 0x5e, 0xd2, 0x60, 0x9a,
	0xa9, 0x33, 0x53, 0x8a, 0x3b, 0x8f, 0xe0, 0x31, 0x3c, 0x82, 0x47, 0x70, 0xe9, 0xd2, 0x65, 0x33,
	0x5e, 0xc0, 0x65, 0xdd, 0xc9, 0x4c, 0xed, 0xd4, 0x85, 0xbb, 0xf7, 0x7e, 0xef, 0xc7, 0x9f, 0x99,
	0x3f, 0x39, 0x66, 0x45, 0xc1, 0x47, 0x4c, 0xe5, 0xbc, 0x8c, 0x13, 0x94, 0x23, 0x91, 0x4f, 0xcd,
	0xdc, 0x9d, 0x0a, 0xae, 0xb8, 0xd7, 0x4a, 0x05, 0x9b, 0xe0, 0x9c, 0x8b, 0xbb, 0xc3, 0x4e, 0xc6,
	0x33, 0xde, 0xb3, 0x78, 0x38, 0x4b, 0x7b, 0x66, 0xb3, 0x8b, 0x9d, 0x56, 0x7a, 0xe7, 0x0b, 0xc8,
	0xc1, 0xa5, 0xcb, 0xbb, 0xda, 0xc4, 0x79, 0x67, 0x64, 0x57, 0xe0, 0xfd, 0x0c, 0xa5, 0xc2, 0x24,
	0x1e, 0x3e, 0x28, 0x94, 0x3e, 0x04, 0x10, 0xd6, 0xa3, 0x1d, 0x87, 0xfb, 0x86, 0x1a, 0xf1, 0xe7,
	0x45, 0x4e, 0xfc, 0xb7, 0x12, 0x1d, 0x5e, 0x89, 0xa7, 0x64, 0x4d, 0xb8, 0x88, 0x4b, 0x36, 0x41,
	0xbf, 0x1e, 0x40, 0xd8, 0x8a, 0xda, 0x8e, 0xde, 0xb0, 0x09, 0x7a, 0x27, 0xa4, 0xfd, 0xeb, 0x87,
	0x79, 0xe2, 0x37, 0x6c, 0xda, 0xf6, 0x06, 0x5e, 0x27, 0xde, 0x39, 0xd9, 0x1f, 0x33, 0x19, 0xcb,
	0xbc, 0xcc, 0x0a, 0x8c, 0x05, 0xa6, 0x28, 0xb0, 0x1c, 0xa1, 0xff, 0x3f, 0x80, 0x70, 0x2b, 0xf2,
	0xc6, 0x4c, 0xde, 0xda, 0x53, 0xb4, 0xbe, 0x78, 0x7b, 0xa4, 0x3e, 0x55, 0xc2, 0x6f, 0x06, 0x10,
	0x36, 0x22, 0x33, 0xf6, 0xc7, 0xef, 0x15, 0xad, 0x2d, 0x2a, 0x0a, 0x9f, 0x15, 0x85, 0x65, 0x45,
	0xe1, 0x51, 0x53, 0x78, 0xd6, 0x14, 0x5e, 0x34, 0x85, 0x57, 0x4d, 0xe1, 0x4d, 0x53, 0x58, 0x68,
	0x0a, 0x4f, 0x1f, 0xb4, 0x46, 0x7c, 0x2e, 0xb2, 0xae, 0xc2, 0x52, 0x72, 0x91, 0x16, 0x7c, 0xde,
	0x75, 0x3d, 0xf7, 0x8f, 0xfe, 0x2c, 0x70, 0x60, 0xfa, 0x95, 0x03, 0x58, 0x02, 0x0c, 0x9b, 0xb6,
	0xec, 0x8b, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe9, 0x65, 0x00, 0x3b, 0xbb, 0x01, 0x00, 0x00,
}

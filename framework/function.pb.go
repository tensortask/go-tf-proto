// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: function.proto

package framework

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// A library is a set of named functions.
type FunctionDefLibrary struct {
	Function             []*FunctionDef `protobuf:"bytes,1,rep,name=function" json:"function,omitempty"`
	Gradient             []*GradientDef `protobuf:"bytes,2,rep,name=gradient" json:"gradient,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *FunctionDefLibrary) Reset()      { *m = FunctionDefLibrary{} }
func (*FunctionDefLibrary) ProtoMessage() {}
func (*FunctionDefLibrary) Descriptor() ([]byte, []int) {
	return fileDescriptor_function_d0f3ec7b92c644a1, []int{0}
}
func (m *FunctionDefLibrary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FunctionDefLibrary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FunctionDefLibrary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FunctionDefLibrary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FunctionDefLibrary.Merge(dst, src)
}
func (m *FunctionDefLibrary) XXX_Size() int {
	return m.Size()
}
func (m *FunctionDefLibrary) XXX_DiscardUnknown() {
	xxx_messageInfo_FunctionDefLibrary.DiscardUnknown(m)
}

var xxx_messageInfo_FunctionDefLibrary proto.InternalMessageInfo

func (m *FunctionDefLibrary) GetFunction() []*FunctionDef {
	if m != nil {
		return m.Function
	}
	return nil
}

func (m *FunctionDefLibrary) GetGradient() []*GradientDef {
	if m != nil {
		return m.Gradient
	}
	return nil
}

// A function can be instantiated when the runtime can bind every attr
// with a value. When a GraphDef has a call to a function, it must
// have binding for every attr defined in the signature.
//
// TODO(zhifengc):
//   * device spec, etc.
type FunctionDef struct {
	// The definition of the function's name, arguments, return values,
	// attrs etc.
	Signature *OpDef `protobuf:"bytes,1,opt,name=signature" json:"signature,omitempty"`
	// Attributes specific to this function definition.
	Attr map[string]*AttrValue `protobuf:"bytes,5,rep,name=attr" json:"attr,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	// By convention, "op" in node_def is resolved by consulting with a
	// user-defined library first. If not resolved, "func" is assumed to
	// be a builtin op.
	NodeDef []*NodeDef `protobuf:"bytes,3,rep,name=node_def,json=nodeDef" json:"node_def,omitempty"`
	// A mapping from the output arg names from `signature` to the
	// outputs from `node_def` that should be returned by the function.
	Ret                  map[string]string `protobuf:"bytes,4,rep,name=ret" json:"ret,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *FunctionDef) Reset()      { *m = FunctionDef{} }
func (*FunctionDef) ProtoMessage() {}
func (*FunctionDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_function_d0f3ec7b92c644a1, []int{1}
}
func (m *FunctionDef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FunctionDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FunctionDef.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FunctionDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FunctionDef.Merge(dst, src)
}
func (m *FunctionDef) XXX_Size() int {
	return m.Size()
}
func (m *FunctionDef) XXX_DiscardUnknown() {
	xxx_messageInfo_FunctionDef.DiscardUnknown(m)
}

var xxx_messageInfo_FunctionDef proto.InternalMessageInfo

func (m *FunctionDef) GetSignature() *OpDef {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *FunctionDef) GetAttr() map[string]*AttrValue {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *FunctionDef) GetNodeDef() []*NodeDef {
	if m != nil {
		return m.NodeDef
	}
	return nil
}

func (m *FunctionDef) GetRet() map[string]string {
	if m != nil {
		return m.Ret
	}
	return nil
}

// GradientDef defines the gradient function of a function defined in
// a function library.
//
// A gradient function g (specified by gradient_func) for a function f
// (specified by function_name) must follow the following:
//
// The function 'f' must be a numerical function which takes N inputs
// and produces M outputs. Its gradient function 'g', which is a
// function taking N + M inputs and produces N outputs.
//
// I.e. if we have
//    (y1, y2, ..., y_M) = f(x1, x2, ..., x_N),
// then, g is
//    (dL/dx1, dL/dx2, ..., dL/dx_N) = g(x1, x2, ..., x_N,
//                                      dL/dy1, dL/dy2, ..., dL/dy_M),
// where L is a scalar-value function of (x1, x2, ..., xN) (e.g., the
// loss function). dL/dx_i is the partial derivative of L with respect
// to x_i.
type GradientDef struct {
	FunctionName         string   `protobuf:"bytes,1,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	GradientFunc         string   `protobuf:"bytes,2,opt,name=gradient_func,json=gradientFunc,proto3" json:"gradient_func,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GradientDef) Reset()      { *m = GradientDef{} }
func (*GradientDef) ProtoMessage() {}
func (*GradientDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_function_d0f3ec7b92c644a1, []int{2}
}
func (m *GradientDef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GradientDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GradientDef.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GradientDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GradientDef.Merge(dst, src)
}
func (m *GradientDef) XXX_Size() int {
	return m.Size()
}
func (m *GradientDef) XXX_DiscardUnknown() {
	xxx_messageInfo_GradientDef.DiscardUnknown(m)
}

var xxx_messageInfo_GradientDef proto.InternalMessageInfo

func (m *GradientDef) GetFunctionName() string {
	if m != nil {
		return m.FunctionName
	}
	return ""
}

func (m *GradientDef) GetGradientFunc() string {
	if m != nil {
		return m.GradientFunc
	}
	return ""
}

func init() {
	proto.RegisterType((*FunctionDefLibrary)(nil), "framework.FunctionDefLibrary")
	proto.RegisterType((*FunctionDef)(nil), "framework.FunctionDef")
	proto.RegisterMapType((map[string]*AttrValue)(nil), "framework.FunctionDef.AttrEntry")
	proto.RegisterMapType((map[string]string)(nil), "framework.FunctionDef.RetEntry")
	proto.RegisterType((*GradientDef)(nil), "framework.GradientDef")
}
func (this *FunctionDefLibrary) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FunctionDefLibrary)
	if !ok {
		that2, ok := that.(FunctionDefLibrary)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FunctionDefLibrary")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FunctionDefLibrary but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FunctionDefLibrary but is not nil && this == nil")
	}
	if len(this.Function) != len(that1.Function) {
		return fmt.Errorf("Function this(%v) Not Equal that(%v)", len(this.Function), len(that1.Function))
	}
	for i := range this.Function {
		if !this.Function[i].Equal(that1.Function[i]) {
			return fmt.Errorf("Function this[%v](%v) Not Equal that[%v](%v)", i, this.Function[i], i, that1.Function[i])
		}
	}
	if len(this.Gradient) != len(that1.Gradient) {
		return fmt.Errorf("Gradient this(%v) Not Equal that(%v)", len(this.Gradient), len(that1.Gradient))
	}
	for i := range this.Gradient {
		if !this.Gradient[i].Equal(that1.Gradient[i]) {
			return fmt.Errorf("Gradient this[%v](%v) Not Equal that[%v](%v)", i, this.Gradient[i], i, that1.Gradient[i])
		}
	}
	return nil
}
func (this *FunctionDefLibrary) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FunctionDefLibrary)
	if !ok {
		that2, ok := that.(FunctionDefLibrary)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Function) != len(that1.Function) {
		return false
	}
	for i := range this.Function {
		if !this.Function[i].Equal(that1.Function[i]) {
			return false
		}
	}
	if len(this.Gradient) != len(that1.Gradient) {
		return false
	}
	for i := range this.Gradient {
		if !this.Gradient[i].Equal(that1.Gradient[i]) {
			return false
		}
	}
	return true
}
func (this *FunctionDef) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FunctionDef)
	if !ok {
		that2, ok := that.(FunctionDef)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FunctionDef")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FunctionDef but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FunctionDef but is not nil && this == nil")
	}
	if !this.Signature.Equal(that1.Signature) {
		return fmt.Errorf("Signature this(%v) Not Equal that(%v)", this.Signature, that1.Signature)
	}
	if len(this.Attr) != len(that1.Attr) {
		return fmt.Errorf("Attr this(%v) Not Equal that(%v)", len(this.Attr), len(that1.Attr))
	}
	for i := range this.Attr {
		if !this.Attr[i].Equal(that1.Attr[i]) {
			return fmt.Errorf("Attr this[%v](%v) Not Equal that[%v](%v)", i, this.Attr[i], i, that1.Attr[i])
		}
	}
	if len(this.NodeDef) != len(that1.NodeDef) {
		return fmt.Errorf("NodeDef this(%v) Not Equal that(%v)", len(this.NodeDef), len(that1.NodeDef))
	}
	for i := range this.NodeDef {
		if !this.NodeDef[i].Equal(that1.NodeDef[i]) {
			return fmt.Errorf("NodeDef this[%v](%v) Not Equal that[%v](%v)", i, this.NodeDef[i], i, that1.NodeDef[i])
		}
	}
	if len(this.Ret) != len(that1.Ret) {
		return fmt.Errorf("Ret this(%v) Not Equal that(%v)", len(this.Ret), len(that1.Ret))
	}
	for i := range this.Ret {
		if this.Ret[i] != that1.Ret[i] {
			return fmt.Errorf("Ret this[%v](%v) Not Equal that[%v](%v)", i, this.Ret[i], i, that1.Ret[i])
		}
	}
	return nil
}
func (this *FunctionDef) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FunctionDef)
	if !ok {
		that2, ok := that.(FunctionDef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if len(this.Attr) != len(that1.Attr) {
		return false
	}
	for i := range this.Attr {
		if !this.Attr[i].Equal(that1.Attr[i]) {
			return false
		}
	}
	if len(this.NodeDef) != len(that1.NodeDef) {
		return false
	}
	for i := range this.NodeDef {
		if !this.NodeDef[i].Equal(that1.NodeDef[i]) {
			return false
		}
	}
	if len(this.Ret) != len(that1.Ret) {
		return false
	}
	for i := range this.Ret {
		if this.Ret[i] != that1.Ret[i] {
			return false
		}
	}
	return true
}
func (this *GradientDef) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GradientDef)
	if !ok {
		that2, ok := that.(GradientDef)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GradientDef")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GradientDef but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GradientDef but is not nil && this == nil")
	}
	if this.FunctionName != that1.FunctionName {
		return fmt.Errorf("FunctionName this(%v) Not Equal that(%v)", this.FunctionName, that1.FunctionName)
	}
	if this.GradientFunc != that1.GradientFunc {
		return fmt.Errorf("GradientFunc this(%v) Not Equal that(%v)", this.GradientFunc, that1.GradientFunc)
	}
	return nil
}
func (this *GradientDef) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GradientDef)
	if !ok {
		that2, ok := that.(GradientDef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FunctionName != that1.FunctionName {
		return false
	}
	if this.GradientFunc != that1.GradientFunc {
		return false
	}
	return true
}
func (this *FunctionDefLibrary) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&framework.FunctionDefLibrary{")
	if this.Function != nil {
		s = append(s, "Function: "+fmt.Sprintf("%#v", this.Function)+",\n")
	}
	if this.Gradient != nil {
		s = append(s, "Gradient: "+fmt.Sprintf("%#v", this.Gradient)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FunctionDef) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&framework.FunctionDef{")
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	keysForAttr := make([]string, 0, len(this.Attr))
	for k, _ := range this.Attr {
		keysForAttr = append(keysForAttr, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttr)
	mapStringForAttr := "map[string]*AttrValue{"
	for _, k := range keysForAttr {
		mapStringForAttr += fmt.Sprintf("%#v: %#v,", k, this.Attr[k])
	}
	mapStringForAttr += "}"
	if this.Attr != nil {
		s = append(s, "Attr: "+mapStringForAttr+",\n")
	}
	if this.NodeDef != nil {
		s = append(s, "NodeDef: "+fmt.Sprintf("%#v", this.NodeDef)+",\n")
	}
	keysForRet := make([]string, 0, len(this.Ret))
	for k, _ := range this.Ret {
		keysForRet = append(keysForRet, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForRet)
	mapStringForRet := "map[string]string{"
	for _, k := range keysForRet {
		mapStringForRet += fmt.Sprintf("%#v: %#v,", k, this.Ret[k])
	}
	mapStringForRet += "}"
	if this.Ret != nil {
		s = append(s, "Ret: "+mapStringForRet+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GradientDef) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&framework.GradientDef{")
	s = append(s, "FunctionName: "+fmt.Sprintf("%#v", this.FunctionName)+",\n")
	s = append(s, "GradientFunc: "+fmt.Sprintf("%#v", this.GradientFunc)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringFunction(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *FunctionDefLibrary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FunctionDefLibrary) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Function) > 0 {
		for _, msg := range m.Function {
			dAtA[i] = 0xa
			i++
			i = encodeVarintFunction(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Gradient) > 0 {
		for _, msg := range m.Gradient {
			dAtA[i] = 0x12
			i++
			i = encodeVarintFunction(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FunctionDef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FunctionDef) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Signature != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFunction(dAtA, i, uint64(m.Signature.Size()))
		n1, err := m.Signature.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.NodeDef) > 0 {
		for _, msg := range m.NodeDef {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintFunction(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Ret) > 0 {
		for k, _ := range m.Ret {
			dAtA[i] = 0x22
			i++
			v := m.Ret[k]
			mapSize := 1 + len(k) + sovFunction(uint64(len(k))) + 1 + len(v) + sovFunction(uint64(len(v)))
			i = encodeVarintFunction(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintFunction(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintFunction(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Attr) > 0 {
		for k, _ := range m.Attr {
			dAtA[i] = 0x2a
			i++
			v := m.Attr[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovFunction(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovFunction(uint64(len(k))) + msgSize
			i = encodeVarintFunction(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintFunction(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintFunction(dAtA, i, uint64(v.Size()))
				n2, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n2
			}
		}
	}
	return i, nil
}

func (m *GradientDef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GradientDef) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FunctionName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFunction(dAtA, i, uint64(len(m.FunctionName)))
		i += copy(dAtA[i:], m.FunctionName)
	}
	if len(m.GradientFunc) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFunction(dAtA, i, uint64(len(m.GradientFunc)))
		i += copy(dAtA[i:], m.GradientFunc)
	}
	return i, nil
}

func encodeVarintFunction(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedFunctionDefLibrary(r randyFunction, easy bool) *FunctionDefLibrary {
	this := &FunctionDefLibrary{}
	if r.Intn(10) == 0 {
		v1 := r.Intn(5)
		this.Function = make([]*FunctionDef, v1)
		for i := 0; i < v1; i++ {
			this.Function[i] = NewPopulatedFunctionDef(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.Gradient = make([]*GradientDef, v2)
		for i := 0; i < v2; i++ {
			this.Gradient[i] = NewPopulatedGradientDef(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFunctionDef(r randyFunction, easy bool) *FunctionDef {
	this := &FunctionDef{}
	if r.Intn(10) == 0 {
		this.Signature = NewPopulatedOpDef(r, easy)
	}
	if r.Intn(10) == 0 {
		v3 := r.Intn(5)
		this.NodeDef = make([]*NodeDef, v3)
		for i := 0; i < v3; i++ {
			this.NodeDef[i] = NewPopulatedNodeDef(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v4 := r.Intn(10)
		this.Ret = make(map[string]string)
		for i := 0; i < v4; i++ {
			this.Ret[randStringFunction(r)] = randStringFunction(r)
		}
	}
	if r.Intn(10) == 0 {
		v5 := r.Intn(10)
		this.Attr = make(map[string]*AttrValue)
		for i := 0; i < v5; i++ {
			this.Attr[randStringFunction(r)] = NewPopulatedAttrValue(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGradientDef(r randyFunction, easy bool) *GradientDef {
	this := &GradientDef{}
	this.FunctionName = string(randStringFunction(r))
	this.GradientFunc = string(randStringFunction(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyFunction interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneFunction(r randyFunction) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringFunction(r randyFunction) string {
	v6 := r.Intn(100)
	tmps := make([]rune, v6)
	for i := 0; i < v6; i++ {
		tmps[i] = randUTF8RuneFunction(r)
	}
	return string(tmps)
}
func randUnrecognizedFunction(r randyFunction, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldFunction(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldFunction(dAtA []byte, r randyFunction, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateFunction(dAtA, uint64(key))
		v7 := r.Int63()
		if r.Intn(2) == 0 {
			v7 *= -1
		}
		dAtA = encodeVarintPopulateFunction(dAtA, uint64(v7))
	case 1:
		dAtA = encodeVarintPopulateFunction(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateFunction(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateFunction(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateFunction(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateFunction(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *FunctionDefLibrary) Size() (n int) {
	var l int
	_ = l
	if len(m.Function) > 0 {
		for _, e := range m.Function {
			l = e.Size()
			n += 1 + l + sovFunction(uint64(l))
		}
	}
	if len(m.Gradient) > 0 {
		for _, e := range m.Gradient {
			l = e.Size()
			n += 1 + l + sovFunction(uint64(l))
		}
	}
	return n
}

func (m *FunctionDef) Size() (n int) {
	var l int
	_ = l
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovFunction(uint64(l))
	}
	if len(m.NodeDef) > 0 {
		for _, e := range m.NodeDef {
			l = e.Size()
			n += 1 + l + sovFunction(uint64(l))
		}
	}
	if len(m.Ret) > 0 {
		for k, v := range m.Ret {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovFunction(uint64(len(k))) + 1 + len(v) + sovFunction(uint64(len(v)))
			n += mapEntrySize + 1 + sovFunction(uint64(mapEntrySize))
		}
	}
	if len(m.Attr) > 0 {
		for k, v := range m.Attr {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFunction(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovFunction(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovFunction(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *GradientDef) Size() (n int) {
	var l int
	_ = l
	l = len(m.FunctionName)
	if l > 0 {
		n += 1 + l + sovFunction(uint64(l))
	}
	l = len(m.GradientFunc)
	if l > 0 {
		n += 1 + l + sovFunction(uint64(l))
	}
	return n
}

func sovFunction(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFunction(x uint64) (n int) {
	return sovFunction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FunctionDefLibrary) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FunctionDefLibrary{`,
		`Function:` + strings.Replace(fmt.Sprintf("%v", this.Function), "FunctionDef", "FunctionDef", 1) + `,`,
		`Gradient:` + strings.Replace(fmt.Sprintf("%v", this.Gradient), "GradientDef", "GradientDef", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FunctionDef) String() string {
	if this == nil {
		return "nil"
	}
	keysForRet := make([]string, 0, len(this.Ret))
	for k, _ := range this.Ret {
		keysForRet = append(keysForRet, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForRet)
	mapStringForRet := "map[string]string{"
	for _, k := range keysForRet {
		mapStringForRet += fmt.Sprintf("%v: %v,", k, this.Ret[k])
	}
	mapStringForRet += "}"
	keysForAttr := make([]string, 0, len(this.Attr))
	for k, _ := range this.Attr {
		keysForAttr = append(keysForAttr, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttr)
	mapStringForAttr := "map[string]*AttrValue{"
	for _, k := range keysForAttr {
		mapStringForAttr += fmt.Sprintf("%v: %v,", k, this.Attr[k])
	}
	mapStringForAttr += "}"
	s := strings.Join([]string{`&FunctionDef{`,
		`Signature:` + strings.Replace(fmt.Sprintf("%v", this.Signature), "OpDef", "OpDef", 1) + `,`,
		`NodeDef:` + strings.Replace(fmt.Sprintf("%v", this.NodeDef), "NodeDef", "NodeDef", 1) + `,`,
		`Ret:` + mapStringForRet + `,`,
		`Attr:` + mapStringForAttr + `,`,
		`}`,
	}, "")
	return s
}
func (this *GradientDef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GradientDef{`,
		`FunctionName:` + fmt.Sprintf("%v", this.FunctionName) + `,`,
		`GradientFunc:` + fmt.Sprintf("%v", this.GradientFunc) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFunction(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FunctionDefLibrary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFunction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FunctionDefLibrary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FunctionDefLibrary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Function", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFunction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFunction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Function = append(m.Function, &FunctionDef{})
			if err := m.Function[len(m.Function)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gradient", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFunction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFunction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gradient = append(m.Gradient, &GradientDef{})
			if err := m.Gradient[len(m.Gradient)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFunction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFunction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FunctionDef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFunction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FunctionDef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FunctionDef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFunction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFunction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &OpDef{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeDef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFunction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFunction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeDef = append(m.NodeDef, &NodeDef{})
			if err := m.NodeDef[len(m.NodeDef)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFunction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFunction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ret == nil {
				m.Ret = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFunction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFunction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFunction
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFunction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthFunction
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFunction(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFunction
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Ret[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFunction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFunction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attr == nil {
				m.Attr = make(map[string]*AttrValue)
			}
			var mapkey string
			var mapvalue *AttrValue
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFunction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFunction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFunction
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFunction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFunction
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthFunction
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &AttrValue{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFunction(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFunction
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attr[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFunction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFunction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GradientDef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFunction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GradientDef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GradientDef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FunctionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFunction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFunction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FunctionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GradientFunc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFunction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFunction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GradientFunc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFunction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFunction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFunction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFunction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFunction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFunction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFunction
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFunction
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFunction(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFunction = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFunction   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("function.proto", fileDescriptor_function_d0f3ec7b92c644a1) }

var fileDescriptor_function_d0f3ec7b92c644a1 = []byte{
	// 450 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0xcb, 0x6e, 0x13, 0x31,
	0x14, 0xed, 0x9d, 0x49, 0x21, 0xe3, 0x84, 0x28, 0xb2, 0x2a, 0x64, 0x65, 0x61, 0xa2, 0xb0, 0xa9,
	0x90, 0x98, 0x8a, 0x80, 0x10, 0x62, 0x47, 0xc5, 0x43, 0x42, 0x50, 0xaa, 0x59, 0xc0, 0x82, 0x45,
	0xe4, 0x30, 0x9e, 0xd1, 0xa8, 0x8d, 0x1d, 0x39, 0x1e, 0xaa, 0x48, 0x2c, 0xf8, 0x04, 0x3e, 0x83,
	0x4f, 0xe0, 0x13, 0x58, 0xb2, 0x64, 0xd9, 0x19, 0x7e, 0x80, 0x65, 0x97, 0xc8, 0x9e, 0x71, 0x62,
	0x89, 0x74, 0x77, 0x1f, 0xe7, 0x1c, 0xdf, 0x73, 0xaf, 0xd1, 0x20, 0x2b, 0xc5, 0x27, 0x5d, 0x48,
	0x11, 0x2f, 0x95, 0xd4, 0x12, 0x47, 0x99, 0x62, 0x0b, 0x7e, 0x21, 0xd5, 0xd9, 0x68, 0x92, 0xcb,
	0x5c, 0x1e, 0xd9, 0xf2, 0xbc, 0xcc, 0x8e, 0x4c, 0x66, 0x13, 0x1b, 0x35, 0xf0, 0xd1, 0x90, 0x69,
	0xad, 0x66, 0x9f, 0xd9, 0x79, 0xc9, 0xdb, 0xca, 0x40, 0xc8, 0x94, 0xcf, 0x52, 0x9e, 0xb5, 0x79,
	0x5f, 0x2e, 0xb7, 0xd9, 0xe4, 0x0b, 0xc2, 0x2f, 0xdb, 0x07, 0x9f, 0xf3, 0xec, 0x4d, 0x31, 0x57,
	0x4c, 0xad, 0xf1, 0x14, 0x75, 0xdd, 0x18, 0x04, 0xc6, 0xe1, 0x61, 0x6f, 0x7a, 0x3b, 0xde, 0xcc,
	0x11, 0x7b, 0x84, 0x64, 0x83, 0x33, 0x9c, 0x5c, 0xb1, 0xb4, 0xe0, 0x42, 0x93, 0xe0, 0x3f, 0xce,
	0xab, 0xb6, 0x65, 0x39, 0x0e, 0x37, 0xa9, 0x03, 0xd4, 0xf3, 0xd4, 0x70, 0x8c, 0xa2, 0x55, 0x91,
	0x0b, 0xa6, 0x4b, 0xc5, 0x09, 0x8c, 0xe1, 0xb0, 0x37, 0x1d, 0x7a, 0x22, 0xef, 0x96, 0x86, 0xbe,
	0x85, 0xe0, 0xfb, 0xa8, 0xeb, 0xdc, 0x91, 0xd0, 0xbe, 0x89, 0x3d, 0xf8, 0x89, 0x4c, 0xb9, 0x21,
	0xdc, 0x14, 0x4d, 0x80, 0x1f, 0xa0, 0x50, 0x71, 0x4d, 0x3a, 0x16, 0x79, 0x67, 0xb7, 0xa3, 0x38,
	0xe1, 0xfa, 0x85, 0xd0, 0x6a, 0x9d, 0x18, 0x2c, 0x7e, 0x84, 0x3a, 0x66, 0xa3, 0x64, 0xdf, 0x72,
	0xc6, 0xd7, 0x70, 0x9e, 0x69, 0xad, 0x1a, 0x92, 0x45, 0x8f, 0xde, 0xa2, 0x68, 0x53, 0xc2, 0x43,
	0x14, 0x9e, 0xf1, 0xb5, 0xb5, 0x13, 0x25, 0x26, 0xc4, 0xf7, 0xd0, 0xbe, 0xbd, 0x10, 0x09, 0xac,
	0xc5, 0x03, 0x4f, 0xd5, 0xd0, 0xde, 0x9b, 0x5e, 0xd2, 0x40, 0x9e, 0x06, 0x4f, 0x60, 0xf4, 0x18,
	0x75, 0xdd, 0x54, 0x3b, 0xd4, 0x0e, 0x7c, 0xb5, 0xc8, 0xe3, 0xbd, 0xee, 0x74, 0x83, 0x61, 0x38,
	0xf9, 0x80, 0x7a, 0xde, 0xf6, 0xf1, 0x5d, 0x74, 0xcb, 0xdd, 0x6c, 0x26, 0xd8, 0x82, 0xb7, 0x52,
	0x7d, 0x57, 0x3c, 0x61, 0x0b, 0x6e, 0x40, 0xee, 0x48, 0x33, 0xd3, 0x68, 0xb5, 0xfb, 0xae, 0x68,
	0xcc, 0x1f, 0x7f, 0xfc, 0x5d, 0xd1, 0xbd, 0xcb, 0x8a, 0xc2, 0xdf, 0x8a, 0xc2, 0x55, 0x45, 0xe1,
	0x6b, 0x4d, 0xe1, 0x7b, 0x4d, 0xe1, 0x47, 0x4d, 0xe1, 0x67, 0x4d, 0xe1, 0x57, 0x4d, 0xe1, 0xb2,
	0xa6, 0xf0, 0xed, 0x0f, 0xdd, 0x43, 0x44, 0xaa, 0x3c, 0xd6, 0x5c, 0xac, 0xa4, 0xca, 0xce, 0xe5,
	0xc5, 0xd6, 0xf3, 0xf1, 0xc0, 0xad, 0xf2, 0xd4, 0x7c, 0xc9, 0xd5, 0x29, 0x5c, 0x01, 0xcc, 0x6f,
	0xd8, 0xff, 0xf9, 0xf0, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7c, 0x33, 0x6e, 0x42, 0x10, 0x03,
	0x00, 0x00,
}
